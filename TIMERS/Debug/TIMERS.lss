
TIMERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000345c  000034f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000345c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800114  00800114  00003504  2**0
                  ALLOC
  3 .stab         00002f58  00000000  00000000  00003504  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001aff  00000000  00000000  0000645c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000809b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000820b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000baec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_1>
       8:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__vector_7>
      20:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__vector_8>
      24:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__vector_11>
      30:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__vector_12>
      34:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__vector_13>
      38:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__vector_14>
      3c:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__vector_15>
      40:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e5       	ldi	r30, 0x5C	; 92
      7c:	f4 e3       	ldi	r31, 0x34	; 52
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 31       	cpi	r26, 0x14	; 20
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e1       	ldi	r26, 0x14	; 20
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 32       	cpi	r26, 0x2A	; 42
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a5 18 	call	0x314a	; 0x314a <main>
      9e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__fixunssfsi>:
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	7b 01       	movw	r14, r22
      b0:	8c 01       	movw	r16, r24
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__gesf2>
      be:	88 23       	and	r24, r24
      c0:	8c f0       	brlt	.+34     	; 0xe4 <__fixunssfsi+0x3e>
      c2:	c8 01       	movw	r24, r16
      c4:	b7 01       	movw	r22, r14
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	5f e4       	ldi	r21, 0x4F	; 79
      ce:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
      d2:	0e 94 b3 03 	call	0x766	; 0x766 <__fixsfsi>
      d6:	9b 01       	movw	r18, r22
      d8:	ac 01       	movw	r20, r24
      da:	20 50       	subi	r18, 0x00	; 0
      dc:	30 40       	sbci	r19, 0x00	; 0
      de:	40 40       	sbci	r20, 0x00	; 0
      e0:	50 48       	sbci	r21, 0x80	; 128
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <__fixunssfsi+0x4a>
      e4:	c8 01       	movw	r24, r16
      e6:	b7 01       	movw	r22, r14
      e8:	0e 94 b3 03 	call	0x766	; 0x766 <__fixsfsi>
      ec:	9b 01       	movw	r18, r22
      ee:	ac 01       	movw	r20, r24
      f0:	b9 01       	movw	r22, r18
      f2:	ca 01       	movw	r24, r20
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	ff 90       	pop	r15
      fa:	ef 90       	pop	r14
      fc:	08 95       	ret

000000fe <_fpadd_parts>:
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	e5 e8       	ldi	r30, 0x85	; 133
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__prologue_saves__>
     10a:	dc 01       	movw	r26, r24
     10c:	2b 01       	movw	r4, r22
     10e:	fa 01       	movw	r30, r20
     110:	9c 91       	ld	r25, X
     112:	92 30       	cpi	r25, 0x02	; 2
     114:	08 f4       	brcc	.+2      	; 0x118 <_fpadd_parts+0x1a>
     116:	39 c1       	rjmp	.+626    	; 0x38a <_fpadd_parts+0x28c>
     118:	eb 01       	movw	r28, r22
     11a:	88 81       	ld	r24, Y
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	08 f4       	brcc	.+2      	; 0x122 <_fpadd_parts+0x24>
     120:	33 c1       	rjmp	.+614    	; 0x388 <_fpadd_parts+0x28a>
     122:	94 30       	cpi	r25, 0x04	; 4
     124:	69 f4       	brne	.+26     	; 0x140 <_fpadd_parts+0x42>
     126:	84 30       	cpi	r24, 0x04	; 4
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x2e>
     12a:	2f c1       	rjmp	.+606    	; 0x38a <_fpadd_parts+0x28c>
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	9c 91       	ld	r25, X
     130:	11 97       	sbiw	r26, 0x01	; 1
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	98 17       	cp	r25, r24
     136:	09 f4       	brne	.+2      	; 0x13a <_fpadd_parts+0x3c>
     138:	28 c1       	rjmp	.+592    	; 0x38a <_fpadd_parts+0x28c>
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	25 c1       	rjmp	.+586    	; 0x38a <_fpadd_parts+0x28c>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	09 f4       	brne	.+2      	; 0x146 <_fpadd_parts+0x48>
     144:	21 c1       	rjmp	.+578    	; 0x388 <_fpadd_parts+0x28a>
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	a9 f4       	brne	.+42     	; 0x174 <_fpadd_parts+0x76>
     14a:	92 30       	cpi	r25, 0x02	; 2
     14c:	09 f0       	breq	.+2      	; 0x150 <_fpadd_parts+0x52>
     14e:	1d c1       	rjmp	.+570    	; 0x38a <_fpadd_parts+0x28c>
     150:	9a 01       	movw	r18, r20
     152:	ad 01       	movw	r20, r26
     154:	88 e0       	ldi	r24, 0x08	; 8
     156:	ea 01       	movw	r28, r20
     158:	09 90       	ld	r0, Y+
     15a:	ae 01       	movw	r20, r28
     15c:	e9 01       	movw	r28, r18
     15e:	09 92       	st	Y+, r0
     160:	9e 01       	movw	r18, r28
     162:	81 50       	subi	r24, 0x01	; 1
     164:	c1 f7       	brne	.-16     	; 0x156 <_fpadd_parts+0x58>
     166:	e2 01       	movw	r28, r4
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	9c 91       	ld	r25, X
     16e:	89 23       	and	r24, r25
     170:	81 83       	std	Z+1, r24	; 0x01
     172:	08 c1       	rjmp	.+528    	; 0x384 <_fpadd_parts+0x286>
     174:	92 30       	cpi	r25, 0x02	; 2
     176:	09 f4       	brne	.+2      	; 0x17a <_fpadd_parts+0x7c>
     178:	07 c1       	rjmp	.+526    	; 0x388 <_fpadd_parts+0x28a>
     17a:	12 96       	adiw	r26, 0x02	; 2
     17c:	2d 90       	ld	r2, X+
     17e:	3c 90       	ld	r3, X
     180:	13 97       	sbiw	r26, 0x03	; 3
     182:	eb 01       	movw	r28, r22
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	14 96       	adiw	r26, 0x04	; 4
     18a:	ad 90       	ld	r10, X+
     18c:	bd 90       	ld	r11, X+
     18e:	cd 90       	ld	r12, X+
     190:	dc 90       	ld	r13, X
     192:	17 97       	sbiw	r26, 0x07	; 7
     194:	ec 80       	ldd	r14, Y+4	; 0x04
     196:	fd 80       	ldd	r15, Y+5	; 0x05
     198:	0e 81       	ldd	r16, Y+6	; 0x06
     19a:	1f 81       	ldd	r17, Y+7	; 0x07
     19c:	91 01       	movw	r18, r2
     19e:	28 1b       	sub	r18, r24
     1a0:	39 0b       	sbc	r19, r25
     1a2:	b9 01       	movw	r22, r18
     1a4:	37 ff       	sbrs	r19, 7
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xb2>
     1a8:	66 27       	eor	r22, r22
     1aa:	77 27       	eor	r23, r23
     1ac:	62 1b       	sub	r22, r18
     1ae:	73 0b       	sbc	r23, r19
     1b0:	60 32       	cpi	r22, 0x20	; 32
     1b2:	71 05       	cpc	r23, r1
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <_fpadd_parts+0xba>
     1b6:	61 c0       	rjmp	.+194    	; 0x27a <_fpadd_parts+0x17c>
     1b8:	12 16       	cp	r1, r18
     1ba:	13 06       	cpc	r1, r19
     1bc:	6c f5       	brge	.+90     	; 0x218 <_fpadd_parts+0x11a>
     1be:	37 01       	movw	r6, r14
     1c0:	48 01       	movw	r8, r16
     1c2:	06 2e       	mov	r0, r22
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <_fpadd_parts+0xd0>
     1c6:	96 94       	lsr	r9
     1c8:	87 94       	ror	r8
     1ca:	77 94       	ror	r7
     1cc:	67 94       	ror	r6
     1ce:	0a 94       	dec	r0
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <_fpadd_parts+0xc8>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <_fpadd_parts+0xe6>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	44 1f       	adc	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	6a 95       	dec	r22
     1e6:	d2 f7       	brpl	.-12     	; 0x1dc <_fpadd_parts+0xde>
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	30 40       	sbci	r19, 0x00	; 0
     1ec:	40 40       	sbci	r20, 0x00	; 0
     1ee:	50 40       	sbci	r21, 0x00	; 0
     1f0:	2e 21       	and	r18, r14
     1f2:	3f 21       	and	r19, r15
     1f4:	40 23       	and	r20, r16
     1f6:	51 23       	and	r21, r17
     1f8:	21 15       	cp	r18, r1
     1fa:	31 05       	cpc	r19, r1
     1fc:	41 05       	cpc	r20, r1
     1fe:	51 05       	cpc	r21, r1
     200:	21 f0       	breq	.+8      	; 0x20a <_fpadd_parts+0x10c>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	79 01       	movw	r14, r18
     20c:	8a 01       	movw	r16, r20
     20e:	e6 28       	or	r14, r6
     210:	f7 28       	or	r15, r7
     212:	08 29       	or	r16, r8
     214:	19 29       	or	r17, r9
     216:	3c c0       	rjmp	.+120    	; 0x290 <_fpadd_parts+0x192>
     218:	23 2b       	or	r18, r19
     21a:	d1 f1       	breq	.+116    	; 0x290 <_fpadd_parts+0x192>
     21c:	26 0e       	add	r2, r22
     21e:	37 1e       	adc	r3, r23
     220:	35 01       	movw	r6, r10
     222:	46 01       	movw	r8, r12
     224:	06 2e       	mov	r0, r22
     226:	04 c0       	rjmp	.+8      	; 0x230 <_fpadd_parts+0x132>
     228:	96 94       	lsr	r9
     22a:	87 94       	ror	r8
     22c:	77 94       	ror	r7
     22e:	67 94       	ror	r6
     230:	0a 94       	dec	r0
     232:	d2 f7       	brpl	.-12     	; 0x228 <_fpadd_parts+0x12a>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x148>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	6a 95       	dec	r22
     248:	d2 f7       	brpl	.-12     	; 0x23e <_fpadd_parts+0x140>
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	30 40       	sbci	r19, 0x00	; 0
     24e:	40 40       	sbci	r20, 0x00	; 0
     250:	50 40       	sbci	r21, 0x00	; 0
     252:	2a 21       	and	r18, r10
     254:	3b 21       	and	r19, r11
     256:	4c 21       	and	r20, r12
     258:	5d 21       	and	r21, r13
     25a:	21 15       	cp	r18, r1
     25c:	31 05       	cpc	r19, r1
     25e:	41 05       	cpc	r20, r1
     260:	51 05       	cpc	r21, r1
     262:	21 f0       	breq	.+8      	; 0x26c <_fpadd_parts+0x16e>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	59 01       	movw	r10, r18
     26e:	6a 01       	movw	r12, r20
     270:	a6 28       	or	r10, r6
     272:	b7 28       	or	r11, r7
     274:	c8 28       	or	r12, r8
     276:	d9 28       	or	r13, r9
     278:	0b c0       	rjmp	.+22     	; 0x290 <_fpadd_parts+0x192>
     27a:	82 15       	cp	r24, r2
     27c:	93 05       	cpc	r25, r3
     27e:	2c f0       	brlt	.+10     	; 0x28a <_fpadd_parts+0x18c>
     280:	1c 01       	movw	r2, r24
     282:	aa 24       	eor	r10, r10
     284:	bb 24       	eor	r11, r11
     286:	65 01       	movw	r12, r10
     288:	03 c0       	rjmp	.+6      	; 0x290 <_fpadd_parts+0x192>
     28a:	ee 24       	eor	r14, r14
     28c:	ff 24       	eor	r15, r15
     28e:	87 01       	movw	r16, r14
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	9c 91       	ld	r25, X
     294:	d2 01       	movw	r26, r4
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	8c 91       	ld	r24, X
     29a:	98 17       	cp	r25, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <_fpadd_parts+0x1a2>
     29e:	45 c0       	rjmp	.+138    	; 0x32a <_fpadd_parts+0x22c>
     2a0:	99 23       	and	r25, r25
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <_fpadd_parts+0x1b4>
     2a4:	a8 01       	movw	r20, r16
     2a6:	97 01       	movw	r18, r14
     2a8:	2a 19       	sub	r18, r10
     2aa:	3b 09       	sbc	r19, r11
     2ac:	4c 09       	sbc	r20, r12
     2ae:	5d 09       	sbc	r21, r13
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <_fpadd_parts+0x1c0>
     2b2:	a6 01       	movw	r20, r12
     2b4:	95 01       	movw	r18, r10
     2b6:	2e 19       	sub	r18, r14
     2b8:	3f 09       	sbc	r19, r15
     2ba:	40 0b       	sbc	r20, r16
     2bc:	51 0b       	sbc	r21, r17
     2be:	57 fd       	sbrc	r21, 7
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <_fpadd_parts+0x1d4>
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	33 82       	std	Z+3, r3	; 0x03
     2c6:	22 82       	std	Z+2, r2	; 0x02
     2c8:	24 83       	std	Z+4, r18	; 0x04
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	46 83       	std	Z+6, r20	; 0x06
     2ce:	57 83       	std	Z+7, r21	; 0x07
     2d0:	1d c0       	rjmp	.+58     	; 0x30c <_fpadd_parts+0x20e>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	81 83       	std	Z+1, r24	; 0x01
     2d6:	33 82       	std	Z+3, r3	; 0x03
     2d8:	22 82       	std	Z+2, r2	; 0x02
     2da:	88 27       	eor	r24, r24
     2dc:	99 27       	eor	r25, r25
     2de:	dc 01       	movw	r26, r24
     2e0:	82 1b       	sub	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	a4 0b       	sbc	r26, r20
     2e6:	b5 0b       	sbc	r27, r21
     2e8:	84 83       	std	Z+4, r24	; 0x04
     2ea:	95 83       	std	Z+5, r25	; 0x05
     2ec:	a6 83       	std	Z+6, r26	; 0x06
     2ee:	b7 83       	std	Z+7, r27	; 0x07
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <_fpadd_parts+0x20e>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	44 1f       	adc	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	24 83       	std	Z+4, r18	; 0x04
     2fc:	35 83       	std	Z+5, r19	; 0x05
     2fe:	46 83       	std	Z+6, r20	; 0x06
     300:	57 83       	std	Z+7, r21	; 0x07
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	93 83       	std	Z+3, r25	; 0x03
     30a:	82 83       	std	Z+2, r24	; 0x02
     30c:	24 81       	ldd	r18, Z+4	; 0x04
     30e:	35 81       	ldd	r19, Z+5	; 0x05
     310:	46 81       	ldd	r20, Z+6	; 0x06
     312:	57 81       	ldd	r21, Z+7	; 0x07
     314:	da 01       	movw	r26, r20
     316:	c9 01       	movw	r24, r18
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	a1 09       	sbc	r26, r1
     31c:	b1 09       	sbc	r27, r1
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	af 4f       	sbci	r26, 0xFF	; 255
     324:	bf 43       	sbci	r27, 0x3F	; 63
     326:	28 f3       	brcs	.-54     	; 0x2f2 <_fpadd_parts+0x1f4>
     328:	0b c0       	rjmp	.+22     	; 0x340 <_fpadd_parts+0x242>
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	33 82       	std	Z+3, r3	; 0x03
     32e:	22 82       	std	Z+2, r2	; 0x02
     330:	ea 0c       	add	r14, r10
     332:	fb 1c       	adc	r15, r11
     334:	0c 1d       	adc	r16, r12
     336:	1d 1d       	adc	r17, r13
     338:	e4 82       	std	Z+4, r14	; 0x04
     33a:	f5 82       	std	Z+5, r15	; 0x05
     33c:	06 83       	std	Z+6, r16	; 0x06
     33e:	17 83       	std	Z+7, r17	; 0x07
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	80 83       	st	Z, r24
     344:	24 81       	ldd	r18, Z+4	; 0x04
     346:	35 81       	ldd	r19, Z+5	; 0x05
     348:	46 81       	ldd	r20, Z+6	; 0x06
     34a:	57 81       	ldd	r21, Z+7	; 0x07
     34c:	57 ff       	sbrs	r21, 7
     34e:	1a c0       	rjmp	.+52     	; 0x384 <_fpadd_parts+0x286>
     350:	c9 01       	movw	r24, r18
     352:	aa 27       	eor	r26, r26
     354:	97 fd       	sbrc	r25, 7
     356:	a0 95       	com	r26
     358:	ba 2f       	mov	r27, r26
     35a:	81 70       	andi	r24, 0x01	; 1
     35c:	90 70       	andi	r25, 0x00	; 0
     35e:	a0 70       	andi	r26, 0x00	; 0
     360:	b0 70       	andi	r27, 0x00	; 0
     362:	56 95       	lsr	r21
     364:	47 95       	ror	r20
     366:	37 95       	ror	r19
     368:	27 95       	ror	r18
     36a:	82 2b       	or	r24, r18
     36c:	93 2b       	or	r25, r19
     36e:	a4 2b       	or	r26, r20
     370:	b5 2b       	or	r27, r21
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	95 83       	std	Z+5, r25	; 0x05
     376:	a6 83       	std	Z+6, r26	; 0x06
     378:	b7 83       	std	Z+7, r27	; 0x07
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	93 81       	ldd	r25, Z+3	; 0x03
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
     384:	df 01       	movw	r26, r30
     386:	01 c0       	rjmp	.+2      	; 0x38a <_fpadd_parts+0x28c>
     388:	d2 01       	movw	r26, r4
     38a:	cd 01       	movw	r24, r26
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	e2 e1       	ldi	r30, 0x12	; 18
     392:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__epilogue_restores__>

00000396 <__subsf3>:
     396:	a0 e2       	ldi	r26, 0x20	; 32
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e1 ed       	ldi	r30, 0xD1	; 209
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__prologue_saves__+0x18>
     3a2:	69 83       	std	Y+1, r22	; 0x01
     3a4:	7a 83       	std	Y+2, r23	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	2d 83       	std	Y+5, r18	; 0x05
     3ac:	3e 83       	std	Y+6, r19	; 0x06
     3ae:	4f 83       	std	Y+7, r20	; 0x07
     3b0:	58 87       	std	Y+8, r21	; 0x08
     3b2:	e9 e0       	ldi	r30, 0x09	; 9
     3b4:	ee 2e       	mov	r14, r30
     3b6:	f1 2c       	mov	r15, r1
     3b8:	ec 0e       	add	r14, r28
     3ba:	fd 1e       	adc	r15, r29
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	b7 01       	movw	r22, r14
     3c2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     3c6:	8e 01       	movw	r16, r28
     3c8:	0f 5e       	subi	r16, 0xEF	; 239
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	ce 01       	movw	r24, r28
     3ce:	05 96       	adiw	r24, 0x05	; 5
     3d0:	b8 01       	movw	r22, r16
     3d2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	89 27       	eor	r24, r25
     3dc:	8a 8b       	std	Y+18, r24	; 0x12
     3de:	c7 01       	movw	r24, r14
     3e0:	b8 01       	movw	r22, r16
     3e2:	ae 01       	movw	r20, r28
     3e4:	47 5e       	subi	r20, 0xE7	; 231
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     3ec:	0e 94 07 04 	call	0x80e	; 0x80e <__pack_f>
     3f0:	a0 96       	adiw	r28, 0x20	; 32
     3f2:	e6 e0       	ldi	r30, 0x06	; 6
     3f4:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__epilogue_restores__+0x18>

000003f8 <__addsf3>:
     3f8:	a0 e2       	ldi	r26, 0x20	; 32
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__prologue_saves__+0x18>
     404:	69 83       	std	Y+1, r22	; 0x01
     406:	7a 83       	std	Y+2, r23	; 0x02
     408:	8b 83       	std	Y+3, r24	; 0x03
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	2d 83       	std	Y+5, r18	; 0x05
     40e:	3e 83       	std	Y+6, r19	; 0x06
     410:	4f 83       	std	Y+7, r20	; 0x07
     412:	58 87       	std	Y+8, r21	; 0x08
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	ef 2e       	mov	r14, r31
     418:	f1 2c       	mov	r15, r1
     41a:	ec 0e       	add	r14, r28
     41c:	fd 1e       	adc	r15, r29
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	b7 01       	movw	r22, r14
     424:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     428:	8e 01       	movw	r16, r28
     42a:	0f 5e       	subi	r16, 0xEF	; 239
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	ce 01       	movw	r24, r28
     430:	05 96       	adiw	r24, 0x05	; 5
     432:	b8 01       	movw	r22, r16
     434:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     438:	c7 01       	movw	r24, r14
     43a:	b8 01       	movw	r22, r16
     43c:	ae 01       	movw	r20, r28
     43e:	47 5e       	subi	r20, 0xE7	; 231
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     446:	0e 94 07 04 	call	0x80e	; 0x80e <__pack_f>
     44a:	a0 96       	adiw	r28, 0x20	; 32
     44c:	e6 e0       	ldi	r30, 0x06	; 6
     44e:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__epilogue_restores__+0x18>

00000452 <__mulsf3>:
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ef e2       	ldi	r30, 0x2F	; 47
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	0c 94 f5 19 	jmp	0x33ea	; 0x33ea <__prologue_saves__>
     45e:	69 83       	std	Y+1, r22	; 0x01
     460:	7a 83       	std	Y+2, r23	; 0x02
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	2d 83       	std	Y+5, r18	; 0x05
     468:	3e 83       	std	Y+6, r19	; 0x06
     46a:	4f 83       	std	Y+7, r20	; 0x07
     46c:	58 87       	std	Y+8, r21	; 0x08
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	be 01       	movw	r22, r28
     474:	67 5f       	subi	r22, 0xF7	; 247
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     47c:	ce 01       	movw	r24, r28
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	be 01       	movw	r22, r28
     482:	6f 5e       	subi	r22, 0xEF	; 239
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	92 30       	cpi	r25, 0x02	; 2
     48e:	88 f0       	brcs	.+34     	; 0x4b2 <__mulsf3+0x60>
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	c8 f0       	brcs	.+50     	; 0x4c8 <__mulsf3+0x76>
     496:	94 30       	cpi	r25, 0x04	; 4
     498:	19 f4       	brne	.+6      	; 0x4a0 <__mulsf3+0x4e>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	51 f4       	brne	.+20     	; 0x4b2 <__mulsf3+0x60>
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__mulsf3+0x56>
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	29 f4       	brne	.+10     	; 0x4ae <__mulsf3+0x5c>
     4a4:	92 30       	cpi	r25, 0x02	; 2
     4a6:	81 f4       	brne	.+32     	; 0x4c8 <__mulsf3+0x76>
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	c6 c0       	rjmp	.+396    	; 0x63a <__mulsf3+0x1e8>
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <__mulsf3+0x72>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	8a 89       	ldd	r24, Y+18	; 0x12
     4b8:	98 13       	cpse	r25, r24
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 87       	std	Y+10, r18	; 0x0a
     4be:	ce 01       	movw	r24, r28
     4c0:	09 96       	adiw	r24, 0x09	; 9
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <__mulsf3+0x1e8>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	49 f4       	brne	.+18     	; 0x4da <__mulsf3+0x88>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	98 13       	cpse	r25, r24
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	2a 8b       	std	Y+18, r18	; 0x12
     4d4:	ce 01       	movw	r24, r28
     4d6:	41 96       	adiw	r24, 0x11	; 17
     4d8:	b0 c0       	rjmp	.+352    	; 0x63a <__mulsf3+0x1e8>
     4da:	2d 84       	ldd	r2, Y+13	; 0x0d
     4dc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4de:	4f 84       	ldd	r4, Y+15	; 0x0f
     4e0:	58 88       	ldd	r5, Y+16	; 0x10
     4e2:	6d 88       	ldd	r6, Y+21	; 0x15
     4e4:	7e 88       	ldd	r7, Y+22	; 0x16
     4e6:	8f 88       	ldd	r8, Y+23	; 0x17
     4e8:	98 8c       	ldd	r9, Y+24	; 0x18
     4ea:	ee 24       	eor	r14, r14
     4ec:	ff 24       	eor	r15, r15
     4ee:	87 01       	movw	r16, r14
     4f0:	aa 24       	eor	r10, r10
     4f2:	bb 24       	eor	r11, r11
     4f4:	65 01       	movw	r12, r10
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	c1 01       	movw	r24, r2
     504:	81 70       	andi	r24, 0x01	; 1
     506:	90 70       	andi	r25, 0x00	; 0
     508:	89 2b       	or	r24, r25
     50a:	e9 f0       	breq	.+58     	; 0x546 <__mulsf3+0xf4>
     50c:	e6 0c       	add	r14, r6
     50e:	f7 1c       	adc	r15, r7
     510:	08 1d       	adc	r16, r8
     512:	19 1d       	adc	r17, r9
     514:	9a 01       	movw	r18, r20
     516:	ab 01       	movw	r20, r22
     518:	2a 0d       	add	r18, r10
     51a:	3b 1d       	adc	r19, r11
     51c:	4c 1d       	adc	r20, r12
     51e:	5d 1d       	adc	r21, r13
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e6 14       	cp	r14, r6
     52a:	f7 04       	cpc	r15, r7
     52c:	08 05       	cpc	r16, r8
     52e:	19 05       	cpc	r17, r9
     530:	20 f4       	brcc	.+8      	; 0x53a <__mulsf3+0xe8>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	a9 01       	movw	r20, r18
     53e:	48 0f       	add	r20, r24
     540:	59 1f       	adc	r21, r25
     542:	6a 1f       	adc	r22, r26
     544:	7b 1f       	adc	r23, r27
     546:	aa 0c       	add	r10, r10
     548:	bb 1c       	adc	r11, r11
     54a:	cc 1c       	adc	r12, r12
     54c:	dd 1c       	adc	r13, r13
     54e:	97 fe       	sbrs	r9, 7
     550:	08 c0       	rjmp	.+16     	; 0x562 <__mulsf3+0x110>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	a8 2a       	or	r10, r24
     55c:	b9 2a       	or	r11, r25
     55e:	ca 2a       	or	r12, r26
     560:	db 2a       	or	r13, r27
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	e0 32       	cpi	r30, 0x20	; 32
     566:	f1 05       	cpc	r31, r1
     568:	49 f0       	breq	.+18     	; 0x57c <__mulsf3+0x12a>
     56a:	66 0c       	add	r6, r6
     56c:	77 1c       	adc	r7, r7
     56e:	88 1c       	adc	r8, r8
     570:	99 1c       	adc	r9, r9
     572:	56 94       	lsr	r5
     574:	47 94       	ror	r4
     576:	37 94       	ror	r3
     578:	27 94       	ror	r2
     57a:	c3 cf       	rjmp	.-122    	; 0x502 <__mulsf3+0xb0>
     57c:	fa 85       	ldd	r31, Y+10	; 0x0a
     57e:	ea 89       	ldd	r30, Y+18	; 0x12
     580:	2b 89       	ldd	r18, Y+19	; 0x13
     582:	3c 89       	ldd	r19, Y+20	; 0x14
     584:	8b 85       	ldd	r24, Y+11	; 0x0b
     586:	9c 85       	ldd	r25, Y+12	; 0x0c
     588:	28 0f       	add	r18, r24
     58a:	39 1f       	adc	r19, r25
     58c:	2e 5f       	subi	r18, 0xFE	; 254
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <__mulsf3+0x16e>
     592:	ca 01       	movw	r24, r20
     594:	81 70       	andi	r24, 0x01	; 1
     596:	90 70       	andi	r25, 0x00	; 0
     598:	89 2b       	or	r24, r25
     59a:	61 f0       	breq	.+24     	; 0x5b4 <__mulsf3+0x162>
     59c:	16 95       	lsr	r17
     59e:	07 95       	ror	r16
     5a0:	f7 94       	ror	r15
     5a2:	e7 94       	ror	r14
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e8       	ldi	r27, 0x80	; 128
     5ac:	e8 2a       	or	r14, r24
     5ae:	f9 2a       	or	r15, r25
     5b0:	0a 2b       	or	r16, r26
     5b2:	1b 2b       	or	r17, r27
     5b4:	76 95       	lsr	r23
     5b6:	67 95       	ror	r22
     5b8:	57 95       	ror	r21
     5ba:	47 95       	ror	r20
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	e7 cf       	rjmp	.-50     	; 0x592 <__mulsf3+0x140>
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__mulsf3+0x18c>
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	66 1f       	adc	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	17 fd       	sbrc	r17, 7
     5d0:	41 60       	ori	r20, 0x01	; 1
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	00 1f       	adc	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	30 40       	sbci	r19, 0x00	; 0
     5de:	40 30       	cpi	r20, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	59 07       	cpc	r21, r25
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	69 07       	cpc	r22, r25
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	79 07       	cpc	r23, r25
     5ec:	60 f3       	brcs	.-40     	; 0x5c6 <__mulsf3+0x174>
     5ee:	2b 8f       	std	Y+27, r18	; 0x1b
     5f0:	3c 8f       	std	Y+28, r19	; 0x1c
     5f2:	db 01       	movw	r26, r22
     5f4:	ca 01       	movw	r24, r20
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	90 70       	andi	r25, 0x00	; 0
     5fa:	a0 70       	andi	r26, 0x00	; 0
     5fc:	b0 70       	andi	r27, 0x00	; 0
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	61 f4       	brne	.+24     	; 0x620 <__mulsf3+0x1ce>
     608:	47 fd       	sbrc	r20, 7
     60a:	0a c0       	rjmp	.+20     	; 0x620 <__mulsf3+0x1ce>
     60c:	e1 14       	cp	r14, r1
     60e:	f1 04       	cpc	r15, r1
     610:	01 05       	cpc	r16, r1
     612:	11 05       	cpc	r17, r1
     614:	29 f0       	breq	.+10     	; 0x620 <__mulsf3+0x1ce>
     616:	40 5c       	subi	r20, 0xC0	; 192
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	6f 4f       	sbci	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	40 78       	andi	r20, 0x80	; 128
     620:	1a 8e       	std	Y+26, r1	; 0x1a
     622:	fe 17       	cp	r31, r30
     624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1d8>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	8a 8f       	std	Y+26, r24	; 0x1a
     62a:	4d 8f       	std	Y+29, r20	; 0x1d
     62c:	5e 8f       	std	Y+30, r21	; 0x1e
     62e:	6f 8f       	std	Y+31, r22	; 0x1f
     630:	78 a3       	std	Y+32, r23	; 0x20
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	89 8f       	std	Y+25, r24	; 0x19
     636:	ce 01       	movw	r24, r28
     638:	49 96       	adiw	r24, 0x19	; 25
     63a:	0e 94 07 04 	call	0x80e	; 0x80e <__pack_f>
     63e:	a0 96       	adiw	r28, 0x20	; 32
     640:	e2 e1       	ldi	r30, 0x12	; 18
     642:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__epilogue_restores__>

00000646 <__gtsf2>:
     646:	a8 e1       	ldi	r26, 0x18	; 24
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e9 e2       	ldi	r30, 0x29	; 41
     64c:	f3 e0       	ldi	r31, 0x03	; 3
     64e:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__prologue_saves__+0x18>
     652:	69 83       	std	Y+1, r22	; 0x01
     654:	7a 83       	std	Y+2, r23	; 0x02
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	2d 83       	std	Y+5, r18	; 0x05
     65c:	3e 83       	std	Y+6, r19	; 0x06
     65e:	4f 83       	std	Y+7, r20	; 0x07
     660:	58 87       	std	Y+8, r21	; 0x08
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	e8 2e       	mov	r14, r24
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	b7 01       	movw	r22, r14
     672:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     676:	8e 01       	movw	r16, r28
     678:	0f 5e       	subi	r16, 0xEF	; 239
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	ce 01       	movw	r24, r28
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	b8 01       	movw	r22, r16
     682:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     686:	89 85       	ldd	r24, Y+9	; 0x09
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	40 f0       	brcs	.+16     	; 0x69c <__gtsf2+0x56>
     68c:	89 89       	ldd	r24, Y+17	; 0x11
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	28 f0       	brcs	.+10     	; 0x69c <__gtsf2+0x56>
     692:	c7 01       	movw	r24, r14
     694:	b8 01       	movw	r22, r16
     696:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fpcmp_parts_f>
     69a:	01 c0       	rjmp	.+2      	; 0x69e <__gtsf2+0x58>
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	68 96       	adiw	r28, 0x18	; 24
     6a0:	e6 e0       	ldi	r30, 0x06	; 6
     6a2:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__epilogue_restores__+0x18>

000006a6 <__gesf2>:
     6a6:	a8 e1       	ldi	r26, 0x18	; 24
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	e9 e5       	ldi	r30, 0x59	; 89
     6ac:	f3 e0       	ldi	r31, 0x03	; 3
     6ae:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__prologue_saves__+0x18>
     6b2:	69 83       	std	Y+1, r22	; 0x01
     6b4:	7a 83       	std	Y+2, r23	; 0x02
     6b6:	8b 83       	std	Y+3, r24	; 0x03
     6b8:	9c 83       	std	Y+4, r25	; 0x04
     6ba:	2d 83       	std	Y+5, r18	; 0x05
     6bc:	3e 83       	std	Y+6, r19	; 0x06
     6be:	4f 83       	std	Y+7, r20	; 0x07
     6c0:	58 87       	std	Y+8, r21	; 0x08
     6c2:	89 e0       	ldi	r24, 0x09	; 9
     6c4:	e8 2e       	mov	r14, r24
     6c6:	f1 2c       	mov	r15, r1
     6c8:	ec 0e       	add	r14, r28
     6ca:	fd 1e       	adc	r15, r29
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	b7 01       	movw	r22, r14
     6d2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     6d6:	8e 01       	movw	r16, r28
     6d8:	0f 5e       	subi	r16, 0xEF	; 239
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	ce 01       	movw	r24, r28
     6de:	05 96       	adiw	r24, 0x05	; 5
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     6e6:	89 85       	ldd	r24, Y+9	; 0x09
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	40 f0       	brcs	.+16     	; 0x6fc <__gesf2+0x56>
     6ec:	89 89       	ldd	r24, Y+17	; 0x11
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	28 f0       	brcs	.+10     	; 0x6fc <__gesf2+0x56>
     6f2:	c7 01       	movw	r24, r14
     6f4:	b8 01       	movw	r22, r16
     6f6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fpcmp_parts_f>
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <__gesf2+0x58>
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	68 96       	adiw	r28, 0x18	; 24
     700:	e6 e0       	ldi	r30, 0x06	; 6
     702:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__epilogue_restores__+0x18>

00000706 <__ltsf2>:
     706:	a8 e1       	ldi	r26, 0x18	; 24
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	e9 e8       	ldi	r30, 0x89	; 137
     70c:	f3 e0       	ldi	r31, 0x03	; 3
     70e:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__prologue_saves__+0x18>
     712:	69 83       	std	Y+1, r22	; 0x01
     714:	7a 83       	std	Y+2, r23	; 0x02
     716:	8b 83       	std	Y+3, r24	; 0x03
     718:	9c 83       	std	Y+4, r25	; 0x04
     71a:	2d 83       	std	Y+5, r18	; 0x05
     71c:	3e 83       	std	Y+6, r19	; 0x06
     71e:	4f 83       	std	Y+7, r20	; 0x07
     720:	58 87       	std	Y+8, r21	; 0x08
     722:	89 e0       	ldi	r24, 0x09	; 9
     724:	e8 2e       	mov	r14, r24
     726:	f1 2c       	mov	r15, r1
     728:	ec 0e       	add	r14, r28
     72a:	fd 1e       	adc	r15, r29
     72c:	ce 01       	movw	r24, r28
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	b7 01       	movw	r22, r14
     732:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     736:	8e 01       	movw	r16, r28
     738:	0f 5e       	subi	r16, 0xEF	; 239
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
     73c:	ce 01       	movw	r24, r28
     73e:	05 96       	adiw	r24, 0x05	; 5
     740:	b8 01       	movw	r22, r16
     742:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     746:	89 85       	ldd	r24, Y+9	; 0x09
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	40 f0       	brcs	.+16     	; 0x75c <__ltsf2+0x56>
     74c:	89 89       	ldd	r24, Y+17	; 0x11
     74e:	82 30       	cpi	r24, 0x02	; 2
     750:	28 f0       	brcs	.+10     	; 0x75c <__ltsf2+0x56>
     752:	c7 01       	movw	r24, r14
     754:	b8 01       	movw	r22, r16
     756:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fpcmp_parts_f>
     75a:	01 c0       	rjmp	.+2      	; 0x75e <__ltsf2+0x58>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	68 96       	adiw	r28, 0x18	; 24
     760:	e6 e0       	ldi	r30, 0x06	; 6
     762:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__epilogue_restores__+0x18>

00000766 <__fixsfsi>:
     766:	ac e0       	ldi	r26, 0x0C	; 12
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	e9 eb       	ldi	r30, 0xB9	; 185
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__prologue_saves__+0x20>
     772:	69 83       	std	Y+1, r22	; 0x01
     774:	7a 83       	std	Y+2, r23	; 0x02
     776:	8b 83       	std	Y+3, r24	; 0x03
     778:	9c 83       	std	Y+4, r25	; 0x04
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	be 01       	movw	r22, r28
     780:	6b 5f       	subi	r22, 0xFB	; 251
     782:	7f 4f       	sbci	r23, 0xFF	; 255
     784:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__unpack_f>
     788:	8d 81       	ldd	r24, Y+5	; 0x05
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	61 f1       	breq	.+88     	; 0x7e6 <__fixsfsi+0x80>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	50 f1       	brcs	.+84     	; 0x7e6 <__fixsfsi+0x80>
     792:	84 30       	cpi	r24, 0x04	; 4
     794:	21 f4       	brne	.+8      	; 0x79e <__fixsfsi+0x38>
     796:	8e 81       	ldd	r24, Y+6	; 0x06
     798:	88 23       	and	r24, r24
     79a:	51 f1       	breq	.+84     	; 0x7f0 <__fixsfsi+0x8a>
     79c:	2e c0       	rjmp	.+92     	; 0x7fa <__fixsfsi+0x94>
     79e:	2f 81       	ldd	r18, Y+7	; 0x07
     7a0:	38 85       	ldd	r19, Y+8	; 0x08
     7a2:	37 fd       	sbrc	r19, 7
     7a4:	20 c0       	rjmp	.+64     	; 0x7e6 <__fixsfsi+0x80>
     7a6:	6e 81       	ldd	r22, Y+6	; 0x06
     7a8:	2f 31       	cpi	r18, 0x1F	; 31
     7aa:	31 05       	cpc	r19, r1
     7ac:	1c f0       	brlt	.+6      	; 0x7b4 <__fixsfsi+0x4e>
     7ae:	66 23       	and	r22, r22
     7b0:	f9 f0       	breq	.+62     	; 0x7f0 <__fixsfsi+0x8a>
     7b2:	23 c0       	rjmp	.+70     	; 0x7fa <__fixsfsi+0x94>
     7b4:	8e e1       	ldi	r24, 0x1E	; 30
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	82 1b       	sub	r24, r18
     7ba:	93 0b       	sbc	r25, r19
     7bc:	29 85       	ldd	r18, Y+9	; 0x09
     7be:	3a 85       	ldd	r19, Y+10	; 0x0a
     7c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <__fixsfsi+0x68>
     7c6:	56 95       	lsr	r21
     7c8:	47 95       	ror	r20
     7ca:	37 95       	ror	r19
     7cc:	27 95       	ror	r18
     7ce:	8a 95       	dec	r24
     7d0:	d2 f7       	brpl	.-12     	; 0x7c6 <__fixsfsi+0x60>
     7d2:	66 23       	and	r22, r22
     7d4:	b1 f0       	breq	.+44     	; 0x802 <__fixsfsi+0x9c>
     7d6:	50 95       	com	r21
     7d8:	40 95       	com	r20
     7da:	30 95       	com	r19
     7dc:	21 95       	neg	r18
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
     7e0:	4f 4f       	sbci	r20, 0xFF	; 255
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	0e c0       	rjmp	.+28     	; 0x802 <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	09 c0       	rjmp	.+18     	; 0x802 <__fixsfsi+0x9c>
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	3f ef       	ldi	r19, 0xFF	; 255
     7f4:	4f ef       	ldi	r20, 0xFF	; 255
     7f6:	5f e7       	ldi	r21, 0x7F	; 127
     7f8:	04 c0       	rjmp	.+8      	; 0x802 <__fixsfsi+0x9c>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e8       	ldi	r21, 0x80	; 128
     802:	b9 01       	movw	r22, r18
     804:	ca 01       	movw	r24, r20
     806:	2c 96       	adiw	r28, 0x0c	; 12
     808:	e2 e0       	ldi	r30, 0x02	; 2
     80a:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__epilogue_restores__+0x20>

0000080e <__pack_f>:
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	fc 01       	movw	r30, r24
     81a:	e4 80       	ldd	r14, Z+4	; 0x04
     81c:	f5 80       	ldd	r15, Z+5	; 0x05
     81e:	06 81       	ldd	r16, Z+6	; 0x06
     820:	17 81       	ldd	r17, Z+7	; 0x07
     822:	d1 80       	ldd	r13, Z+1	; 0x01
     824:	80 81       	ld	r24, Z
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	48 f4       	brcc	.+18     	; 0x83c <__pack_f+0x2e>
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	a0 e1       	ldi	r26, 0x10	; 16
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	e8 2a       	or	r14, r24
     834:	f9 2a       	or	r15, r25
     836:	0a 2b       	or	r16, r26
     838:	1b 2b       	or	r17, r27
     83a:	a5 c0       	rjmp	.+330    	; 0x986 <__stack+0x87>
     83c:	84 30       	cpi	r24, 0x04	; 4
     83e:	09 f4       	brne	.+2      	; 0x842 <__pack_f+0x34>
     840:	9f c0       	rjmp	.+318    	; 0x980 <__stack+0x81>
     842:	82 30       	cpi	r24, 0x02	; 2
     844:	21 f4       	brne	.+8      	; 0x84e <__pack_f+0x40>
     846:	ee 24       	eor	r14, r14
     848:	ff 24       	eor	r15, r15
     84a:	87 01       	movw	r16, r14
     84c:	05 c0       	rjmp	.+10     	; 0x858 <__pack_f+0x4a>
     84e:	e1 14       	cp	r14, r1
     850:	f1 04       	cpc	r15, r1
     852:	01 05       	cpc	r16, r1
     854:	11 05       	cpc	r17, r1
     856:	19 f4       	brne	.+6      	; 0x85e <__pack_f+0x50>
     858:	e0 e0       	ldi	r30, 0x00	; 0
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	96 c0       	rjmp	.+300    	; 0x98a <__stack+0x8b>
     85e:	62 81       	ldd	r22, Z+2	; 0x02
     860:	73 81       	ldd	r23, Z+3	; 0x03
     862:	9f ef       	ldi	r25, 0xFF	; 255
     864:	62 38       	cpi	r22, 0x82	; 130
     866:	79 07       	cpc	r23, r25
     868:	0c f0       	brlt	.+2      	; 0x86c <__pack_f+0x5e>
     86a:	5b c0       	rjmp	.+182    	; 0x922 <__stack+0x23>
     86c:	22 e8       	ldi	r18, 0x82	; 130
     86e:	3f ef       	ldi	r19, 0xFF	; 255
     870:	26 1b       	sub	r18, r22
     872:	37 0b       	sbc	r19, r23
     874:	2a 31       	cpi	r18, 0x1A	; 26
     876:	31 05       	cpc	r19, r1
     878:	2c f0       	brlt	.+10     	; 0x884 <__pack_f+0x76>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	2a c0       	rjmp	.+84     	; 0x8d8 <__pack_f+0xca>
     884:	b8 01       	movw	r22, r16
     886:	a7 01       	movw	r20, r14
     888:	02 2e       	mov	r0, r18
     88a:	04 c0       	rjmp	.+8      	; 0x894 <__pack_f+0x86>
     88c:	76 95       	lsr	r23
     88e:	67 95       	ror	r22
     890:	57 95       	ror	r21
     892:	47 95       	ror	r20
     894:	0a 94       	dec	r0
     896:	d2 f7       	brpl	.-12     	; 0x88c <__pack_f+0x7e>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 e0       	ldi	r26, 0x00	; 0
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__pack_f+0x9c>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	aa 1f       	adc	r26, r26
     8a8:	bb 1f       	adc	r27, r27
     8aa:	2a 95       	dec	r18
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <__pack_f+0x94>
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	a1 09       	sbc	r26, r1
     8b2:	b1 09       	sbc	r27, r1
     8b4:	8e 21       	and	r24, r14
     8b6:	9f 21       	and	r25, r15
     8b8:	a0 23       	and	r26, r16
     8ba:	b1 23       	and	r27, r17
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	a1 05       	cpc	r26, r1
     8c0:	b1 05       	cpc	r27, r1
     8c2:	21 f0       	breq	.+8      	; 0x8cc <__pack_f+0xbe>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	9a 01       	movw	r18, r20
     8ce:	ab 01       	movw	r20, r22
     8d0:	28 2b       	or	r18, r24
     8d2:	39 2b       	or	r19, r25
     8d4:	4a 2b       	or	r20, r26
     8d6:	5b 2b       	or	r21, r27
     8d8:	da 01       	movw	r26, r20
     8da:	c9 01       	movw	r24, r18
     8dc:	8f 77       	andi	r24, 0x7F	; 127
     8de:	90 70       	andi	r25, 0x00	; 0
     8e0:	a0 70       	andi	r26, 0x00	; 0
     8e2:	b0 70       	andi	r27, 0x00	; 0
     8e4:	80 34       	cpi	r24, 0x40	; 64
     8e6:	91 05       	cpc	r25, r1
     8e8:	a1 05       	cpc	r26, r1
     8ea:	b1 05       	cpc	r27, r1
     8ec:	39 f4       	brne	.+14     	; 0x8fc <__pack_f+0xee>
     8ee:	27 ff       	sbrs	r18, 7
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <__stack+0x5>
     8f2:	20 5c       	subi	r18, 0xC0	; 192
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	4f 4f       	sbci	r20, 0xFF	; 255
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <__stack+0x5>
     8fc:	21 5c       	subi	r18, 0xC1	; 193
     8fe:	3f 4f       	sbci	r19, 0xFF	; 255
     900:	4f 4f       	sbci	r20, 0xFF	; 255
     902:	5f 4f       	sbci	r21, 0xFF	; 255
     904:	e0 e0       	ldi	r30, 0x00	; 0
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	20 30       	cpi	r18, 0x00	; 0
     90a:	a0 e0       	ldi	r26, 0x00	; 0
     90c:	3a 07       	cpc	r19, r26
     90e:	a0 e0       	ldi	r26, 0x00	; 0
     910:	4a 07       	cpc	r20, r26
     912:	a0 e4       	ldi	r26, 0x40	; 64
     914:	5a 07       	cpc	r21, r26
     916:	10 f0       	brcs	.+4      	; 0x91c <__stack+0x1d>
     918:	e1 e0       	ldi	r30, 0x01	; 1
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	79 01       	movw	r14, r18
     91e:	8a 01       	movw	r16, r20
     920:	27 c0       	rjmp	.+78     	; 0x970 <__stack+0x71>
     922:	60 38       	cpi	r22, 0x80	; 128
     924:	71 05       	cpc	r23, r1
     926:	64 f5       	brge	.+88     	; 0x980 <__stack+0x81>
     928:	fb 01       	movw	r30, r22
     92a:	e1 58       	subi	r30, 0x81	; 129
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	d8 01       	movw	r26, r16
     930:	c7 01       	movw	r24, r14
     932:	8f 77       	andi	r24, 0x7F	; 127
     934:	90 70       	andi	r25, 0x00	; 0
     936:	a0 70       	andi	r26, 0x00	; 0
     938:	b0 70       	andi	r27, 0x00	; 0
     93a:	80 34       	cpi	r24, 0x40	; 64
     93c:	91 05       	cpc	r25, r1
     93e:	a1 05       	cpc	r26, r1
     940:	b1 05       	cpc	r27, r1
     942:	39 f4       	brne	.+14     	; 0x952 <__stack+0x53>
     944:	e7 fe       	sbrs	r14, 7
     946:	0d c0       	rjmp	.+26     	; 0x962 <__stack+0x63>
     948:	80 e4       	ldi	r24, 0x40	; 64
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	04 c0       	rjmp	.+8      	; 0x95a <__stack+0x5b>
     952:	8f e3       	ldi	r24, 0x3F	; 63
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e8 0e       	add	r14, r24
     95c:	f9 1e       	adc	r15, r25
     95e:	0a 1f       	adc	r16, r26
     960:	1b 1f       	adc	r17, r27
     962:	17 ff       	sbrs	r17, 7
     964:	05 c0       	rjmp	.+10     	; 0x970 <__stack+0x71>
     966:	16 95       	lsr	r17
     968:	07 95       	ror	r16
     96a:	f7 94       	ror	r15
     96c:	e7 94       	ror	r14
     96e:	31 96       	adiw	r30, 0x01	; 1
     970:	87 e0       	ldi	r24, 0x07	; 7
     972:	16 95       	lsr	r17
     974:	07 95       	ror	r16
     976:	f7 94       	ror	r15
     978:	e7 94       	ror	r14
     97a:	8a 95       	dec	r24
     97c:	d1 f7       	brne	.-12     	; 0x972 <__stack+0x73>
     97e:	05 c0       	rjmp	.+10     	; 0x98a <__stack+0x8b>
     980:	ee 24       	eor	r14, r14
     982:	ff 24       	eor	r15, r15
     984:	87 01       	movw	r16, r14
     986:	ef ef       	ldi	r30, 0xFF	; 255
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	6e 2f       	mov	r22, r30
     98c:	67 95       	ror	r22
     98e:	66 27       	eor	r22, r22
     990:	67 95       	ror	r22
     992:	90 2f       	mov	r25, r16
     994:	9f 77       	andi	r25, 0x7F	; 127
     996:	d7 94       	ror	r13
     998:	dd 24       	eor	r13, r13
     99a:	d7 94       	ror	r13
     99c:	8e 2f       	mov	r24, r30
     99e:	86 95       	lsr	r24
     9a0:	49 2f       	mov	r20, r25
     9a2:	46 2b       	or	r20, r22
     9a4:	58 2f       	mov	r21, r24
     9a6:	5d 29       	or	r21, r13
     9a8:	b7 01       	movw	r22, r14
     9aa:	ca 01       	movw	r24, r20
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	08 95       	ret

000009b8 <__unpack_f>:
     9b8:	fc 01       	movw	r30, r24
     9ba:	db 01       	movw	r26, r22
     9bc:	40 81       	ld	r20, Z
     9be:	51 81       	ldd	r21, Z+1	; 0x01
     9c0:	22 81       	ldd	r18, Z+2	; 0x02
     9c2:	62 2f       	mov	r22, r18
     9c4:	6f 77       	andi	r22, 0x7F	; 127
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	22 1f       	adc	r18, r18
     9ca:	22 27       	eor	r18, r18
     9cc:	22 1f       	adc	r18, r18
     9ce:	93 81       	ldd	r25, Z+3	; 0x03
     9d0:	89 2f       	mov	r24, r25
     9d2:	88 0f       	add	r24, r24
     9d4:	82 2b       	or	r24, r18
     9d6:	28 2f       	mov	r18, r24
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	99 1f       	adc	r25, r25
     9dc:	99 27       	eor	r25, r25
     9de:	99 1f       	adc	r25, r25
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	9c 93       	st	X, r25
     9e4:	11 97       	sbiw	r26, 0x01	; 1
     9e6:	21 15       	cp	r18, r1
     9e8:	31 05       	cpc	r19, r1
     9ea:	a9 f5       	brne	.+106    	; 0xa56 <__unpack_f+0x9e>
     9ec:	41 15       	cp	r20, r1
     9ee:	51 05       	cpc	r21, r1
     9f0:	61 05       	cpc	r22, r1
     9f2:	71 05       	cpc	r23, r1
     9f4:	11 f4       	brne	.+4      	; 0x9fa <__unpack_f+0x42>
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	37 c0       	rjmp	.+110    	; 0xa68 <__unpack_f+0xb0>
     9fa:	82 e8       	ldi	r24, 0x82	; 130
     9fc:	9f ef       	ldi	r25, 0xFF	; 255
     9fe:	13 96       	adiw	r26, 0x03	; 3
     a00:	9c 93       	st	X, r25
     a02:	8e 93       	st	-X, r24
     a04:	12 97       	sbiw	r26, 0x02	; 2
     a06:	9a 01       	movw	r18, r20
     a08:	ab 01       	movw	r20, r22
     a0a:	67 e0       	ldi	r22, 0x07	; 7
     a0c:	22 0f       	add	r18, r18
     a0e:	33 1f       	adc	r19, r19
     a10:	44 1f       	adc	r20, r20
     a12:	55 1f       	adc	r21, r21
     a14:	6a 95       	dec	r22
     a16:	d1 f7       	brne	.-12     	; 0xa0c <__unpack_f+0x54>
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	8c 93       	st	X, r24
     a1c:	0d c0       	rjmp	.+26     	; 0xa38 <__unpack_f+0x80>
     a1e:	22 0f       	add	r18, r18
     a20:	33 1f       	adc	r19, r19
     a22:	44 1f       	adc	r20, r20
     a24:	55 1f       	adc	r21, r21
     a26:	12 96       	adiw	r26, 0x02	; 2
     a28:	8d 91       	ld	r24, X+
     a2a:	9c 91       	ld	r25, X
     a2c:	13 97       	sbiw	r26, 0x03	; 3
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	13 96       	adiw	r26, 0x03	; 3
     a32:	9c 93       	st	X, r25
     a34:	8e 93       	st	-X, r24
     a36:	12 97       	sbiw	r26, 0x02	; 2
     a38:	20 30       	cpi	r18, 0x00	; 0
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	38 07       	cpc	r19, r24
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	48 07       	cpc	r20, r24
     a42:	80 e4       	ldi	r24, 0x40	; 64
     a44:	58 07       	cpc	r21, r24
     a46:	58 f3       	brcs	.-42     	; 0xa1e <__unpack_f+0x66>
     a48:	14 96       	adiw	r26, 0x04	; 4
     a4a:	2d 93       	st	X+, r18
     a4c:	3d 93       	st	X+, r19
     a4e:	4d 93       	st	X+, r20
     a50:	5c 93       	st	X, r21
     a52:	17 97       	sbiw	r26, 0x07	; 7
     a54:	08 95       	ret
     a56:	2f 3f       	cpi	r18, 0xFF	; 255
     a58:	31 05       	cpc	r19, r1
     a5a:	79 f4       	brne	.+30     	; 0xa7a <__unpack_f+0xc2>
     a5c:	41 15       	cp	r20, r1
     a5e:	51 05       	cpc	r21, r1
     a60:	61 05       	cpc	r22, r1
     a62:	71 05       	cpc	r23, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__unpack_f+0xb4>
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	8c 93       	st	X, r24
     a6a:	08 95       	ret
     a6c:	64 ff       	sbrs	r22, 4
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <__unpack_f+0xbe>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	8c 93       	st	X, r24
     a74:	12 c0       	rjmp	.+36     	; 0xa9a <__unpack_f+0xe2>
     a76:	1c 92       	st	X, r1
     a78:	10 c0       	rjmp	.+32     	; 0xa9a <__unpack_f+0xe2>
     a7a:	2f 57       	subi	r18, 0x7F	; 127
     a7c:	30 40       	sbci	r19, 0x00	; 0
     a7e:	13 96       	adiw	r26, 0x03	; 3
     a80:	3c 93       	st	X, r19
     a82:	2e 93       	st	-X, r18
     a84:	12 97       	sbiw	r26, 0x02	; 2
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	8c 93       	st	X, r24
     a8a:	87 e0       	ldi	r24, 0x07	; 7
     a8c:	44 0f       	add	r20, r20
     a8e:	55 1f       	adc	r21, r21
     a90:	66 1f       	adc	r22, r22
     a92:	77 1f       	adc	r23, r23
     a94:	8a 95       	dec	r24
     a96:	d1 f7       	brne	.-12     	; 0xa8c <__unpack_f+0xd4>
     a98:	70 64       	ori	r23, 0x40	; 64
     a9a:	14 96       	adiw	r26, 0x04	; 4
     a9c:	4d 93       	st	X+, r20
     a9e:	5d 93       	st	X+, r21
     aa0:	6d 93       	st	X+, r22
     aa2:	7c 93       	st	X, r23
     aa4:	17 97       	sbiw	r26, 0x07	; 7
     aa6:	08 95       	ret

00000aa8 <__fpcmp_parts_f>:
     aa8:	1f 93       	push	r17
     aaa:	dc 01       	movw	r26, r24
     aac:	fb 01       	movw	r30, r22
     aae:	9c 91       	ld	r25, X
     ab0:	92 30       	cpi	r25, 0x02	; 2
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <__fpcmp_parts_f+0xe>
     ab4:	47 c0       	rjmp	.+142    	; 0xb44 <__fpcmp_parts_f+0x9c>
     ab6:	80 81       	ld	r24, Z
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	08 f4       	brcc	.+2      	; 0xabe <__fpcmp_parts_f+0x16>
     abc:	43 c0       	rjmp	.+134    	; 0xb44 <__fpcmp_parts_f+0x9c>
     abe:	94 30       	cpi	r25, 0x04	; 4
     ac0:	51 f4       	brne	.+20     	; 0xad6 <__fpcmp_parts_f+0x2e>
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	1c 91       	ld	r17, X
     ac6:	84 30       	cpi	r24, 0x04	; 4
     ac8:	99 f5       	brne	.+102    	; 0xb30 <__fpcmp_parts_f+0x88>
     aca:	81 81       	ldd	r24, Z+1	; 0x01
     acc:	68 2f       	mov	r22, r24
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	61 1b       	sub	r22, r17
     ad2:	71 09       	sbc	r23, r1
     ad4:	3f c0       	rjmp	.+126    	; 0xb54 <__fpcmp_parts_f+0xac>
     ad6:	84 30       	cpi	r24, 0x04	; 4
     ad8:	21 f0       	breq	.+8      	; 0xae2 <__fpcmp_parts_f+0x3a>
     ada:	92 30       	cpi	r25, 0x02	; 2
     adc:	31 f4       	brne	.+12     	; 0xaea <__fpcmp_parts_f+0x42>
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	b9 f1       	breq	.+110    	; 0xb50 <__fpcmp_parts_f+0xa8>
     ae2:	81 81       	ldd	r24, Z+1	; 0x01
     ae4:	88 23       	and	r24, r24
     ae6:	89 f1       	breq	.+98     	; 0xb4a <__fpcmp_parts_f+0xa2>
     ae8:	2d c0       	rjmp	.+90     	; 0xb44 <__fpcmp_parts_f+0x9c>
     aea:	11 96       	adiw	r26, 0x01	; 1
     aec:	1c 91       	ld	r17, X
     aee:	11 97       	sbiw	r26, 0x01	; 1
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	f1 f0       	breq	.+60     	; 0xb30 <__fpcmp_parts_f+0x88>
     af4:	81 81       	ldd	r24, Z+1	; 0x01
     af6:	18 17       	cp	r17, r24
     af8:	d9 f4       	brne	.+54     	; 0xb30 <__fpcmp_parts_f+0x88>
     afa:	12 96       	adiw	r26, 0x02	; 2
     afc:	2d 91       	ld	r18, X+
     afe:	3c 91       	ld	r19, X
     b00:	13 97       	sbiw	r26, 0x03	; 3
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	82 17       	cp	r24, r18
     b08:	93 07       	cpc	r25, r19
     b0a:	94 f0       	brlt	.+36     	; 0xb30 <__fpcmp_parts_f+0x88>
     b0c:	28 17       	cp	r18, r24
     b0e:	39 07       	cpc	r19, r25
     b10:	bc f0       	brlt	.+46     	; 0xb40 <__fpcmp_parts_f+0x98>
     b12:	14 96       	adiw	r26, 0x04	; 4
     b14:	8d 91       	ld	r24, X+
     b16:	9d 91       	ld	r25, X+
     b18:	0d 90       	ld	r0, X+
     b1a:	bc 91       	ld	r27, X
     b1c:	a0 2d       	mov	r26, r0
     b1e:	24 81       	ldd	r18, Z+4	; 0x04
     b20:	35 81       	ldd	r19, Z+5	; 0x05
     b22:	46 81       	ldd	r20, Z+6	; 0x06
     b24:	57 81       	ldd	r21, Z+7	; 0x07
     b26:	28 17       	cp	r18, r24
     b28:	39 07       	cpc	r19, r25
     b2a:	4a 07       	cpc	r20, r26
     b2c:	5b 07       	cpc	r21, r27
     b2e:	18 f4       	brcc	.+6      	; 0xb36 <__fpcmp_parts_f+0x8e>
     b30:	11 23       	and	r17, r17
     b32:	41 f0       	breq	.+16     	; 0xb44 <__fpcmp_parts_f+0x9c>
     b34:	0a c0       	rjmp	.+20     	; 0xb4a <__fpcmp_parts_f+0xa2>
     b36:	82 17       	cp	r24, r18
     b38:	93 07       	cpc	r25, r19
     b3a:	a4 07       	cpc	r26, r20
     b3c:	b5 07       	cpc	r27, r21
     b3e:	40 f4       	brcc	.+16     	; 0xb50 <__fpcmp_parts_f+0xa8>
     b40:	11 23       	and	r17, r17
     b42:	19 f0       	breq	.+6      	; 0xb4a <__fpcmp_parts_f+0xa2>
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	05 c0       	rjmp	.+10     	; 0xb54 <__fpcmp_parts_f+0xac>
     b4a:	6f ef       	ldi	r22, 0xFF	; 255
     b4c:	7f ef       	ldi	r23, 0xFF	; 255
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <__fpcmp_parts_f+0xac>
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	cb 01       	movw	r24, r22
     b56:	1f 91       	pop	r17
     b58:	08 95       	ret

00000b5a <DIO_U8SetPinDirection>:

#include"DIO_register.h"
#include"DIO_private.h"
#include"DIO_interface.h"
#include"DIO_config.h"
u8 DIO_U8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction){
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	28 97       	sbiw	r28, 0x08	; 8
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	de bf       	out	0x3e, r29	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	8a 83       	std	Y+2, r24	; 0x02
     b70:	6b 83       	std	Y+3, r22	; 0x03
     b72:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     b74:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	88 30       	cpi	r24, 0x08	; 8
     b7a:	08 f0       	brcs	.+2      	; 0xb7e <DIO_U8SetPinDirection+0x24>
     b7c:	b3 c0       	rjmp	.+358    	; 0xce4 <DIO_U8SetPinDirection+0x18a>
		if(Copy_u8Direction==DIO_u8PIN_INPUT){
     b7e:	8c 81       	ldd	r24, Y+4	; 0x04
     b80:	88 23       	and	r24, r24
     b82:	09 f0       	breq	.+2      	; 0xb86 <DIO_U8SetPinDirection+0x2c>
     b84:	56 c0       	rjmp	.+172    	; 0xc32 <DIO_U8SetPinDirection+0xd8>
			switch(Copy_u8Port){
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	38 87       	std	Y+8, r19	; 0x08
     b8e:	2f 83       	std	Y+7, r18	; 0x07
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	91 05       	cpc	r25, r1
     b98:	f9 f0       	breq	.+62     	; 0xbd8 <DIO_U8SetPinDirection+0x7e>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	79 f1       	breq	.+94     	; 0xc02 <DIO_U8SetPinDirection+0xa8>
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	09 f0       	breq	.+2      	; 0xbae <DIO_U8SetPinDirection+0x54>
     bac:	3f c0       	rjmp	.+126    	; 0xc2c <DIO_U8SetPinDirection+0xd2>
			case DIO_u8PORTD:CLEAR_BIT(DDRD,Copy_u8Pin);break;
     bae:	aa e2       	ldi	r26, 0x2A	; 42
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ea e2       	ldi	r30, 0x2A	; 42
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	48 2f       	mov	r20, r24
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	02 2e       	mov	r0, r18
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <DIO_U8SetPinDirection+0x72>
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	0a 94       	dec	r0
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <DIO_U8SetPinDirection+0x6e>
     bd0:	80 95       	com	r24
     bd2:	84 23       	and	r24, r20
     bd4:	8c 93       	st	X, r24
     bd6:	88 c0       	rjmp	.+272    	; 0xce8 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTB:CLEAR_BIT(DDRB,Copy_u8Pin);break;
     bd8:	a4 e2       	ldi	r26, 0x24	; 36
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e4 e2       	ldi	r30, 0x24	; 36
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	48 2f       	mov	r20, r24
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 2e       	mov	r0, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_U8SetPinDirection+0x9c>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_U8SetPinDirection+0x98>
     bfa:	80 95       	com	r24
     bfc:	84 23       	and	r24, r20
     bfe:	8c 93       	st	X, r24
     c00:	73 c0       	rjmp	.+230    	; 0xce8 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTC:CLEAR_BIT(DDRC,Copy_u8Pin);break;
     c02:	a7 e2       	ldi	r26, 0x27	; 39
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e2       	ldi	r30, 0x27	; 39
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	48 2f       	mov	r20, r24
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	02 2e       	mov	r0, r18
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_U8SetPinDirection+0xc6>
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <DIO_U8SetPinDirection+0xc2>
     c24:	80 95       	com	r24
     c26:	84 23       	and	r24, r20
     c28:	8c 93       	st	X, r24
     c2a:	5e c0       	rjmp	.+188    	; 0xce8 <DIO_U8SetPinDirection+0x18e>
			default :Local_u8ErrorState=1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	5b c0       	rjmp	.+182    	; 0xce8 <DIO_U8SetPinDirection+0x18e>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT){
     c32:	8c 81       	ldd	r24, Y+4	; 0x04
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	09 f0       	breq	.+2      	; 0xc3a <DIO_U8SetPinDirection+0xe0>
     c38:	52 c0       	rjmp	.+164    	; 0xcde <DIO_U8SetPinDirection+0x184>
			switch(Copy_u8Port){
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	3e 83       	std	Y+6, r19	; 0x06
     c42:	2d 83       	std	Y+5, r18	; 0x05
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	91 05       	cpc	r25, r1
     c4c:	e9 f0       	breq	.+58     	; 0xc88 <DIO_U8SetPinDirection+0x12e>
     c4e:	2d 81       	ldd	r18, Y+5	; 0x05
     c50:	3e 81       	ldd	r19, Y+6	; 0x06
     c52:	22 30       	cpi	r18, 0x02	; 2
     c54:	31 05       	cpc	r19, r1
     c56:	61 f1       	breq	.+88     	; 0xcb0 <DIO_U8SetPinDirection+0x156>
     c58:	8d 81       	ldd	r24, Y+5	; 0x05
     c5a:	9e 81       	ldd	r25, Y+6	; 0x06
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	e1 f5       	brne	.+120    	; 0xcd8 <DIO_U8SetPinDirection+0x17e>
			case DIO_u8PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
     c60:	aa e2       	ldi	r26, 0x2A	; 42
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	ea e2       	ldi	r30, 0x2A	; 42
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	48 2f       	mov	r20, r24
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	02 2e       	mov	r0, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <DIO_U8SetPinDirection+0x124>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <DIO_U8SetPinDirection+0x120>
     c82:	84 2b       	or	r24, r20
     c84:	8c 93       	st	X, r24
     c86:	30 c0       	rjmp	.+96     	; 0xce8 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
     c88:	a4 e2       	ldi	r26, 0x24	; 36
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e4 e2       	ldi	r30, 0x24	; 36
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <DIO_U8SetPinDirection+0x14c>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <DIO_U8SetPinDirection+0x148>
     caa:	84 2b       	or	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	1c c0       	rjmp	.+56     	; 0xce8 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
     cb0:	a7 e2       	ldi	r26, 0x27	; 39
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e7 e2       	ldi	r30, 0x27	; 39
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 2e       	mov	r0, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <DIO_U8SetPinDirection+0x174>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <DIO_U8SetPinDirection+0x170>
     cd2:	84 2b       	or	r24, r20
     cd4:	8c 93       	st	X, r24
     cd6:	08 c0       	rjmp	.+16     	; 0xce8 <DIO_U8SetPinDirection+0x18e>
			default :Local_u8ErrorState=1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <DIO_U8SetPinDirection+0x18e>
			}
		}
		else{
			Local_u8ErrorState=1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_U8SetPinDirection+0x18e>
		}

	}
	else{
		Local_u8ErrorState=1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     ce8:	89 81       	ldd	r24, Y+1	; 0x01

}
     cea:	28 96       	adiw	r28, 0x08	; 8
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <DIO_U8SetPortirection>:
u8 DIO_U8SetPortirection(u8 Copy_u8Port,u8 Copy_u8Direction){
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	00 d0       	rcall	.+0      	; 0xd02 <DIO_U8SetPortirection+0x6>
     d02:	00 d0       	rcall	.+0      	; 0xd04 <DIO_U8SetPortirection+0x8>
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	8a 83       	std	Y+2, r24	; 0x02
     d0c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     d0e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3d 83       	std	Y+5, r19	; 0x05
     d18:	2c 83       	std	Y+4, r18	; 0x04
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	71 f0       	breq	.+28     	; 0xd40 <DIO_U8SetPortirection+0x44>
     d24:	2c 81       	ldd	r18, Y+4	; 0x04
     d26:	3d 81       	ldd	r19, Y+5	; 0x05
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	71 f0       	breq	.+28     	; 0xd4a <DIO_U8SetPortirection+0x4e>
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
     d30:	9d 81       	ldd	r25, Y+5	; 0x05
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	79 f4       	brne	.+30     	; 0xd54 <DIO_U8SetPortirection+0x58>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
     d36:	ea e2       	ldi	r30, 0x2A	; 42
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	80 83       	st	Z, r24
     d3e:	0c c0       	rjmp	.+24     	; 0xd58 <DIO_U8SetPortirection+0x5c>
	case DIO_u8PORTB: DDRB =Copy_u8Direction; break;
     d40:	e4 e2       	ldi	r30, 0x24	; 36
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	80 83       	st	Z, r24
     d48:	07 c0       	rjmp	.+14     	; 0xd58 <DIO_U8SetPortirection+0x5c>
	case DIO_u8PORTC: DDRC =Copy_u8Direction; break;
     d4a:	e7 e2       	ldi	r30, 0x27	; 39
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	80 83       	st	Z, r24
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_U8SetPortirection+0x5c>
	default:Local_u8ErrorState=1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorState;
     d58:	89 81       	ldd	r24, Y+1	; 0x01

}
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <DIO_U8SetPinValue>:
u8 DIO_U8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Vlaue){
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	28 97       	sbiw	r28, 0x08	; 8
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	6b 83       	std	Y+3, r22	; 0x03
     d82:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     d84:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	08 f0       	brcs	.+2      	; 0xd8e <DIO_U8SetPinValue+0x24>
     d8c:	b3 c0       	rjmp	.+358    	; 0xef4 <DIO_U8SetPinValue+0x18a>
			if(Copy_u8Vlaue==DIO_u8PIN_LOW){
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <DIO_U8SetPinValue+0x2c>
     d94:	56 c0       	rjmp	.+172    	; 0xe42 <DIO_U8SetPinValue+0xd8>
				switch(Copy_u8Port){
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	38 87       	std	Y+8, r19	; 0x08
     d9e:	2f 83       	std	Y+7, r18	; 0x07
     da0:	8f 81       	ldd	r24, Y+7	; 0x07
     da2:	98 85       	ldd	r25, Y+8	; 0x08
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	f9 f0       	breq	.+62     	; 0xde8 <DIO_U8SetPinValue+0x7e>
     daa:	2f 81       	ldd	r18, Y+7	; 0x07
     dac:	38 85       	ldd	r19, Y+8	; 0x08
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	79 f1       	breq	.+94     	; 0xe12 <DIO_U8SetPinValue+0xa8>
     db4:	8f 81       	ldd	r24, Y+7	; 0x07
     db6:	98 85       	ldd	r25, Y+8	; 0x08
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	09 f0       	breq	.+2      	; 0xdbe <DIO_U8SetPinValue+0x54>
     dbc:	3f c0       	rjmp	.+126    	; 0xe3c <DIO_U8SetPinValue+0xd2>
				case DIO_u8PORTD:CLEAR_BIT(PORTD,Copy_u8Pin);break;
     dbe:	ab e2       	ldi	r26, 0x2B	; 43
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	eb e2       	ldi	r30, 0x2B	; 43
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_U8SetPinValue+0x72>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_U8SetPinValue+0x6e>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	88 c0       	rjmp	.+272    	; 0xef8 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTB:CLEAR_BIT(PORTB,Copy_u8Pin);break;
     de8:	a5 e2       	ldi	r26, 0x25	; 37
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e5 e2       	ldi	r30, 0x25	; 37
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_U8SetPinValue+0x9c>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_U8SetPinValue+0x98>
     e0a:	80 95       	com	r24
     e0c:	84 23       	and	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	73 c0       	rjmp	.+230    	; 0xef8 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTC:CLEAR_BIT(PORTC,Copy_u8Pin);break;
     e12:	a8 e2       	ldi	r26, 0x28	; 40
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e8 e2       	ldi	r30, 0x28	; 40
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_U8SetPinValue+0xc6>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_U8SetPinValue+0xc2>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	5e c0       	rjmp	.+188    	; 0xef8 <DIO_U8SetPinValue+0x18e>
				default :Local_u8ErrorState=1;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	5b c0       	rjmp	.+182    	; 0xef8 <DIO_U8SetPinValue+0x18e>
				}
			}
			else if(Copy_u8Vlaue==DIO_u8PIN_HIGH)
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	09 f0       	breq	.+2      	; 0xe4a <DIO_U8SetPinValue+0xe0>
     e48:	52 c0       	rjmp	.+164    	; 0xeee <DIO_U8SetPinValue+0x184>
			{
				switch(Copy_u8Port){
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3e 83       	std	Y+6, r19	; 0x06
     e52:	2d 83       	std	Y+5, r18	; 0x05
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	9e 81       	ldd	r25, Y+6	; 0x06
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	91 05       	cpc	r25, r1
     e5c:	e9 f0       	breq	.+58     	; 0xe98 <DIO_U8SetPinValue+0x12e>
     e5e:	2d 81       	ldd	r18, Y+5	; 0x05
     e60:	3e 81       	ldd	r19, Y+6	; 0x06
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	61 f1       	breq	.+88     	; 0xec0 <DIO_U8SetPinValue+0x156>
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	e1 f5       	brne	.+120    	; 0xee8 <DIO_U8SetPinValue+0x17e>
				case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
     e70:	ab e2       	ldi	r26, 0x2B	; 43
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	eb e2       	ldi	r30, 0x2B	; 43
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_U8SetPinValue+0x124>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_U8SetPinValue+0x120>
     e92:	84 2b       	or	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	30 c0       	rjmp	.+96     	; 0xef8 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
     e98:	a5 e2       	ldi	r26, 0x25	; 37
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e2       	ldi	r30, 0x25	; 37
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_U8SetPinValue+0x14c>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_U8SetPinValue+0x148>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	1c c0       	rjmp	.+56     	; 0xef8 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
     ec0:	a8 e2       	ldi	r26, 0x28	; 40
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e8 e2       	ldi	r30, 0x28	; 40
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_U8SetPinValue+0x174>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_U8SetPinValue+0x170>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	08 c0       	rjmp	.+16     	; 0xef8 <DIO_U8SetPinValue+0x18e>
				default :Local_u8ErrorState=1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	05 c0       	rjmp	.+10     	; 0xef8 <DIO_U8SetPinValue+0x18e>
				}
			}
			else{
				Local_u8ErrorState=1;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_U8SetPinValue+0x18e>
			}

		}
		else{
			Local_u8ErrorState=1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01

}
     efa:	28 96       	adiw	r28, 0x08	; 8
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <DIO_U8SetPortValue>:
u8 DIO_U8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <DIO_U8SetPortValue+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <DIO_U8SetPortValue+0x8>
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	8a 83       	std	Y+2, r24	; 0x02
     f1c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     f1e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	3d 83       	std	Y+5, r19	; 0x05
     f28:	2c 83       	std	Y+4, r18	; 0x04
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	91 05       	cpc	r25, r1
     f32:	71 f0       	breq	.+28     	; 0xf50 <DIO_U8SetPortValue+0x44>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	71 f0       	breq	.+28     	; 0xf5a <DIO_U8SetPortValue+0x4e>
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	79 f4       	brne	.+30     	; 0xf64 <DIO_U8SetPortValue+0x58>
		case DIO_u8PORTD: PORTD =Copy_u8Value; break;
     f46:	eb e2       	ldi	r30, 0x2B	; 43
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	80 83       	st	Z, r24
     f4e:	0c c0       	rjmp	.+24     	; 0xf68 <DIO_U8SetPortValue+0x5c>
		case DIO_u8PORTB: PORTB =Copy_u8Value; break;
     f50:	e5 e2       	ldi	r30, 0x25	; 37
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	80 83       	st	Z, r24
     f58:	07 c0       	rjmp	.+14     	; 0xf68 <DIO_U8SetPortValue+0x5c>
		case DIO_u8PORTC: PORTC =Copy_u8Value; break;
     f5a:	e8 e2       	ldi	r30, 0x28	; 40
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	80 83       	st	Z, r24
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_U8SetPortValue+0x5c>
		default:Local_u8ErrorState=1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	89 83       	std	Y+1, r24	; 0x01

		}
	return Local_u8ErrorState;
     f68:	89 81       	ldd	r24, Y+1	; 0x01

}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_u8Value ){
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	27 97       	sbiw	r28, 0x07	; 7
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	8a 83       	std	Y+2, r24	; 0x02
     f90:	6b 83       	std	Y+3, r22	; 0x03
     f92:	5d 83       	std	Y+5, r21	; 0x05
     f94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     f96:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value!=NULL&&Copy_u8Pin<=DIO_u8PIN7){
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <DIO_U8GetPinValue+0x28>
     fa0:	58 c0       	rjmp	.+176    	; 0x1052 <DIO_U8GetPinValue+0xd8>
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	88 30       	cpi	r24, 0x08	; 8
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <DIO_U8GetPinValue+0x30>
     fa8:	54 c0       	rjmp	.+168    	; 0x1052 <DIO_U8GetPinValue+0xd8>
		switch(Copy_u8Port){
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	3f 83       	std	Y+7, r19	; 0x07
     fb2:	2e 83       	std	Y+6, r18	; 0x06
     fb4:	4e 81       	ldd	r20, Y+6	; 0x06
     fb6:	5f 81       	ldd	r21, Y+7	; 0x07
     fb8:	41 30       	cpi	r20, 0x01	; 1
     fba:	51 05       	cpc	r21, r1
     fbc:	f9 f0       	breq	.+62     	; 0xffc <DIO_U8GetPinValue+0x82>
     fbe:	8e 81       	ldd	r24, Y+6	; 0x06
     fc0:	9f 81       	ldd	r25, Y+7	; 0x07
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	91 05       	cpc	r25, r1
     fc6:	71 f1       	breq	.+92     	; 0x1024 <DIO_U8GetPinValue+0xaa>
     fc8:	2e 81       	ldd	r18, Y+6	; 0x06
     fca:	3f 81       	ldd	r19, Y+7	; 0x07
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <DIO_U8GetPinValue+0x5a>
     fd2:	3c c0       	rjmp	.+120    	; 0x104c <DIO_U8GetPinValue+0xd2>
		case DIO_u8PORTD: *Copy_u8Value=GET_BIT(PIND ,Copy_u8Pin);break;
     fd4:	e9 e2       	ldi	r30, 0x29	; 41
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a9 01       	movw	r20, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_U8GetPinValue+0x72>
     fe8:	55 95       	asr	r21
     fea:	47 95       	ror	r20
     fec:	8a 95       	dec	r24
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_U8GetPinValue+0x6e>
     ff0:	ca 01       	movw	r24, r20
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	ec 81       	ldd	r30, Y+4	; 0x04
     ff6:	fd 81       	ldd	r31, Y+5	; 0x05
     ff8:	80 83       	st	Z, r24
     ffa:	2d c0       	rjmp	.+90     	; 0x1056 <DIO_U8GetPinValue+0xdc>
        case DIO_u8PORTB: *Copy_u8Value=GET_BIT(PINB ,Copy_u8Pin);break;
     ffc:	e3 e2       	ldi	r30, 0x23	; 35
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a9 01       	movw	r20, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_U8GetPinValue+0x9a>
    1010:	55 95       	asr	r21
    1012:	47 95       	ror	r20
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_U8GetPinValue+0x96>
    1018:	ca 01       	movw	r24, r20
    101a:	81 70       	andi	r24, 0x01	; 1
    101c:	ec 81       	ldd	r30, Y+4	; 0x04
    101e:	fd 81       	ldd	r31, Y+5	; 0x05
    1020:	80 83       	st	Z, r24
    1022:	19 c0       	rjmp	.+50     	; 0x1056 <DIO_U8GetPinValue+0xdc>
        case DIO_u8PORTC:*Copy_u8Value=GET_BIT(PINC  ,Copy_u8Pin);break;
    1024:	e6 e2       	ldi	r30, 0x26	; 38
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_U8GetPinValue+0xc2>
    1038:	55 95       	asr	r21
    103a:	47 95       	ror	r20
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_U8GetPinValue+0xbe>
    1040:	ca 01       	movw	r24, r20
    1042:	81 70       	andi	r24, 0x01	; 1
    1044:	ec 81       	ldd	r30, Y+4	; 0x04
    1046:	fd 81       	ldd	r31, Y+5	; 0x05
    1048:	80 83       	st	Z, r24
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <DIO_U8GetPinValue+0xdc>
        default:Local_u8ErrorState=1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_U8GetPinValue+0xdc>
		}
	}
	else{
		Local_u8ErrorState=1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1056:	89 81       	ldd	r24, Y+1	; 0x01

}
    1058:	27 96       	adiw	r28, 0x07	; 7
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <EXTI_voidint0init>:
void(*EXTI_pvint0Func)(void)=NULL;
void(*EXTI_pvint1Func)(void)=NULL;



void EXTI_voidint0init(void){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE==FALLING_EDGE
	CLEAR_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE==RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC00);
    1072:	a9 e6       	ldi	r26, 0x69	; 105
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e9 e6       	ldi	r30, 0x69	; 105
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1080:	a9 e6       	ldi	r26, 0x69	; 105
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e9 e6       	ldi	r30, 0x69	; 105
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	8c 93       	st	X, r24
#else
#error "wrong INT0_SENSE configuration input"
#endif
/*set INT0 enable*/
#if INT0_ENABLE_STATE==ENABLED
SET_BIT(GICR,GICR_INT0);
    108e:	ad e3       	ldi	r26, 0x3D	; 61
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	ed e3       	ldi	r30, 0x3D	; 61
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	81 60       	ori	r24, 0x01	; 1
    109a:	8c 93       	st	X, r24
#elif INT0_ENABLE_STATE==DISABLED
CLEAR_BIT(GICR,GICR_INT0);
#else
#error "wrong INT0_ENABLE_STATE configuration input"
#endif
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <EXTI_voidint1init>:
void EXTI_voidint1init(void){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
		CLEAR_BIT(MCUCR,MCUCR_ISC11);
	#elif INT1_SENSE==FALLING_EDGE
		CLEAR_BIT(MCUCR,MCUCR_ISC10);
		SET_BIT(MCUCR,MCUCR_ISC11);
	#elif INT1_SENSE==RISING_EDGE
		SET_BIT(MCUCR,MCUCR_ISC10);
    10aa:	a9 e6       	ldi	r26, 0x69	; 105
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e9 e6       	ldi	r30, 0x69	; 105
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
    10b8:	a9 e6       	ldi	r26, 0x69	; 105
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e9 e6       	ldi	r30, 0x69	; 105
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	88 60       	ori	r24, 0x08	; 8
    10c4:	8c 93       	st	X, r24
	#else
	#error "wrong INT1_SENSE configuration input"
	#endif
	/*set INT1 enable*/
	#if INT1_ENABLE_STATE==ENABLED
	SET_BIT(GICR,GICR_INT1);
    10c6:	ad e3       	ldi	r26, 0x3D	; 61
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ed e3       	ldi	r30, 0x3D	; 61
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	82 60       	ori	r24, 0x02	; 2
    10d2:	8c 93       	st	X, r24
	CLEAR_BIT(GICR,GICR_INT1);
	#else
	#error "wrong INT1_ENABLE_STATE configuration input"
	#endif

}
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <EXTI_u8intset_sensecontrol>:
u8 EXTI_u8intset_sensecontrol(u8 copy_u8int,u8 copy_u8sense){
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	27 97       	sbiw	r28, 0x07	; 7
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	8a 83       	std	Y+2, r24	; 0x02
    10f0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8stateerror=OK;
    10f2:	19 82       	std	Y+1, r1	; 0x01
	/*check the interrupt pin*/
	if(copy_u8int==INT0){
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	09 f0       	breq	.+2      	; 0x10fc <EXTI_u8intset_sensecontrol+0x22>
    10fa:	5f c0       	rjmp	.+190    	; 0x11ba <EXTI_u8intset_sensecontrol+0xe0>
		/*set the interrupt sense*/
		switch(copy_u8sense){
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3f 83       	std	Y+7, r19	; 0x07
    1104:	2e 83       	std	Y+6, r18	; 0x06
    1106:	8e 81       	ldd	r24, Y+6	; 0x06
    1108:	9f 81       	ldd	r25, Y+7	; 0x07
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	91 05       	cpc	r25, r1
    110e:	29 f1       	breq	.+74     	; 0x115a <EXTI_u8intset_sensecontrol+0x80>
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	3f 81       	ldd	r19, Y+7	; 0x07
    1114:	23 30       	cpi	r18, 0x03	; 3
    1116:	31 05       	cpc	r19, r1
    1118:	34 f4       	brge	.+12     	; 0x1126 <EXTI_u8intset_sensecontrol+0x4c>
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	9f 81       	ldd	r25, Y+7	; 0x07
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	61 f0       	breq	.+24     	; 0x113c <EXTI_u8intset_sensecontrol+0x62>
    1124:	47 c0       	rjmp	.+142    	; 0x11b4 <EXTI_u8intset_sensecontrol+0xda>
    1126:	2e 81       	ldd	r18, Y+6	; 0x06
    1128:	3f 81       	ldd	r19, Y+7	; 0x07
    112a:	23 30       	cpi	r18, 0x03	; 3
    112c:	31 05       	cpc	r19, r1
    112e:	21 f1       	breq	.+72     	; 0x1178 <EXTI_u8intset_sensecontrol+0x9e>
    1130:	8e 81       	ldd	r24, Y+6	; 0x06
    1132:	9f 81       	ldd	r25, Y+7	; 0x07
    1134:	84 30       	cpi	r24, 0x04	; 4
    1136:	91 05       	cpc	r25, r1
    1138:	71 f1       	breq	.+92     	; 0x1196 <EXTI_u8intset_sensecontrol+0xbc>
    113a:	3c c0       	rjmp	.+120    	; 0x11b4 <EXTI_u8intset_sensecontrol+0xda>
		case LOW_LEVEL:CLEAR_BIT(MCUCR,MCUCR_ISC00); CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    113c:	a9 e6       	ldi	r26, 0x69	; 105
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e9 e6       	ldi	r30, 0x69	; 105
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8e 7f       	andi	r24, 0xFE	; 254
    1148:	8c 93       	st	X, r24
    114a:	a9 e6       	ldi	r26, 0x69	; 105
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e9 e6       	ldi	r30, 0x69	; 105
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	8d 7f       	andi	r24, 0xFD	; 253
    1156:	8c 93       	st	X, r24
    1158:	95 c0       	rjmp	.+298    	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>
		case ON_CHANGE:SET_BIT(MCUCR,MCUCR_ISC00); CLEAR_BIT(MCUCR,MCUCR_ISC01);break;
    115a:	a9 e6       	ldi	r26, 0x69	; 105
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e9 e6       	ldi	r30, 0x69	; 105
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	81 60       	ori	r24, 0x01	; 1
    1166:	8c 93       	st	X, r24
    1168:	a9 e6       	ldi	r26, 0x69	; 105
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e9 e6       	ldi	r30, 0x69	; 105
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	8d 7f       	andi	r24, 0xFD	; 253
    1174:	8c 93       	st	X, r24
    1176:	86 c0       	rjmp	.+268    	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>
		case FALLING_EDGE:CLEAR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01);break;
    1178:	a9 e6       	ldi	r26, 0x69	; 105
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e9 e6       	ldi	r30, 0x69	; 105
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8e 7f       	andi	r24, 0xFE	; 254
    1184:	8c 93       	st	X, r24
    1186:	a9 e6       	ldi	r26, 0x69	; 105
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e9 e6       	ldi	r30, 0x69	; 105
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	82 60       	ori	r24, 0x02	; 2
    1192:	8c 93       	st	X, r24
    1194:	77 c0       	rjmp	.+238    	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>
		case RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01);break;
    1196:	a9 e6       	ldi	r26, 0x69	; 105
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e9 e6       	ldi	r30, 0x69	; 105
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	81 60       	ori	r24, 0x01	; 1
    11a2:	8c 93       	st	X, r24
    11a4:	a9 e6       	ldi	r26, 0x69	; 105
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e9 e6       	ldi	r30, 0x69	; 105
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	8c 93       	st	X, r24
    11b2:	68 c0       	rjmp	.+208    	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>
		default:Local_u8stateerror=NOK;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	65 c0       	rjmp	.+202    	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>
		}}
	else if(copy_u8int==INT1){
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	09 f0       	breq	.+2      	; 0x11c2 <EXTI_u8intset_sensecontrol+0xe8>
    11c0:	5f c0       	rjmp	.+190    	; 0x1280 <EXTI_u8intset_sensecontrol+0x1a6>
		switch(copy_u8sense){
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3d 83       	std	Y+5, r19	; 0x05
    11ca:	2c 83       	std	Y+4, r18	; 0x04
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	82 30       	cpi	r24, 0x02	; 2
    11d2:	91 05       	cpc	r25, r1
    11d4:	29 f1       	breq	.+74     	; 0x1220 <EXTI_u8intset_sensecontrol+0x146>
    11d6:	2c 81       	ldd	r18, Y+4	; 0x04
    11d8:	3d 81       	ldd	r19, Y+5	; 0x05
    11da:	23 30       	cpi	r18, 0x03	; 3
    11dc:	31 05       	cpc	r19, r1
    11de:	34 f4       	brge	.+12     	; 0x11ec <EXTI_u8intset_sensecontrol+0x112>
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	61 f0       	breq	.+24     	; 0x1202 <EXTI_u8intset_sensecontrol+0x128>
    11ea:	47 c0       	rjmp	.+142    	; 0x127a <EXTI_u8intset_sensecontrol+0x1a0>
    11ec:	2c 81       	ldd	r18, Y+4	; 0x04
    11ee:	3d 81       	ldd	r19, Y+5	; 0x05
    11f0:	23 30       	cpi	r18, 0x03	; 3
    11f2:	31 05       	cpc	r19, r1
    11f4:	21 f1       	breq	.+72     	; 0x123e <EXTI_u8intset_sensecontrol+0x164>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	91 05       	cpc	r25, r1
    11fe:	71 f1       	breq	.+92     	; 0x125c <EXTI_u8intset_sensecontrol+0x182>
    1200:	3c c0       	rjmp	.+120    	; 0x127a <EXTI_u8intset_sensecontrol+0x1a0>
			case LOW_LEVEL:CLEAR_BIT(MCUCR,MCUCR_ISC10); CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    1202:	a9 e6       	ldi	r26, 0x69	; 105
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e9 e6       	ldi	r30, 0x69	; 105
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8b 7f       	andi	r24, 0xFB	; 251
    120e:	8c 93       	st	X, r24
    1210:	a9 e6       	ldi	r26, 0x69	; 105
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e9 e6       	ldi	r30, 0x69	; 105
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	87 7f       	andi	r24, 0xF7	; 247
    121c:	8c 93       	st	X, r24
    121e:	32 c0       	rjmp	.+100    	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>
			case ON_CHANGE:SET_BIT(MCUCR,MCUCR_ISC10); CLEAR_BIT(MCUCR,MCUCR_ISC11);break;
    1220:	a9 e6       	ldi	r26, 0x69	; 105
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e9 e6       	ldi	r30, 0x69	; 105
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	84 60       	ori	r24, 0x04	; 4
    122c:	8c 93       	st	X, r24
    122e:	a9 e6       	ldi	r26, 0x69	; 105
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e9 e6       	ldi	r30, 0x69	; 105
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	87 7f       	andi	r24, 0xF7	; 247
    123a:	8c 93       	st	X, r24
    123c:	23 c0       	rjmp	.+70     	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>
			case FALLING_EDGE:CLEAR_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11);break;
    123e:	a9 e6       	ldi	r26, 0x69	; 105
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e9 e6       	ldi	r30, 0x69	; 105
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8b 7f       	andi	r24, 0xFB	; 251
    124a:	8c 93       	st	X, r24
    124c:	a9 e6       	ldi	r26, 0x69	; 105
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e9 e6       	ldi	r30, 0x69	; 105
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 60       	ori	r24, 0x08	; 8
    1258:	8c 93       	st	X, r24
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>
			case RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC10); SET_BIT(MCUCR,MCUCR_ISC11);break;
    125c:	a9 e6       	ldi	r26, 0x69	; 105
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e9 e6       	ldi	r30, 0x69	; 105
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	84 60       	ori	r24, 0x04	; 4
    1268:	8c 93       	st	X, r24
    126a:	a9 e6       	ldi	r26, 0x69	; 105
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e9 e6       	ldi	r30, 0x69	; 105
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	88 60       	ori	r24, 0x08	; 8
    1276:	8c 93       	st	X, r24
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>
			default:Local_u8stateerror=NOK;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <EXTI_u8intset_sensecontrol+0x1aa>

	}

	}
	else{
		Local_u8stateerror=NOK;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8stateerror;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
}
    1286:	27 96       	adiw	r28, 0x07	; 7
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <EXTI_u8intcontrol>:
u8 EXTI_u8intcontrol(u8 copy_u8int,u8 copy_u8intcontrol)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <EXTI_u8intcontrol+0x6>
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	8a 83       	std	Y+2, r24	; 0x02
    12a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8stateerror=OK;
    12a8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8int==INT0){
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	c9 f4       	brne	.+50     	; 0x12e2 <EXTI_u8intcontrol+0x4a>
		/*check the interrupt enable state*/
		if(copy_u8intcontrol==ENABLED){
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	41 f4       	brne	.+16     	; 0x12c6 <EXTI_u8intcontrol+0x2e>
		SET_BIT(GICR,GICR_INT0);
    12b6:	ad e3       	ldi	r26, 0x3D	; 61
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	ed e3       	ldi	r30, 0x3D	; 61
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	81 60       	ori	r24, 0x01	; 1
    12c2:	8c 93       	st	X, r24
    12c4:	2c c0       	rjmp	.+88     	; 0x131e <EXTI_u8intcontrol+0x86>
		}
		else if(copy_u8intcontrol==DISABLED){
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	41 f4       	brne	.+16     	; 0x12dc <EXTI_u8intcontrol+0x44>
			CLEAR_BIT(GICR,GICR_INT0);
    12cc:	ad e3       	ldi	r26, 0x3D	; 61
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ed e3       	ldi	r30, 0x3D	; 61
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8e 7f       	andi	r24, 0xFE	; 254
    12d8:	8c 93       	st	X, r24
    12da:	21 c0       	rjmp	.+66     	; 0x131e <EXTI_u8intcontrol+0x86>
		}
		else{
			Local_u8stateerror=NOK;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	1e c0       	rjmp	.+60     	; 0x131e <EXTI_u8intcontrol+0x86>
		}}
    else if(copy_u8int==INT1){
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	c9 f4       	brne	.+50     	; 0x131a <EXTI_u8intcontrol+0x82>
    	if(copy_u8intcontrol==ENABLED){
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	41 f4       	brne	.+16     	; 0x12fe <EXTI_u8intcontrol+0x66>
    			SET_BIT(GICR,GICR_INT0);
    12ee:	ad e3       	ldi	r26, 0x3D	; 61
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	ed e3       	ldi	r30, 0x3D	; 61
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	81 60       	ori	r24, 0x01	; 1
    12fa:	8c 93       	st	X, r24
    12fc:	10 c0       	rjmp	.+32     	; 0x131e <EXTI_u8intcontrol+0x86>
    			}
    			else if(copy_u8intcontrol==DISABLED){
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	41 f4       	brne	.+16     	; 0x1314 <EXTI_u8intcontrol+0x7c>
    				CLEAR_BIT(GICR,GICR_INT0);
    1304:	ad e3       	ldi	r26, 0x3D	; 61
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ed e3       	ldi	r30, 0x3D	; 61
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8e 7f       	andi	r24, 0xFE	; 254
    1310:	8c 93       	st	X, r24
    1312:	05 c0       	rjmp	.+10     	; 0x131e <EXTI_u8intcontrol+0x86>
    			}
    			else{
    				Local_u8stateerror=NOK;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	02 c0       	rjmp	.+4      	; 0x131e <EXTI_u8intcontrol+0x86>
    			}

    }
    else {
    	Local_u8stateerror=NOK;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
    }
	return Local_u8stateerror;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <EXTI_u8intset_callback>:
u8 EXTI_u8intset_callback(void (*copy_pvintfunc)(void),u8 copy_u8int){
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <EXTI_u8intset_callback+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <EXTI_u8intset_callback+0x8>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	9b 83       	std	Y+3, r25	; 0x03
    133c:	8a 83       	std	Y+2, r24	; 0x02
    133e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Locla_u8stateerror=OK;
    1340:	19 82       	std	Y+1, r1	; 0x01
	if (copy_u8int==INT0){
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	71 f4       	brne	.+28     	; 0x1364 <EXTI_u8intset_callback+0x38>
		if(copy_pvintfunc!=NULL){
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	9b 81       	ldd	r25, Y+3	; 0x03
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	39 f0       	breq	.+14     	; 0x135e <EXTI_u8intset_callback+0x32>
			EXTI_pvint0Func=copy_pvintfunc;
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	9b 81       	ldd	r25, Y+3	; 0x03
    1354:	90 93 15 01 	sts	0x0115, r25
    1358:	80 93 14 01 	sts	0x0114, r24
    135c:	16 c0       	rjmp	.+44     	; 0x138a <EXTI_u8intset_callback+0x5e>
		}
		else{
			Locla_u8stateerror=NULL_POINTER;
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	13 c0       	rjmp	.+38     	; 0x138a <EXTI_u8intset_callback+0x5e>
		}
	}
	else if(copy_u8int==INT1){
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	71 f4       	brne	.+28     	; 0x1386 <EXTI_u8intset_callback+0x5a>
		if(copy_pvintfunc!=NULL){
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	9b 81       	ldd	r25, Y+3	; 0x03
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	39 f0       	breq	.+14     	; 0x1380 <EXTI_u8intset_callback+0x54>
		EXTI_pvint1Func=copy_pvintfunc;
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	9b 81       	ldd	r25, Y+3	; 0x03
    1376:	90 93 17 01 	sts	0x0117, r25
    137a:	80 93 16 01 	sts	0x0116, r24
    137e:	05 c0       	rjmp	.+10     	; 0x138a <EXTI_u8intset_callback+0x5e>
		}
		else{
			Locla_u8stateerror=NULL_POINTER;
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	02 c0       	rjmp	.+4      	; 0x138a <EXTI_u8intset_callback+0x5e>
		}
	}
	else{
		Locla_u8stateerror=NOK;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
	}
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	2f 93       	push	r18
    13a6:	3f 93       	push	r19
    13a8:	4f 93       	push	r20
    13aa:	5f 93       	push	r21
    13ac:	6f 93       	push	r22
    13ae:	7f 93       	push	r23
    13b0:	8f 93       	push	r24
    13b2:	9f 93       	push	r25
    13b4:	af 93       	push	r26
    13b6:	bf 93       	push	r27
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvint0Func!=NULL){
    13c4:	80 91 14 01 	lds	r24, 0x0114
    13c8:	90 91 15 01 	lds	r25, 0x0115
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	29 f0       	breq	.+10     	; 0x13da <__vector_1+0x40>
		EXTI_pvint0Func();
    13d0:	e0 91 14 01 	lds	r30, 0x0114
    13d4:	f0 91 15 01 	lds	r31, 0x0115
    13d8:	09 95       	icall
	}
	else{
		/*do nothing*/
	}
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	ff 91       	pop	r31
    13e0:	ef 91       	pop	r30
    13e2:	bf 91       	pop	r27
    13e4:	af 91       	pop	r26
    13e6:	9f 91       	pop	r25
    13e8:	8f 91       	pop	r24
    13ea:	7f 91       	pop	r23
    13ec:	6f 91       	pop	r22
    13ee:	5f 91       	pop	r21
    13f0:	4f 91       	pop	r20
    13f2:	3f 91       	pop	r19
    13f4:	2f 91       	pop	r18
    13f6:	0f 90       	pop	r0
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	0f 90       	pop	r0
    13fc:	1f 90       	pop	r1
    13fe:	18 95       	reti

00001400 <__vector_2>:
void __vector_2(void) __attribute__((signal));
void __vector_2(void){
    1400:	1f 92       	push	r1
    1402:	0f 92       	push	r0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	0f 92       	push	r0
    1408:	11 24       	eor	r1, r1
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvint1Func!=NULL){
    142a:	80 91 16 01 	lds	r24, 0x0116
    142e:	90 91 17 01 	lds	r25, 0x0117
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	29 f0       	breq	.+10     	; 0x1440 <__vector_2+0x40>
		EXTI_pvint1Func();
    1436:	e0 91 16 01 	lds	r30, 0x0116
    143a:	f0 91 17 01 	lds	r31, 0x0117
    143e:	09 95       	icall
	}
	else{
		/*do nothing*/
	}
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	7f 91       	pop	r23
    1452:	6f 91       	pop	r22
    1454:	5f 91       	pop	r21
    1456:	4f 91       	pop	r20
    1458:	3f 91       	pop	r19
    145a:	2f 91       	pop	r18
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <GIE_voidenable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"

#include"GIE_interface.h"
#include"GIE_registers.h"
void GIE_voidenable(void){
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    146e:	af e5       	ldi	r26, 0x5F	; 95
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ef e5       	ldi	r30, 0x5F	; 95
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	80 68       	ori	r24, 0x80	; 128
    147a:	8c 93       	st	X, r24
}
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <GIE_voidedisable>:
void GIE_voidedisable(void){
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    148a:	af e5       	ldi	r26, 0x5F	; 95
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ef e5       	ldi	r30, 0x5F	; 95
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8f 77       	andi	r24, 0x7F	; 127
    1496:	8c 93       	st	X, r24
}
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <PORT_voidInit>:
#include"STD_TYPES.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
#include"PORT_interface.h"
  void PORT_voidInit(void){
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    DDRD=PORTD_DIR;
    14a6:	ea e2       	ldi	r30, 0x2A	; 42
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	87 e4       	ldi	r24, 0x47	; 71
    14ac:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    14ae:	e7 e2       	ldi	r30, 0x27	; 39
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    14b6:	e4 e2       	ldi	r30, 0x24	; 36
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	87 e0       	ldi	r24, 0x07	; 7
    14bc:	80 83       	st	Z, r24
    PORTD=PORTD_INIT_VALUE;
    14be:	eb e2       	ldi	r30, 0x2B	; 43
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8f eb       	ldi	r24, 0xBF	; 191
    14c4:	80 83       	st	Z, r24
    PORTC=PORTC_INIT_VALUE;
    14c6:	e8 e2       	ldi	r30, 0x28	; 40
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VALUE;
    14cc:	e5 e2       	ldi	r30, 0x25	; 37
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	80 83       	st	Z, r24
  }
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <TIMER0_voidinit>:
static void(*TIMER1_pvcallbackcompfuncB)(void)=NULL;
static void(*TIMER2_pvcallbackcompfuncB)(void)=NULL;



void TIMER0_voidinit(void){
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE==NORMAL_MODE
	CLEAR_BIT(TCCR0A,TCCR0A_WGM00);
    14e2:	a4 e4       	ldi	r26, 0x44	; 68
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e4 e4       	ldi	r30, 0x44	; 68
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8e 7f       	andi	r24, 0xFE	; 254
    14ee:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0A,TCCR0A_WGM01);
    14f0:	a4 e4       	ldi	r26, 0x44	; 68
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e4 e4       	ldi	r30, 0x44	; 68
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8d 7f       	andi	r24, 0xFD	; 253
    14fc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0A,TCCR0B_WGM02);
    14fe:	a4 e4       	ldi	r26, 0x44	; 68
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e4 e4       	ldi	r30, 0x44	; 68
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	87 7f       	andi	r24, 0xF7	; 247
    150a:	8c 93       	st	X, r24
			Local_u8errorstate=NOK;
		}
		return Local_u8errorstate;
	}

}
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <TIMER_u8setmode.1377>:

#else
#error "WRONG PRAMATERS"
#endif
	}
	u8 TIMER_u8setmode(u8 copy_u8timerno,u8 copy_u8initmode){
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	29 97       	sbiw	r28, 0x09	; 9
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	8a 83       	std	Y+2, r24	; 0x02
    1528:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8errorstate=OK;
    152a:	19 82       	std	Y+1, r1	; 0x01
		if(copy_u8timerno==TIMER0){
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	88 23       	and	r24, r24
    1530:	09 f0       	breq	.+2      	; 0x1534 <TIMER_u8setmode.1377+0x22>
    1532:	b5 c0       	rjmp	.+362    	; 0x169e <TIMER_u8setmode.1377+0x18c>
			switch(copy_u8initmode){
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	39 87       	std	Y+9, r19	; 0x09
    153c:	28 87       	std	Y+8, r18	; 0x08
    153e:	88 85       	ldd	r24, Y+8	; 0x08
    1540:	99 85       	ldd	r25, Y+9	; 0x09
    1542:	83 30       	cpi	r24, 0x03	; 3
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <TIMER_u8setmode.1377+0x38>
    1548:	4f c0       	rjmp	.+158    	; 0x15e8 <TIMER_u8setmode.1377+0xd6>
    154a:	28 85       	ldd	r18, Y+8	; 0x08
    154c:	39 85       	ldd	r19, Y+9	; 0x09
    154e:	24 30       	cpi	r18, 0x04	; 4
    1550:	31 05       	cpc	r19, r1
    1552:	5c f4       	brge	.+22     	; 0x156a <TIMER_u8setmode.1377+0x58>
    1554:	88 85       	ldd	r24, Y+8	; 0x08
    1556:	99 85       	ldd	r25, Y+9	; 0x09
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	c9 f0       	breq	.+50     	; 0x1590 <TIMER_u8setmode.1377+0x7e>
    155e:	28 85       	ldd	r18, Y+8	; 0x08
    1560:	39 85       	ldd	r19, Y+9	; 0x09
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	51 f1       	breq	.+84     	; 0x15bc <TIMER_u8setmode.1377+0xaa>
    1568:	97 c0       	rjmp	.+302    	; 0x1698 <TIMER_u8setmode.1377+0x186>
    156a:	88 85       	ldd	r24, Y+8	; 0x08
    156c:	99 85       	ldd	r25, Y+9	; 0x09
    156e:	85 30       	cpi	r24, 0x05	; 5
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <TIMER_u8setmode.1377+0x64>
    1574:	65 c0       	rjmp	.+202    	; 0x1640 <TIMER_u8setmode.1377+0x12e>
    1576:	28 85       	ldd	r18, Y+8	; 0x08
    1578:	39 85       	ldd	r19, Y+9	; 0x09
    157a:	25 30       	cpi	r18, 0x05	; 5
    157c:	31 05       	cpc	r19, r1
    157e:	0c f4       	brge	.+2      	; 0x1582 <TIMER_u8setmode.1377+0x70>
    1580:	49 c0       	rjmp	.+146    	; 0x1614 <TIMER_u8setmode.1377+0x102>
    1582:	88 85       	ldd	r24, Y+8	; 0x08
    1584:	99 85       	ldd	r25, Y+9	; 0x09
    1586:	86 30       	cpi	r24, 0x06	; 6
    1588:	91 05       	cpc	r25, r1
    158a:	09 f4       	brne	.+2      	; 0x158e <TIMER_u8setmode.1377+0x7c>
    158c:	6f c0       	rjmp	.+222    	; 0x166c <TIMER_u8setmode.1377+0x15a>
    158e:	84 c0       	rjmp	.+264    	; 0x1698 <TIMER_u8setmode.1377+0x186>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_WGM00);
    1590:	a4 e4       	ldi	r26, 0x44	; 68
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e4 e4       	ldi	r30, 0x44	; 68
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8e 7f       	andi	r24, 0xFE	; 254
    159c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_WGM01);
    159e:	a4 e4       	ldi	r26, 0x44	; 68
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e4 e4       	ldi	r30, 0x44	; 68
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8d 7f       	andi	r24, 0xFD	; 253
    15aa:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0B_WGM02);
    15ac:	a4 e4       	ldi	r26, 0x44	; 68
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e4 e4       	ldi	r30, 0x44	; 68
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	87 7f       	andi	r24, 0xF7	; 247
    15b8:	8c 93       	st	X, r24
    15ba:	0c c3       	rjmp	.+1560   	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case COMPAREMATCH_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_WGM00);
    15bc:	a4 e4       	ldi	r26, 0x44	; 68
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e4 e4       	ldi	r30, 0x44	; 68
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8e 7f       	andi	r24, 0xFE	; 254
    15c8:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_WGM01);
    15ca:	a4 e4       	ldi	r26, 0x44	; 68
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e4 e4       	ldi	r30, 0x44	; 68
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	82 60       	ori	r24, 0x02	; 2
    15d6:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0B_WGM02);
    15d8:	a4 e4       	ldi	r26, 0x44	; 68
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e4 e4       	ldi	r30, 0x44	; 68
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	87 7f       	andi	r24, 0xF7	; 247
    15e4:	8c 93       	st	X, r24
    15e6:	f6 c2       	rjmp	.+1516   	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case FASTPWM_NORMALMDOE:
				SET_BIT(TCCR0A,TCCR0A_WGM00);
    15e8:	a4 e4       	ldi	r26, 0x44	; 68
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e4 e4       	ldi	r30, 0x44	; 68
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_WGM01);
    15f6:	a4 e4       	ldi	r26, 0x44	; 68
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e4 e4       	ldi	r30, 0x44	; 68
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	82 60       	ori	r24, 0x02	; 2
    1602:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0B_WGM02);
    1604:	a4 e4       	ldi	r26, 0x44	; 68
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e4 e4       	ldi	r30, 0x44	; 68
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	87 7f       	andi	r24, 0xF7	; 247
    1610:	8c 93       	st	X, r24
    1612:	e0 c2       	rjmp	.+1472   	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case FASTPWM_OCMODE:
				SET_BIT(TCCR0A,TCCR0A_WGM00);
    1614:	a4 e4       	ldi	r26, 0x44	; 68
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e4 e4       	ldi	r30, 0x44	; 68
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_WGM01);
    1622:	a4 e4       	ldi	r26, 0x44	; 68
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e4 e4       	ldi	r30, 0x44	; 68
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	82 60       	ori	r24, 0x02	; 2
    162e:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0B_WGM02);
    1630:	a4 e4       	ldi	r26, 0x44	; 68
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e4 e4       	ldi	r30, 0x44	; 68
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	88 60       	ori	r24, 0x08	; 8
    163c:	8c 93       	st	X, r24
    163e:	ca c2       	rjmp	.+1428   	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case PHASECORRECTPWM_NORMALMODE:
				SET_BIT(TCCR0A,TCCR0A_WGM00);
    1640:	a4 e4       	ldi	r26, 0x44	; 68
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e4 e4       	ldi	r30, 0x44	; 68
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_WGM01);
    164e:	a4 e4       	ldi	r26, 0x44	; 68
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e4 e4       	ldi	r30, 0x44	; 68
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8d 7f       	andi	r24, 0xFD	; 253
    165a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0B_WGM02);
    165c:	a4 e4       	ldi	r26, 0x44	; 68
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e4 e4       	ldi	r30, 0x44	; 68
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	87 7f       	andi	r24, 0xF7	; 247
    1668:	8c 93       	st	X, r24
    166a:	b4 c2       	rjmp	.+1384   	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case PHASECORRECTPWM_OCMODE:
				SET_BIT(TCCR0A,TCCR0A_WGM00);
    166c:	a4 e4       	ldi	r26, 0x44	; 68
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e4 e4       	ldi	r30, 0x44	; 68
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	81 60       	ori	r24, 0x01	; 1
    1678:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_WGM01);
    167a:	a4 e4       	ldi	r26, 0x44	; 68
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e4 e4       	ldi	r30, 0x44	; 68
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	8d 7f       	andi	r24, 0xFD	; 253
    1686:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0B_WGM02);
    1688:	a4 e4       	ldi	r26, 0x44	; 68
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e4 e4       	ldi	r30, 0x44	; 68
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	88 60       	ori	r24, 0x08	; 8
    1694:	8c 93       	st	X, r24
    1696:	9e c2       	rjmp	.+1340   	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			default:Local_u8errorstate=NOK;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	9b c2       	rjmp	.+1334   	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
			}
		}
		else if(copy_u8timerno==TIMER1){
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <TIMER_u8setmode.1377+0x194>
    16a4:	dc c1       	rjmp	.+952    	; 0x1a5e <TIMER_u8setmode.1377+0x54c>
			switch(copy_u8initmode){
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3f 83       	std	Y+7, r19	; 0x07
    16ae:	2e 83       	std	Y+6, r18	; 0x06
    16b0:	8e 81       	ldd	r24, Y+6	; 0x06
    16b2:	9f 81       	ldd	r25, Y+7	; 0x07
    16b4:	8a 30       	cpi	r24, 0x0A	; 10
    16b6:	91 05       	cpc	r25, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <TIMER_u8setmode.1377+0x1aa>
    16ba:	c9 c0       	rjmp	.+402    	; 0x184e <TIMER_u8setmode.1377+0x33c>
    16bc:	2e 81       	ldd	r18, Y+6	; 0x06
    16be:	3f 81       	ldd	r19, Y+7	; 0x07
    16c0:	2b 30       	cpi	r18, 0x0B	; 11
    16c2:	31 05       	cpc	r19, r1
    16c4:	2c f5       	brge	.+74     	; 0x1710 <TIMER_u8setmode.1377+0x1fe>
    16c6:	8e 81       	ldd	r24, Y+6	; 0x06
    16c8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ca:	86 30       	cpi	r24, 0x06	; 6
    16cc:	91 05       	cpc	r25, r1
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <TIMER_u8setmode.1377+0x1c0>
    16d0:	a6 c1       	rjmp	.+844    	; 0x1a1e <TIMER_u8setmode.1377+0x50c>
    16d2:	2e 81       	ldd	r18, Y+6	; 0x06
    16d4:	3f 81       	ldd	r19, Y+7	; 0x07
    16d6:	27 30       	cpi	r18, 0x07	; 7
    16d8:	31 05       	cpc	r19, r1
    16da:	6c f4       	brge	.+26     	; 0x16f6 <TIMER_u8setmode.1377+0x1e4>
    16dc:	8e 81       	ldd	r24, Y+6	; 0x06
    16de:	9f 81       	ldd	r25, Y+7	; 0x07
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <TIMER_u8setmode.1377+0x1d6>
    16e6:	3f c0       	rjmp	.+126    	; 0x1766 <TIMER_u8setmode.1377+0x254>
    16e8:	2e 81       	ldd	r18, Y+6	; 0x06
    16ea:	3f 81       	ldd	r19, Y+7	; 0x07
    16ec:	24 30       	cpi	r18, 0x04	; 4
    16ee:	31 05       	cpc	r19, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <TIMER_u8setmode.1377+0x1e2>
    16f2:	04 c1       	rjmp	.+520    	; 0x18fc <TIMER_u8setmode.1377+0x3ea>
    16f4:	b1 c1       	rjmp	.+866    	; 0x1a58 <TIMER_u8setmode.1377+0x546>
    16f6:	8e 81       	ldd	r24, Y+6	; 0x06
    16f8:	9f 81       	ldd	r25, Y+7	; 0x07
    16fa:	88 30       	cpi	r24, 0x08	; 8
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <TIMER_u8setmode.1377+0x1f0>
    1700:	6c c0       	rjmp	.+216    	; 0x17da <TIMER_u8setmode.1377+0x2c8>
    1702:	2e 81       	ldd	r18, Y+6	; 0x06
    1704:	3f 81       	ldd	r19, Y+7	; 0x07
    1706:	29 30       	cpi	r18, 0x09	; 9
    1708:	31 05       	cpc	r19, r1
    170a:	0c f0       	brlt	.+2      	; 0x170e <TIMER_u8setmode.1377+0x1fc>
    170c:	83 c0       	rjmp	.+262    	; 0x1814 <TIMER_u8setmode.1377+0x302>
    170e:	48 c0       	rjmp	.+144    	; 0x17a0 <TIMER_u8setmode.1377+0x28e>
    1710:	8e 81       	ldd	r24, Y+6	; 0x06
    1712:	9f 81       	ldd	r25, Y+7	; 0x07
    1714:	8e 30       	cpi	r24, 0x0E	; 14
    1716:	91 05       	cpc	r25, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <TIMER_u8setmode.1377+0x20a>
    171a:	0d c1       	rjmp	.+538    	; 0x1936 <TIMER_u8setmode.1377+0x424>
    171c:	2e 81       	ldd	r18, Y+6	; 0x06
    171e:	3f 81       	ldd	r19, Y+7	; 0x07
    1720:	2f 30       	cpi	r18, 0x0F	; 15
    1722:	31 05       	cpc	r19, r1
    1724:	6c f4       	brge	.+26     	; 0x1740 <TIMER_u8setmode.1377+0x22e>
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	8b 30       	cpi	r24, 0x0B	; 11
    172c:	91 05       	cpc	r25, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <TIMER_u8setmode.1377+0x220>
    1730:	ab c0       	rjmp	.+342    	; 0x1888 <TIMER_u8setmode.1377+0x376>
    1732:	2e 81       	ldd	r18, Y+6	; 0x06
    1734:	3f 81       	ldd	r19, Y+7	; 0x07
    1736:	2d 30       	cpi	r18, 0x0D	; 13
    1738:	31 05       	cpc	r19, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <TIMER_u8setmode.1377+0x22c>
    173c:	c2 c0       	rjmp	.+388    	; 0x18c2 <TIMER_u8setmode.1377+0x3b0>
    173e:	8c c1       	rjmp	.+792    	; 0x1a58 <TIMER_u8setmode.1377+0x546>
    1740:	8e 81       	ldd	r24, Y+6	; 0x06
    1742:	9f 81       	ldd	r25, Y+7	; 0x07
    1744:	80 31       	cpi	r24, 0x10	; 16
    1746:	91 05       	cpc	r25, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <TIMER_u8setmode.1377+0x23a>
    174a:	2f c1       	rjmp	.+606    	; 0x19aa <TIMER_u8setmode.1377+0x498>
    174c:	2e 81       	ldd	r18, Y+6	; 0x06
    174e:	3f 81       	ldd	r19, Y+7	; 0x07
    1750:	20 31       	cpi	r18, 0x10	; 16
    1752:	31 05       	cpc	r19, r1
    1754:	0c f4       	brge	.+2      	; 0x1758 <TIMER_u8setmode.1377+0x246>
    1756:	0c c1       	rjmp	.+536    	; 0x1970 <TIMER_u8setmode.1377+0x45e>
    1758:	8e 81       	ldd	r24, Y+6	; 0x06
    175a:	9f 81       	ldd	r25, Y+7	; 0x07
    175c:	81 31       	cpi	r24, 0x11	; 17
    175e:	91 05       	cpc	r25, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <TIMER_u8setmode.1377+0x252>
    1762:	40 c1       	rjmp	.+640    	; 0x19e4 <TIMER_u8setmode.1377+0x4d2>
    1764:	79 c1       	rjmp	.+754    	; 0x1a58 <TIMER_u8setmode.1377+0x546>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1766:	a0 e8       	ldi	r26, 0x80	; 128
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e0 e8       	ldi	r30, 0x80	; 128
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	8e 7f       	andi	r24, 0xFE	; 254
    1772:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1774:	a0 e8       	ldi	r26, 0x80	; 128
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e0 e8       	ldi	r30, 0x80	; 128
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8d 7f       	andi	r24, 0xFD	; 253
    1780:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM12);
    1782:	a0 e8       	ldi	r26, 0x80	; 128
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e0 e8       	ldi	r30, 0x80	; 128
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	87 7f       	andi	r24, 0xF7	; 247
    178e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM13);
    1790:	a0 e8       	ldi	r26, 0x80	; 128
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e0 e8       	ldi	r30, 0x80	; 128
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8f 7e       	andi	r24, 0xEF	; 239
    179c:	8c 93       	st	X, r24
    179e:	1a c2       	rjmp	.+1076   	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case COMPAREMATCH_MODEOC:
				CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    17a0:	a0 e8       	ldi	r26, 0x80	; 128
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e0 e8       	ldi	r30, 0x80	; 128
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8e 7f       	andi	r24, 0xFE	; 254
    17ac:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    17ae:	a0 e8       	ldi	r26, 0x80	; 128
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e0 e8       	ldi	r30, 0x80	; 128
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8d 7f       	andi	r24, 0xFD	; 253
    17ba:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM12);
    17bc:	a0 e8       	ldi	r26, 0x80	; 128
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e0 e8       	ldi	r30, 0x80	; 128
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	88 60       	ori	r24, 0x08	; 8
    17c8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM13);
    17ca:	a0 e8       	ldi	r26, 0x80	; 128
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e0 e8       	ldi	r30, 0x80	; 128
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8f 7e       	andi	r24, 0xEF	; 239
    17d6:	8c 93       	st	X, r24
    17d8:	fd c1       	rjmp	.+1018   	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case COMPAREMATCH_MODEIC:

				CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    17da:	a0 e8       	ldi	r26, 0x80	; 128
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e0 e8       	ldi	r30, 0x80	; 128
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8e 7f       	andi	r24, 0xFE	; 254
    17e6:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    17e8:	a0 e8       	ldi	r26, 0x80	; 128
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e0 e8       	ldi	r30, 0x80	; 128
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8d 7f       	andi	r24, 0xFD	; 253
    17f4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM12);
    17f6:	a0 e8       	ldi	r26, 0x80	; 128
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e0 e8       	ldi	r30, 0x80	; 128
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	88 60       	ori	r24, 0x08	; 8
    1802:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM13);
    1804:	a0 e8       	ldi	r26, 0x80	; 128
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e0 e8       	ldi	r30, 0x80	; 128
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	80 61       	ori	r24, 0x10	; 16
    1810:	8c 93       	st	X, r24
    1812:	e0 c1       	rjmp	.+960    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case FASTPWM_NORMAL8BITMODE:
				SET_BIT(TCCR1A,TCCR1A_WGM10);
    1814:	a0 e8       	ldi	r26, 0x80	; 128
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e0 e8       	ldi	r30, 0x80	; 128
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	81 60       	ori	r24, 0x01	; 1
    1820:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1822:	a0 e8       	ldi	r26, 0x80	; 128
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e0 e8       	ldi	r30, 0x80	; 128
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8d 7f       	andi	r24, 0xFD	; 253
    182e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM12);
    1830:	a0 e8       	ldi	r26, 0x80	; 128
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e0 e8       	ldi	r30, 0x80	; 128
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	88 60       	ori	r24, 0x08	; 8
    183c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM13);
    183e:	a0 e8       	ldi	r26, 0x80	; 128
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e0 e8       	ldi	r30, 0x80	; 128
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8f 7e       	andi	r24, 0xEF	; 239
    184a:	8c 93       	st	X, r24
    184c:	c3 c1       	rjmp	.+902    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case FASTPWM_NORMAL9BITMODE:
				CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    184e:	a0 e8       	ldi	r26, 0x80	; 128
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e0 e8       	ldi	r30, 0x80	; 128
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8e 7f       	andi	r24, 0xFE	; 254
    185a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    185c:	a0 e8       	ldi	r26, 0x80	; 128
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e0 e8       	ldi	r30, 0x80	; 128
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	82 60       	ori	r24, 0x02	; 2
    1868:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM12);
    186a:	a0 e8       	ldi	r26, 0x80	; 128
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e0 e8       	ldi	r30, 0x80	; 128
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	88 60       	ori	r24, 0x08	; 8
    1876:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM13);
    1878:	a0 e8       	ldi	r26, 0x80	; 128
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e0 e8       	ldi	r30, 0x80	; 128
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	8f 7e       	andi	r24, 0xEF	; 239
    1884:	8c 93       	st	X, r24
    1886:	a6 c1       	rjmp	.+844    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case FASTPWM_NORMAL10BITMODE:
				SET_BIT(TCCR1A,TCCR1A_WGM10);
    1888:	a0 e8       	ldi	r26, 0x80	; 128
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e0 e8       	ldi	r30, 0x80	; 128
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	81 60       	ori	r24, 0x01	; 1
    1894:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    1896:	a0 e8       	ldi	r26, 0x80	; 128
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e0 e8       	ldi	r30, 0x80	; 128
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	82 60       	ori	r24, 0x02	; 2
    18a2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM12);
    18a4:	a0 e8       	ldi	r26, 0x80	; 128
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e0 e8       	ldi	r30, 0x80	; 128
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	88 60       	ori	r24, 0x08	; 8
    18b0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM13);
    18b2:	a0 e8       	ldi	r26, 0x80	; 128
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e0 e8       	ldi	r30, 0x80	; 128
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7e       	andi	r24, 0xEF	; 239
    18be:	8c 93       	st	X, r24
    18c0:	89 c1       	rjmp	.+786    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case FASTPWM_ICMODE:
				CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    18c2:	a0 e8       	ldi	r26, 0x80	; 128
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e0 e8       	ldi	r30, 0x80	; 128
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8e 7f       	andi	r24, 0xFE	; 254
    18ce:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    18d0:	a0 e8       	ldi	r26, 0x80	; 128
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e0 e8       	ldi	r30, 0x80	; 128
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	82 60       	ori	r24, 0x02	; 2
    18dc:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM12);
    18de:	a0 e8       	ldi	r26, 0x80	; 128
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e0 e8       	ldi	r30, 0x80	; 128
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	88 60       	ori	r24, 0x08	; 8
    18ea:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM13);
    18ec:	a0 e8       	ldi	r26, 0x80	; 128
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e0 e8       	ldi	r30, 0x80	; 128
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	80 61       	ori	r24, 0x10	; 16
    18f8:	8c 93       	st	X, r24
    18fa:	6c c1       	rjmp	.+728    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case FASTPWM_OCMODE:
				SET_BIT(TCCR1A,TCCR1A_WGM10);
    18fc:	a0 e8       	ldi	r26, 0x80	; 128
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e0 e8       	ldi	r30, 0x80	; 128
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	81 60       	ori	r24, 0x01	; 1
    1908:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    190a:	a0 e8       	ldi	r26, 0x80	; 128
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e0 e8       	ldi	r30, 0x80	; 128
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	82 60       	ori	r24, 0x02	; 2
    1916:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM12);
    1918:	a0 e8       	ldi	r26, 0x80	; 128
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e0 e8       	ldi	r30, 0x80	; 128
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	88 60       	ori	r24, 0x08	; 8
    1924:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM13);
    1926:	a0 e8       	ldi	r26, 0x80	; 128
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e0 e8       	ldi	r30, 0x80	; 128
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 61       	ori	r24, 0x10	; 16
    1932:	8c 93       	st	X, r24
    1934:	4f c1       	rjmp	.+670    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;

			case PHASECORRECTPWM_NORMAL8BITMODE:
				SET_BIT(TCCR1A,TCCR1A_WGM10);
    1936:	a0 e8       	ldi	r26, 0x80	; 128
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e0 e8       	ldi	r30, 0x80	; 128
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	81 60       	ori	r24, 0x01	; 1
    1942:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1944:	a0 e8       	ldi	r26, 0x80	; 128
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e0 e8       	ldi	r30, 0x80	; 128
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8d 7f       	andi	r24, 0xFD	; 253
    1950:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM12);
    1952:	a0 e8       	ldi	r26, 0x80	; 128
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e0 e8       	ldi	r30, 0x80	; 128
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	87 7f       	andi	r24, 0xF7	; 247
    195e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM13);
    1960:	a0 e8       	ldi	r26, 0x80	; 128
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e0 e8       	ldi	r30, 0x80	; 128
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	8f 7e       	andi	r24, 0xEF	; 239
    196c:	8c 93       	st	X, r24
    196e:	32 c1       	rjmp	.+612    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case PHASECORRECTPWM_NORMAL9BITMODE:
				CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1970:	a0 e8       	ldi	r26, 0x80	; 128
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e0 e8       	ldi	r30, 0x80	; 128
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	8e 7f       	andi	r24, 0xFE	; 254
    197c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    197e:	a0 e8       	ldi	r26, 0x80	; 128
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e0 e8       	ldi	r30, 0x80	; 128
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	82 60       	ori	r24, 0x02	; 2
    198a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM12);
    198c:	a0 e8       	ldi	r26, 0x80	; 128
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e0 e8       	ldi	r30, 0x80	; 128
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	87 7f       	andi	r24, 0xF7	; 247
    1998:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM13);
    199a:	a0 e8       	ldi	r26, 0x80	; 128
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e0 e8       	ldi	r30, 0x80	; 128
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 7e       	andi	r24, 0xEF	; 239
    19a6:	8c 93       	st	X, r24
    19a8:	15 c1       	rjmp	.+554    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;

			case PHASECORRECTPWM_NORMAL10BITMODE:
				SET_BIT(TCCR1A,TCCR1A_WGM10);
    19aa:	a0 e8       	ldi	r26, 0x80	; 128
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e0 e8       	ldi	r30, 0x80	; 128
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	81 60       	ori	r24, 0x01	; 1
    19b6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    19b8:	a0 e8       	ldi	r26, 0x80	; 128
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e0 e8       	ldi	r30, 0x80	; 128
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	82 60       	ori	r24, 0x02	; 2
    19c4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM12);
    19c6:	a0 e8       	ldi	r26, 0x80	; 128
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e0 e8       	ldi	r30, 0x80	; 128
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	87 7f       	andi	r24, 0xF7	; 247
    19d2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM13);
    19d4:	a0 e8       	ldi	r26, 0x80	; 128
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e0 e8       	ldi	r30, 0x80	; 128
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8f 7e       	andi	r24, 0xEF	; 239
    19e0:	8c 93       	st	X, r24
    19e2:	f8 c0       	rjmp	.+496    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case PHASECORRECTPWM_ICMODE:
				CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    19e4:	a0 e8       	ldi	r26, 0x80	; 128
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e0 e8       	ldi	r30, 0x80	; 128
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	8e 7f       	andi	r24, 0xFE	; 254
    19f0:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    19f2:	a0 e8       	ldi	r26, 0x80	; 128
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e0 e8       	ldi	r30, 0x80	; 128
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	82 60       	ori	r24, 0x02	; 2
    19fe:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM12);
    1a00:	a0 e8       	ldi	r26, 0x80	; 128
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e0 e8       	ldi	r30, 0x80	; 128
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	87 7f       	andi	r24, 0xF7	; 247
    1a0c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM13);
    1a0e:	a0 e8       	ldi	r26, 0x80	; 128
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e0 e8       	ldi	r30, 0x80	; 128
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	80 61       	ori	r24, 0x10	; 16
    1a1a:	8c 93       	st	X, r24
    1a1c:	db c0       	rjmp	.+438    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case PHASECORRECTPWM_OCMODE:
				SET_BIT(TCCR1A,TCCR1A_WGM10);
    1a1e:	a0 e8       	ldi	r26, 0x80	; 128
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e0 e8       	ldi	r30, 0x80	; 128
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	81 60       	ori	r24, 0x01	; 1
    1a2a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    1a2c:	a0 e8       	ldi	r26, 0x80	; 128
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e0 e8       	ldi	r30, 0x80	; 128
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	82 60       	ori	r24, 0x02	; 2
    1a38:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1B_WGM12);
    1a3a:	a0 e8       	ldi	r26, 0x80	; 128
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e0 e8       	ldi	r30, 0x80	; 128
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	87 7f       	andi	r24, 0xF7	; 247
    1a46:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1B_WGM13);
    1a48:	a0 e8       	ldi	r26, 0x80	; 128
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e0 e8       	ldi	r30, 0x80	; 128
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	80 61       	ori	r24, 0x10	; 16
    1a54:	8c 93       	st	X, r24
    1a56:	be c0       	rjmp	.+380    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			default:Local_u8errorstate=NOK;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	bb c0       	rjmp	.+374    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
			}
		}
		else if(copy_u8timerno==TIMER2){
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	82 30       	cpi	r24, 0x02	; 2
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <TIMER_u8setmode.1377+0x554>
    1a64:	b5 c0       	rjmp	.+362    	; 0x1bd0 <TIMER_u8setmode.1377+0x6be>
			switch(copy_u8initmode){
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	3d 83       	std	Y+5, r19	; 0x05
    1a6e:	2c 83       	std	Y+4, r18	; 0x04
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <TIMER_u8setmode.1377+0x56a>
    1a7a:	4f c0       	rjmp	.+158    	; 0x1b1a <TIMER_u8setmode.1377+0x608>
    1a7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a80:	24 30       	cpi	r18, 0x04	; 4
    1a82:	31 05       	cpc	r19, r1
    1a84:	5c f4       	brge	.+22     	; 0x1a9c <TIMER_u8setmode.1377+0x58a>
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	c9 f0       	breq	.+50     	; 0x1ac2 <TIMER_u8setmode.1377+0x5b0>
    1a90:	2c 81       	ldd	r18, Y+4	; 0x04
    1a92:	3d 81       	ldd	r19, Y+5	; 0x05
    1a94:	22 30       	cpi	r18, 0x02	; 2
    1a96:	31 05       	cpc	r19, r1
    1a98:	51 f1       	breq	.+84     	; 0x1aee <TIMER_u8setmode.1377+0x5dc>
    1a9a:	97 c0       	rjmp	.+302    	; 0x1bca <TIMER_u8setmode.1377+0x6b8>
    1a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa0:	85 30       	cpi	r24, 0x05	; 5
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <TIMER_u8setmode.1377+0x596>
    1aa6:	65 c0       	rjmp	.+202    	; 0x1b72 <TIMER_u8setmode.1377+0x660>
    1aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    1aac:	25 30       	cpi	r18, 0x05	; 5
    1aae:	31 05       	cpc	r19, r1
    1ab0:	0c f4       	brge	.+2      	; 0x1ab4 <TIMER_u8setmode.1377+0x5a2>
    1ab2:	49 c0       	rjmp	.+146    	; 0x1b46 <TIMER_u8setmode.1377+0x634>
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab8:	86 30       	cpi	r24, 0x06	; 6
    1aba:	91 05       	cpc	r25, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <TIMER_u8setmode.1377+0x5ae>
    1abe:	6f c0       	rjmp	.+222    	; 0x1b9e <TIMER_u8setmode.1377+0x68c>
    1ac0:	84 c0       	rjmp	.+264    	; 0x1bca <TIMER_u8setmode.1377+0x6b8>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_WGM20);
    1ac2:	a0 eb       	ldi	r26, 0xB0	; 176
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e0 eb       	ldi	r30, 0xB0	; 176
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8e 7f       	andi	r24, 0xFE	; 254
    1ace:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_WGM21);
    1ad0:	a0 eb       	ldi	r26, 0xB0	; 176
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e0 eb       	ldi	r30, 0xB0	; 176
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	8d 7f       	andi	r24, 0xFD	; 253
    1adc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2B_WGM22);
    1ade:	a0 eb       	ldi	r26, 0xB0	; 176
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e0 eb       	ldi	r30, 0xB0	; 176
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	87 7f       	andi	r24, 0xF7	; 247
    1aea:	8c 93       	st	X, r24
    1aec:	73 c0       	rjmp	.+230    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case COMPAREMATCH_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_WGM20);
    1aee:	a0 eb       	ldi	r26, 0xB0	; 176
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e0 eb       	ldi	r30, 0xB0	; 176
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8e 7f       	andi	r24, 0xFE	; 254
    1afa:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_WGM21);
    1afc:	a0 eb       	ldi	r26, 0xB0	; 176
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e0 eb       	ldi	r30, 0xB0	; 176
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	82 60       	ori	r24, 0x02	; 2
    1b08:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2B_WGM22);
    1b0a:	a0 eb       	ldi	r26, 0xB0	; 176
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e0 eb       	ldi	r30, 0xB0	; 176
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	87 7f       	andi	r24, 0xF7	; 247
    1b16:	8c 93       	st	X, r24
    1b18:	5d c0       	rjmp	.+186    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case FASTPWM_NORMALMDOE:
				SET_BIT(TCCR2A,TCCR2A_WGM20);
    1b1a:	a0 eb       	ldi	r26, 0xB0	; 176
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e0 eb       	ldi	r30, 0xB0	; 176
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	81 60       	ori	r24, 0x01	; 1
    1b26:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_WGM21);
    1b28:	a0 eb       	ldi	r26, 0xB0	; 176
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e0 eb       	ldi	r30, 0xB0	; 176
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	82 60       	ori	r24, 0x02	; 2
    1b34:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2B_WGM22);
    1b36:	a0 eb       	ldi	r26, 0xB0	; 176
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e0 eb       	ldi	r30, 0xB0	; 176
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	87 7f       	andi	r24, 0xF7	; 247
    1b42:	8c 93       	st	X, r24
    1b44:	47 c0       	rjmp	.+142    	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case FASTPWM_OCMODE:
				SET_BIT(TCCR2A,TCCR2A_WGM20);
    1b46:	a0 eb       	ldi	r26, 0xB0	; 176
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e0 eb       	ldi	r30, 0xB0	; 176
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	81 60       	ori	r24, 0x01	; 1
    1b52:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_WGM21);
    1b54:	a0 eb       	ldi	r26, 0xB0	; 176
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e0 eb       	ldi	r30, 0xB0	; 176
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	82 60       	ori	r24, 0x02	; 2
    1b60:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2B_WGM22);
    1b62:	a0 eb       	ldi	r26, 0xB0	; 176
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e0 eb       	ldi	r30, 0xB0	; 176
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	88 60       	ori	r24, 0x08	; 8
    1b6e:	8c 93       	st	X, r24
    1b70:	31 c0       	rjmp	.+98     	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case PHASECORRECTPWM_NORMALMODE:
				SET_BIT(TCCR2A,TCCR2A_WGM20);
    1b72:	a0 eb       	ldi	r26, 0xB0	; 176
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e0 eb       	ldi	r30, 0xB0	; 176
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	81 60       	ori	r24, 0x01	; 1
    1b7e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_WGM21);
    1b80:	a0 eb       	ldi	r26, 0xB0	; 176
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e0 eb       	ldi	r30, 0xB0	; 176
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	8d 7f       	andi	r24, 0xFD	; 253
    1b8c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2B_WGM22);
    1b8e:	a0 eb       	ldi	r26, 0xB0	; 176
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e0 eb       	ldi	r30, 0xB0	; 176
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	87 7f       	andi	r24, 0xF7	; 247
    1b9a:	8c 93       	st	X, r24
    1b9c:	1b c0       	rjmp	.+54     	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			case PHASECORRECTPWM_OCMODE:
				SET_BIT(TCCR2A,TCCR2A_WGM20);
    1b9e:	a0 eb       	ldi	r26, 0xB0	; 176
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e0 eb       	ldi	r30, 0xB0	; 176
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	81 60       	ori	r24, 0x01	; 1
    1baa:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_WGM21);
    1bac:	a0 eb       	ldi	r26, 0xB0	; 176
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e0 eb       	ldi	r30, 0xB0	; 176
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8d 7f       	andi	r24, 0xFD	; 253
    1bb8:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2B_WGM22);
    1bba:	a0 eb       	ldi	r26, 0xB0	; 176
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e0 eb       	ldi	r30, 0xB0	; 176
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	88 60       	ori	r24, 0x08	; 8
    1bc6:	8c 93       	st	X, r24
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>
				break;
			default:Local_u8errorstate=NOK;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <TIMER_u8setmode.1377+0x6c2>

			}
		}
		else {
			Local_u8errorstate=NOK;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8errorstate;
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1bd6:	29 96       	adiw	r28, 0x09	; 9
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <TIMER2_voidsetcompint.1373>:

#else
#error "WRONG PRAMATERS"
#endif
	}
	void TIMER2_voidsetcompint(void){
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_COMPINT==ENABLE
		SET_BIT(TIMSK2,TIMSK2_OCIE2A);
    1bf0:	a0 e7       	ldi	r26, 0x70	; 112
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e0 e7       	ldi	r30, 0x70	; 112
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	82 60       	ori	r24, 0x02	; 2
    1bfc:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK2,TIMSK2_OCIE2A);

#else
#error "WRONG PRAMATERS"
#endif
	}
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <TIMER2_voidsetoverflowint.1370>:

#endif


	}
	void TIMER2_voidsetoverflowint(void){
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_OVINT==ENABLE
		SET_BIT(TIMSK2,TIMSK2_TOIE2);
    1c0c:	a0 e7       	ldi	r26, 0x70	; 112
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e0 e7       	ldi	r30, 0x70	; 112
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	81 60       	ori	r24, 0x01	; 1
    1c18:	8c 93       	st	X, r24
		SET_BIT(TIMSK2,TIMSK2_TOIE2);

#else
#error "WRONG PRAMATERS"
#endif
	}
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <TIMER2_voidchooseprescaler.1367>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER2_voidchooseprescaler(void){
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
#if PRESCALE_MODE==SHUTDOWN_MODE
		CLEAR_BIT(TCCR2B,TCCR2B_CS20);
    1c28:	a1 eb       	ldi	r26, 0xB1	; 177
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e1 eb       	ldi	r30, 0xB1	; 177
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	8e 7f       	andi	r24, 0xFE	; 254
    1c34:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2B,TCCR2B_CS21);
    1c36:	a1 eb       	ldi	r26, 0xB1	; 177
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e1 eb       	ldi	r30, 0xB1	; 177
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8d 7f       	andi	r24, 0xFD	; 253
    1c42:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2B,TCCR2B_CS22);
    1c44:	a1 eb       	ldi	r26, 0xB1	; 177
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e1 eb       	ldi	r30, 0xB1	; 177
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8b 7f       	andi	r24, 0xFB	; 251
    1c50:	8c 93       	st	X, r24
#error "WRONG PRAMATERS"

#endif


	}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <TIMER2_voidchoosefastorphasepwmmodechanB.1364>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER2_voidchoosefastorphasepwmmodechanB(void){
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
#if FASTPWM_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR2A,TCCR2A_COM2B0);
		CLEAR_BIT(TCCR2A,TCCR2A_COM2B1);
#elif FASTPWM_MODE==NONINVERTIING_MODE
		CLEAR_BIT(TCCR2A,TCCR2A_COM2B0);
    1c60:	a0 eb       	ldi	r26, 0xB0	; 176
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e0 eb       	ldi	r30, 0xB0	; 176
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8f 7e       	andi	r24, 0xEF	; 239
    1c6c:	8c 93       	st	X, r24
		SET_BIT(TCCR2A,TCCR2A_COM2B1);
    1c6e:	a0 eb       	ldi	r26, 0xB0	; 176
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e0 eb       	ldi	r30, 0xB0	; 176
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	80 62       	ori	r24, 0x20	; 32
    1c7a:	8c 93       	st	X, r24
		SET_BIT(TCCR2A,TCCR2A_COM2B1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <TIMER2_voidchoosefastorphasepwmmodechanA.1361>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER2_voidchoosefastorphasepwmmodechanA(void){
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
#if FASTORPHASEPWM_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR2A,TCCR2A_COM2A0);
    1c8a:	a0 eb       	ldi	r26, 0xB0	; 176
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e0 eb       	ldi	r30, 0xB0	; 176
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 7b       	andi	r24, 0xBF	; 191
    1c96:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2A,TCCR2A_COM2A1);
    1c98:	a0 eb       	ldi	r26, 0xB0	; 176
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e0 eb       	ldi	r30, 0xB0	; 176
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8f 77       	andi	r24, 0x7F	; 127
    1ca4:	8c 93       	st	X, r24
		SET_BIT(TCCR2A,TCCR2A_COM2A1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <TIMER2_voidchoosecmpmodechanB.1358>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER2_voidchoosecmpmodechanB(void){
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
#if COMP_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR2A,TCCR2A_COM2B0);
		CLEAR_BIT(TCCR2A,TCCR2A_COM2B1);
#elif COMP_MODE==TOOGLE_MODE
		SET_BIT(TCCR2A,TCCR2A_COM2B0);
    1cb4:	a0 eb       	ldi	r26, 0xB0	; 176
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e0 eb       	ldi	r30, 0xB0	; 176
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 61       	ori	r24, 0x10	; 16
    1cc0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2A,TCCR2A_COM2B1);
    1cc2:	a0 eb       	ldi	r26, 0xB0	; 176
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e0 eb       	ldi	r30, 0xB0	; 176
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8f 7d       	andi	r24, 0xDF	; 223
    1cce:	8c 93       	st	X, r24
		SET_BIT(TCCR2A,TCCR2A_COM2B1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <TIMER2_voidchoosecmpmodechanA.1355>:

#endif


	}
	void TIMER2_voidchoosecmpmodechanA(void){
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
#if  COMP_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR2A,TCCR2A_COM2A0);
		CLEAR_BIT(TCCR2A,TCCR2A_COM2A1);
#elif COMP_MODE==TOOGLE_MODE
		SET_BIT(TCCR2A,TCCR2A_COM2A0);
    1cde:	a0 eb       	ldi	r26, 0xB0	; 176
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e0 eb       	ldi	r30, 0xB0	; 176
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 64       	ori	r24, 0x40	; 64
    1cea:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2A,TCCR2A_COM2A1);
    1cec:	a0 eb       	ldi	r26, 0xB0	; 176
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e0 eb       	ldi	r30, 0xB0	; 176
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8f 77       	andi	r24, 0x7F	; 127
    1cf8:	8c 93       	st	X, r24
		SET_BIT(TCCR2A,TCCR2A_COM2A1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <TIMER2_voidinit.1352>:
#else
#error "WRONG PRAMATERS"
#endif
	}

	void TIMER2_voidinit(void){
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR2A,TCCR2A_WGM20);
    1d08:	a0 eb       	ldi	r26, 0xB0	; 176
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e0 eb       	ldi	r30, 0xB0	; 176
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	8e 7f       	andi	r24, 0xFE	; 254
    1d14:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2A,TCCR2A_WGM21);
    1d16:	a0 eb       	ldi	r26, 0xB0	; 176
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e0 eb       	ldi	r30, 0xB0	; 176
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8d 7f       	andi	r24, 0xFD	; 253
    1d22:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2A,TCCR2B_WGM22);
    1d24:	a0 eb       	ldi	r26, 0xB0	; 176
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e0 eb       	ldi	r30, 0xB0	; 176
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	87 7f       	andi	r24, 0xF7	; 247
    1d30:	8c 93       	st	X, r24
		SET_BIT(TIMSK2,TIMSK2_OCIE2A);

#endif


	}
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <TIMER1_voidsetcompint.1349>:

#else
#error "WRONG PRAMATERS"
#endif
	}
	void TIMER1_voidsetcompint(void){
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
#if TIMER1_COMPINT==ENABLE
		SET_BIT(TIMSK1,TIMSK1_OCIE1A);
    1d40:	af e6       	ldi	r26, 0x6F	; 111
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	ef e6       	ldi	r30, 0x6F	; 111
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	82 60       	ori	r24, 0x02	; 2
    1d4c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK1,TIMSK1_OCIE1A);

#else
#error "WRONG PRAMATERS"
#endif
	}
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <TIMER1_voidsetoverflowint.1346>:
#else
#error "WRONG PRAMATERS"

#endif
	}
	void TIMER1_voidsetoverflowint(void){
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
#if TIMER1_OVINT==ENABLE
		SET_BIT(TIMSK1,TIMSK1_TOIE1);
    1d5c:	af e6       	ldi	r26, 0x6F	; 111
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	ef e6       	ldi	r30, 0x6F	; 111
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	81 60       	ori	r24, 0x01	; 1
    1d68:	8c 93       	st	X, r24
		SET_BIT(TIMSK1,TIMSK1_TOIE1);

#else
#error "WRONG PRAMATERS"
#endif
	}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <TIMER1_voidchooseprescaler.1343>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER1_voidchooseprescaler(void){
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
#if PRESCALE_MODE==SHUTDOWN_MODE
		CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    1d78:	a1 e8       	ldi	r26, 0x81	; 129
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e1 e8       	ldi	r30, 0x81	; 129
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	8e 7f       	andi	r24, 0xFE	; 254
    1d84:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    1d86:	a1 e8       	ldi	r26, 0x81	; 129
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e1 e8       	ldi	r30, 0x81	; 129
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	8d 7f       	andi	r24, 0xFD	; 253
    1d92:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    1d94:	a1 e8       	ldi	r26, 0x81	; 129
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e1 e8       	ldi	r30, 0x81	; 129
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8b 7f       	andi	r24, 0xFB	; 251
    1da0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);
#else
#error "WRONG PRAMATERS"

#endif
	}
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <TIMER1_voidchoosefastorphasepwmmodechanB.1340>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER1_voidchoosefastorphasepwmmodechanB(void){
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
#if FASTPWM_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
#elif FASTPWM_MODE==NONINVERTIING_MODE
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    1db0:	a0 e8       	ldi	r26, 0x80	; 128
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e0 e8       	ldi	r30, 0x80	; 128
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8f 7e       	andi	r24, 0xEF	; 239
    1dbc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    1dbe:	a0 e8       	ldi	r26, 0x80	; 128
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e0 e8       	ldi	r30, 0x80	; 128
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 62       	ori	r24, 0x20	; 32
    1dca:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <TIMER1_voidchoosefastorphasepwmmodechanA.1337>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER1_voidchoosefastorphasepwmmodechanA(void){
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
#if FASTORPHASEPWM_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    1dda:	a0 e8       	ldi	r26, 0x80	; 128
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e0 e8       	ldi	r30, 0x80	; 128
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	8f 7b       	andi	r24, 0xBF	; 191
    1de6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1de8:	a0 e8       	ldi	r26, 0x80	; 128
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e0 e8       	ldi	r30, 0x80	; 128
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	8f 77       	andi	r24, 0x7F	; 127
    1df4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <TIMER1_voidchoosecmpmodechanB.1334>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER1_voidchoosecmpmodechanB(void){
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
#if COMP_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
#elif COMP_MODE==TOOGLE_MODE
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    1e04:	a0 e8       	ldi	r26, 0x80	; 128
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e0 e8       	ldi	r30, 0x80	; 128
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 61       	ori	r24, 0x10	; 16
    1e10:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e0 e8       	ldi	r30, 0x80	; 128
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8f 7d       	andi	r24, 0xDF	; 223
    1e1e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <TIMER1_voidchoosecmpmodechanA.1331>:
#endif
		}


	}
	void TIMER1_voidchoosecmpmodechanA(void){
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
#if  COMP_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
#elif COMP_MODE==TOOGLE_MODE
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    1e2e:	a0 e8       	ldi	r26, 0x80	; 128
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e0 e8       	ldi	r30, 0x80	; 128
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	80 64       	ori	r24, 0x40	; 64
    1e3a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    1e3c:	a0 e8       	ldi	r26, 0x80	; 128
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e0 e8       	ldi	r30, 0x80	; 128
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	8f 77       	andi	r24, 0x7F	; 127
    1e48:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <TIMER0_voidchooseprescaler.1322>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER0_voidchooseprescaler(void){
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
#if PRESCALE_MODE==SHUTDOWN_MODE
		CLEAR_BIT(TCCR0B,TCCR0B_CS00);
    1e58:	a5 e4       	ldi	r26, 0x45	; 69
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e4       	ldi	r30, 0x45	; 69
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8e 7f       	andi	r24, 0xFE	; 254
    1e64:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0B,TCCR0B_CS01);
    1e66:	a5 e4       	ldi	r26, 0x45	; 69
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e5 e4       	ldi	r30, 0x45	; 69
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8d 7f       	andi	r24, 0xFD	; 253
    1e72:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0B,TCCR0B_CS02);
    1e74:	a5 e4       	ldi	r26, 0x45	; 69
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e4       	ldi	r30, 0x45	; 69
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8b 7f       	andi	r24, 0xFB	; 251
    1e80:	8c 93       	st	X, r24
#error "WRONG PRAMATERS"
#endif
		}


	}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <TIMER0_voidsetcompint.1328>:

#else
#error "WRONG PRAMATERS"
#endif
		}
		void TIMER0_voidsetcompint(void){
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_COMPINT==ENABLE
			SET_BIT(TIMSK0,TIMSK0_OCIE0A);
    1e90:	ae e6       	ldi	r26, 0x6E	; 110
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ee e6       	ldi	r30, 0x6E	; 110
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	82 60       	ori	r24, 0x02	; 2
    1e9c:	8c 93       	st	X, r24
			CLEAR_BIT(TIMSK0,TIMSK0_OCIE0A);

#else
#error "WRONG PRAMATERS"
#endif
		}
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <TIMER0_voidsetoverflowint.1325>:
		SET_BIT(TCCR0B,TCCR0B_CS02);
#else
#error "WRONG PRAMATERS"

#endif
		void TIMER0_voidsetoverflowint(void){
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_OVINT==ENABLE
			SET_BIT(TIMSK0,TIMSK0_TOIE0);
    1eac:	ae e6       	ldi	r26, 0x6E	; 110
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ee e6       	ldi	r30, 0x6E	; 110
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	81 60       	ori	r24, 0x01	; 1
    1eb8:	8c 93       	st	X, r24
			SET_BIT(TIMSK0,TIMSK0_TOIE0);

#else
#error "WRONG PRAMATERS"
#endif
		}
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <TIMER0_voidchoosefastorphasepwmmodechanB.1319>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER0_voidchoosefastorphasepwmmodechanB(void){
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
#if FASTPWM_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR0A,TCCR0A_COM0B0);
		CLEAR_BIT(TCCR0A,TCCR0A_COM0B1);
#elif FASTPWM_MODE==NONINVERTIING_MODE
		CLEAR_BIT(TCCR0A,TCCR0A_COM0B0);
    1ec8:	a4 e4       	ldi	r26, 0x44	; 68
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e4 e4       	ldi	r30, 0x44	; 68
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	8f 7e       	andi	r24, 0xEF	; 239
    1ed4:	8c 93       	st	X, r24
		SET_BIT(TCCR0A,TCCR0A_COM0B1);
    1ed6:	a4 e4       	ldi	r26, 0x44	; 68
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e4 e4       	ldi	r30, 0x44	; 68
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	80 62       	ori	r24, 0x20	; 32
    1ee2:	8c 93       	st	X, r24
		SET_BIT(TCCR0A,TCCR0A_COM0B1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <TIMER0_voidchoosefastorphasepwmmodechanA.1316>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER0_voidchoosefastorphasepwmmodechanA(void){
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
#if FASTORPHASEPWM_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR0A,TCCR0A_COM0A0);
    1ef2:	a4 e4       	ldi	r26, 0x44	; 68
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e4 e4       	ldi	r30, 0x44	; 68
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8f 7b       	andi	r24, 0xBF	; 191
    1efe:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0A,TCCR0A_COM0A1);
    1f00:	a4 e4       	ldi	r26, 0x44	; 68
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e4 e4       	ldi	r30, 0x44	; 68
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	8f 77       	andi	r24, 0x7F	; 127
    1f0c:	8c 93       	st	X, r24
		SET_BIT(TCCR0A,TCCR0A_COM0A1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <TIMER0_voidchoosecmpmodechanB.1313>:
#else
#error "WRONG PRAMATERS"
#endif

	}
	void TIMER0_voidchoosecmpmodechanB(void){
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
#if COMP_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR0A,TCCR0A_COM0B0);
		CLEAR_BIT(TCCR0A,TCCR0A_COM0B1);
#elif COMP_MODE==TOOGLE_MODE
		SET_BIT(TCCR0A,TCCR0A_COM0B0);
    1f1c:	a4 e4       	ldi	r26, 0x44	; 68
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e4 e4       	ldi	r30, 0x44	; 68
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 61       	ori	r24, 0x10	; 16
    1f28:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0A,TCCR0A_COM0B1);
    1f2a:	a4 e4       	ldi	r26, 0x44	; 68
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e4 e4       	ldi	r30, 0x44	; 68
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	8f 7d       	andi	r24, 0xDF	; 223
    1f36:	8c 93       	st	X, r24
		SET_BIT(TCCR0A,TCCR0A_COM0B1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <TIMER0_voidchoosecmpmodechanA.1310>:
#else
#error"WRONG PRAMATERS"
#endif

	}
	void TIMER0_voidchoosecmpmodechanA(void){
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
#if  COMP_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR0A,TCCR0A_COM0A0);
		CLEAR_BIT(TCCR0A,TCCR0A_COM0A1);
#elif COMP_MODE==TOOGLE_MODE
		SET_BIT(TCCR0A,TCCR0A_COM0A0);
    1f46:	a4 e4       	ldi	r26, 0x44	; 68
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e4 e4       	ldi	r30, 0x44	; 68
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	80 64       	ori	r24, 0x40	; 64
    1f52:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0A,TCCR0A_COM0A1);
    1f54:	a4 e4       	ldi	r26, 0x44	; 68
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e4 e4       	ldi	r30, 0x44	; 68
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	8f 77       	andi	r24, 0x7F	; 127
    1f60:	8c 93       	st	X, r24
		SET_BIT(TCCR0A,TCCR0A_COM0A1);
#else
#error "WRONG PRAMATERS"
#endif

	}
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <TIMER1_voidinit.1307>:
	CLEAR_BIT(TCCR0A,TCCR0A_WGM01);
	SET_BIT(TCCR0A,TCCR0B_WGM02);
#else
#error"WRONG PRAMATERS"
#endif
	void TIMER1_voidinit(void){
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
#if TIMER1_MODE==NORMAL_MODE
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1f70:	a0 e8       	ldi	r26, 0x80	; 128
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e0 e8       	ldi	r30, 0x80	; 128
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	8e 7f       	andi	r24, 0xFE	; 254
    1f7c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    1f7e:	a0 e8       	ldi	r26, 0x80	; 128
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e0 e8       	ldi	r30, 0x80	; 128
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8d 7f       	andi	r24, 0xFD	; 253
    1f8a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1B_WGM12);
    1f8c:	a0 e8       	ldi	r26, 0x80	; 128
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e0 e8       	ldi	r30, 0x80	; 128
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	87 7f       	andi	r24, 0xF7	; 247
    1f98:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1B_WGM13);
    1f9a:	a0 e8       	ldi	r26, 0x80	; 128
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e0 e8       	ldi	r30, 0x80	; 128
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8f 7e       	andi	r24, 0xEF	; 239
    1fa6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1B_WGM13);
#else
#error"WRONG PRAMATERS"
#endif

	}
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <TIMER_u8choosecompmode>:
		}
		return Local_u8errorstate;
	}

}
u8 TIMER_u8choosecompmode(u8 copy_u8timerno,u8 copy_channelno,u8 copy_u8mode){
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	60 97       	sbiw	r28, 0x10	; 16
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
    1fc4:	6b 83       	std	Y+3, r22	; 0x03
    1fc6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Locla_u8errorstate=OK;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8timerno==TIMER0){
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	88 23       	and	r24, r24
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <TIMER_u8choosecompmode+0x24>
    1fd0:	c9 c0       	rjmp	.+402    	; 0x2164 <TIMER_u8choosecompmode+0x1b6>
		if(copy_channelno==CHAN_A){
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	88 23       	and	r24, r24
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <TIMER_u8choosecompmode+0x2c>
    1fd8:	5f c0       	rjmp	.+190    	; 0x2098 <TIMER_u8choosecompmode+0xea>
			switch(copy_u8mode){
    1fda:	8c 81       	ldd	r24, Y+4	; 0x04
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	38 8b       	std	Y+16, r19	; 0x10
    1fe2:	2f 87       	std	Y+15, r18	; 0x0f
    1fe4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe6:	98 89       	ldd	r25, Y+16	; 0x10
    1fe8:	82 30       	cpi	r24, 0x02	; 2
    1fea:	91 05       	cpc	r25, r1
    1fec:	29 f1       	breq	.+74     	; 0x2038 <TIMER_u8choosecompmode+0x8a>
    1fee:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ff0:	38 89       	ldd	r19, Y+16	; 0x10
    1ff2:	23 30       	cpi	r18, 0x03	; 3
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	34 f4       	brge	.+12     	; 0x2004 <TIMER_u8choosecompmode+0x56>
    1ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ffa:	98 89       	ldd	r25, Y+16	; 0x10
    1ffc:	81 30       	cpi	r24, 0x01	; 1
    1ffe:	91 05       	cpc	r25, r1
    2000:	61 f0       	breq	.+24     	; 0x201a <TIMER_u8choosecompmode+0x6c>
    2002:	47 c0       	rjmp	.+142    	; 0x2092 <TIMER_u8choosecompmode+0xe4>
    2004:	2f 85       	ldd	r18, Y+15	; 0x0f
    2006:	38 89       	ldd	r19, Y+16	; 0x10
    2008:	23 30       	cpi	r18, 0x03	; 3
    200a:	31 05       	cpc	r19, r1
    200c:	21 f1       	breq	.+72     	; 0x2056 <TIMER_u8choosecompmode+0xa8>
    200e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2010:	98 89       	ldd	r25, Y+16	; 0x10
    2012:	84 30       	cpi	r24, 0x04	; 4
    2014:	91 05       	cpc	r25, r1
    2016:	71 f1       	breq	.+92     	; 0x2074 <TIMER_u8choosecompmode+0xc6>
    2018:	3c c0       	rjmp	.+120    	; 0x2092 <TIMER_u8choosecompmode+0xe4>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_COM0A0);
    201a:	a4 e4       	ldi	r26, 0x44	; 68
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e4 e4       	ldi	r30, 0x44	; 68
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	8f 7b       	andi	r24, 0xBF	; 191
    2026:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_COM0A1);
    2028:	a4 e4       	ldi	r26, 0x44	; 68
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e4 e4       	ldi	r30, 0x44	; 68
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 77       	andi	r24, 0x7F	; 127
    2034:	8c 93       	st	X, r24
    2036:	32 c2       	rjmp	.+1124   	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case TOOGLE_MODE:
				SET_BIT(TCCR0A,TCCR0A_COM0A0);
    2038:	a4 e4       	ldi	r26, 0x44	; 68
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e4 e4       	ldi	r30, 0x44	; 68
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	80 64       	ori	r24, 0x40	; 64
    2044:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_COM0A1);
    2046:	a4 e4       	ldi	r26, 0x44	; 68
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e4 e4       	ldi	r30, 0x44	; 68
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	8f 77       	andi	r24, 0x7F	; 127
    2052:	8c 93       	st	X, r24
    2054:	23 c2       	rjmp	.+1094   	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case CLEAR_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_COM0A0);
    2056:	a4 e4       	ldi	r26, 0x44	; 68
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e4 e4       	ldi	r30, 0x44	; 68
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8f 7b       	andi	r24, 0xBF	; 191
    2062:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_COM0A1);
    2064:	a4 e4       	ldi	r26, 0x44	; 68
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e4 e4       	ldi	r30, 0x44	; 68
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	80 68       	ori	r24, 0x80	; 128
    2070:	8c 93       	st	X, r24
    2072:	14 c2       	rjmp	.+1064   	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case SET_MODE:
				SET_BIT(TCCR0A,TCCR0A_COM0A0);
    2074:	a4 e4       	ldi	r26, 0x44	; 68
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e4 e4       	ldi	r30, 0x44	; 68
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	80 64       	ori	r24, 0x40	; 64
    2080:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_COM0A1);
    2082:	a4 e4       	ldi	r26, 0x44	; 68
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e4 e4       	ldi	r30, 0x44	; 68
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	80 68       	ori	r24, 0x80	; 128
    208e:	8c 93       	st	X, r24
    2090:	05 c2       	rjmp	.+1034   	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			default: Locla_u8errorstate=NOK;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	02 c2       	rjmp	.+1028   	; 0x249c <TIMER_u8choosecompmode+0x4ee>
			}
		}
		else if(copy_channelno==CHAN_B){
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	09 f0       	breq	.+2      	; 0x20a0 <TIMER_u8choosecompmode+0xf2>
    209e:	5f c0       	rjmp	.+190    	; 0x215e <TIMER_u8choosecompmode+0x1b0>
			switch(copy_u8mode){
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	3e 87       	std	Y+14, r19	; 0x0e
    20a8:	2d 87       	std	Y+13, r18	; 0x0d
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	82 30       	cpi	r24, 0x02	; 2
    20b0:	91 05       	cpc	r25, r1
    20b2:	29 f1       	breq	.+74     	; 0x20fe <TIMER_u8choosecompmode+0x150>
    20b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    20b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    20b8:	23 30       	cpi	r18, 0x03	; 3
    20ba:	31 05       	cpc	r19, r1
    20bc:	34 f4       	brge	.+12     	; 0x20ca <TIMER_u8choosecompmode+0x11c>
    20be:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c2:	81 30       	cpi	r24, 0x01	; 1
    20c4:	91 05       	cpc	r25, r1
    20c6:	61 f0       	breq	.+24     	; 0x20e0 <TIMER_u8choosecompmode+0x132>
    20c8:	47 c0       	rjmp	.+142    	; 0x2158 <TIMER_u8choosecompmode+0x1aa>
    20ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    20cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    20ce:	23 30       	cpi	r18, 0x03	; 3
    20d0:	31 05       	cpc	r19, r1
    20d2:	21 f1       	breq	.+72     	; 0x211c <TIMER_u8choosecompmode+0x16e>
    20d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d8:	84 30       	cpi	r24, 0x04	; 4
    20da:	91 05       	cpc	r25, r1
    20dc:	71 f1       	breq	.+92     	; 0x213a <TIMER_u8choosecompmode+0x18c>
    20de:	3c c0       	rjmp	.+120    	; 0x2158 <TIMER_u8choosecompmode+0x1aa>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_COM0B0);
    20e0:	a4 e4       	ldi	r26, 0x44	; 68
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e4 e4       	ldi	r30, 0x44	; 68
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	8f 7e       	andi	r24, 0xEF	; 239
    20ec:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_COM0B1);
    20ee:	a4 e4       	ldi	r26, 0x44	; 68
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e4 e4       	ldi	r30, 0x44	; 68
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	8f 7d       	andi	r24, 0xDF	; 223
    20fa:	8c 93       	st	X, r24
    20fc:	cf c1       	rjmp	.+926    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case TOOGLE_MODE:
				SET_BIT(TCCR0A,TCCR0A_COM0B0);
    20fe:	a4 e4       	ldi	r26, 0x44	; 68
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e4 e4       	ldi	r30, 0x44	; 68
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	80 61       	ori	r24, 0x10	; 16
    210a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_COM0B1);
    210c:	a4 e4       	ldi	r26, 0x44	; 68
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e4 e4       	ldi	r30, 0x44	; 68
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	8f 7d       	andi	r24, 0xDF	; 223
    2118:	8c 93       	st	X, r24
    211a:	c0 c1       	rjmp	.+896    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case CLEAR_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_COM0B0);
    211c:	a4 e4       	ldi	r26, 0x44	; 68
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e4 e4       	ldi	r30, 0x44	; 68
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	8f 7e       	andi	r24, 0xEF	; 239
    2128:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_COM0B1);
    212a:	a4 e4       	ldi	r26, 0x44	; 68
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e4 e4       	ldi	r30, 0x44	; 68
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	80 62       	ori	r24, 0x20	; 32
    2136:	8c 93       	st	X, r24
    2138:	b1 c1       	rjmp	.+866    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case SET_MODE:
				SET_BIT(TCCR0A,TCCR0A_COM0B0);
    213a:	a4 e4       	ldi	r26, 0x44	; 68
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e4 e4       	ldi	r30, 0x44	; 68
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	80 61       	ori	r24, 0x10	; 16
    2146:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_COM0B1);
    2148:	a4 e4       	ldi	r26, 0x44	; 68
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e4 e4       	ldi	r30, 0x44	; 68
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	80 62       	ori	r24, 0x20	; 32
    2154:	8c 93       	st	X, r24
    2156:	a2 c1       	rjmp	.+836    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			default:Locla_u8errorstate=NOK;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	9f c1       	rjmp	.+830    	; 0x249c <TIMER_u8choosecompmode+0x4ee>

			}

		}
		else{
			Locla_u8errorstate=NOK;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	9c c1       	rjmp	.+824    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
		}
	}
	else if(copy_u8timerno==TIMER1){
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	09 f0       	breq	.+2      	; 0x216c <TIMER_u8choosecompmode+0x1be>
    216a:	c9 c0       	rjmp	.+402    	; 0x22fe <TIMER_u8choosecompmode+0x350>
		if(copy_channelno==CHAN_A){
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	88 23       	and	r24, r24
    2170:	09 f0       	breq	.+2      	; 0x2174 <TIMER_u8choosecompmode+0x1c6>
    2172:	5f c0       	rjmp	.+190    	; 0x2232 <TIMER_u8choosecompmode+0x284>
			switch(copy_u8mode){
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	3c 87       	std	Y+12, r19	; 0x0c
    217c:	2b 87       	std	Y+11, r18	; 0x0b
    217e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2180:	9c 85       	ldd	r25, Y+12	; 0x0c
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	91 05       	cpc	r25, r1
    2186:	29 f1       	breq	.+74     	; 0x21d2 <TIMER_u8choosecompmode+0x224>
    2188:	2b 85       	ldd	r18, Y+11	; 0x0b
    218a:	3c 85       	ldd	r19, Y+12	; 0x0c
    218c:	23 30       	cpi	r18, 0x03	; 3
    218e:	31 05       	cpc	r19, r1
    2190:	34 f4       	brge	.+12     	; 0x219e <TIMER_u8choosecompmode+0x1f0>
    2192:	8b 85       	ldd	r24, Y+11	; 0x0b
    2194:	9c 85       	ldd	r25, Y+12	; 0x0c
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	91 05       	cpc	r25, r1
    219a:	61 f0       	breq	.+24     	; 0x21b4 <TIMER_u8choosecompmode+0x206>
    219c:	47 c0       	rjmp	.+142    	; 0x222c <TIMER_u8choosecompmode+0x27e>
    219e:	2b 85       	ldd	r18, Y+11	; 0x0b
    21a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    21a2:	23 30       	cpi	r18, 0x03	; 3
    21a4:	31 05       	cpc	r19, r1
    21a6:	21 f1       	breq	.+72     	; 0x21f0 <TIMER_u8choosecompmode+0x242>
    21a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    21ac:	84 30       	cpi	r24, 0x04	; 4
    21ae:	91 05       	cpc	r25, r1
    21b0:	71 f1       	breq	.+92     	; 0x220e <TIMER_u8choosecompmode+0x260>
    21b2:	3c c0       	rjmp	.+120    	; 0x222c <TIMER_u8choosecompmode+0x27e>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    21b4:	a0 e8       	ldi	r26, 0x80	; 128
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 e8       	ldi	r30, 0x80	; 128
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8f 7b       	andi	r24, 0xBF	; 191
    21c0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    21c2:	a0 e8       	ldi	r26, 0x80	; 128
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e0 e8       	ldi	r30, 0x80	; 128
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	8f 77       	andi	r24, 0x7F	; 127
    21ce:	8c 93       	st	X, r24
    21d0:	65 c1       	rjmp	.+714    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case TOOGLE_MODE:
				SET_BIT(TCCR1A,TCCR1A_COM1A0);
    21d2:	a0 e8       	ldi	r26, 0x80	; 128
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e0 e8       	ldi	r30, 0x80	; 128
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	80 64       	ori	r24, 0x40	; 64
    21de:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    21e0:	a0 e8       	ldi	r26, 0x80	; 128
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e0 e8       	ldi	r30, 0x80	; 128
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	8f 77       	andi	r24, 0x7F	; 127
    21ec:	8c 93       	st	X, r24
    21ee:	56 c1       	rjmp	.+684    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;

			case CLEAR_MODE:
				CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    21f0:	a0 e8       	ldi	r26, 0x80	; 128
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e0 e8       	ldi	r30, 0x80	; 128
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8f 7b       	andi	r24, 0xBF	; 191
    21fc:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1A1);
    21fe:	a0 e8       	ldi	r26, 0x80	; 128
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e0 e8       	ldi	r30, 0x80	; 128
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	80 68       	ori	r24, 0x80	; 128
    220a:	8c 93       	st	X, r24
    220c:	47 c1       	rjmp	.+654    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case SET_MODE:
				SET_BIT(TCCR1A,TCCR1A_COM1A0);
    220e:	a0 e8       	ldi	r26, 0x80	; 128
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e0 e8       	ldi	r30, 0x80	; 128
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	80 64       	ori	r24, 0x40	; 64
    221a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1A1);
    221c:	a0 e8       	ldi	r26, 0x80	; 128
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e0 e8       	ldi	r30, 0x80	; 128
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	80 68       	ori	r24, 0x80	; 128
    2228:	8c 93       	st	X, r24
    222a:	38 c1       	rjmp	.+624    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			default:Locla_u8errorstate=NOK;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	35 c1       	rjmp	.+618    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
			}
		}
		else if(copy_channelno==CHAN_B){
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	81 30       	cpi	r24, 0x01	; 1
    2236:	09 f0       	breq	.+2      	; 0x223a <TIMER_u8choosecompmode+0x28c>
    2238:	5f c0       	rjmp	.+190    	; 0x22f8 <TIMER_u8choosecompmode+0x34a>
			switch(copy_u8mode){
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	3a 87       	std	Y+10, r19	; 0x0a
    2242:	29 87       	std	Y+9, r18	; 0x09
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	82 30       	cpi	r24, 0x02	; 2
    224a:	91 05       	cpc	r25, r1
    224c:	29 f1       	breq	.+74     	; 0x2298 <TIMER_u8choosecompmode+0x2ea>
    224e:	29 85       	ldd	r18, Y+9	; 0x09
    2250:	3a 85       	ldd	r19, Y+10	; 0x0a
    2252:	23 30       	cpi	r18, 0x03	; 3
    2254:	31 05       	cpc	r19, r1
    2256:	34 f4       	brge	.+12     	; 0x2264 <TIMER_u8choosecompmode+0x2b6>
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	91 05       	cpc	r25, r1
    2260:	61 f0       	breq	.+24     	; 0x227a <TIMER_u8choosecompmode+0x2cc>
    2262:	47 c0       	rjmp	.+142    	; 0x22f2 <TIMER_u8choosecompmode+0x344>
    2264:	29 85       	ldd	r18, Y+9	; 0x09
    2266:	3a 85       	ldd	r19, Y+10	; 0x0a
    2268:	23 30       	cpi	r18, 0x03	; 3
    226a:	31 05       	cpc	r19, r1
    226c:	21 f1       	breq	.+72     	; 0x22b6 <TIMER_u8choosecompmode+0x308>
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	84 30       	cpi	r24, 0x04	; 4
    2274:	91 05       	cpc	r25, r1
    2276:	71 f1       	breq	.+92     	; 0x22d4 <TIMER_u8choosecompmode+0x326>
    2278:	3c c0       	rjmp	.+120    	; 0x22f2 <TIMER_u8choosecompmode+0x344>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    227a:	a0 e8       	ldi	r26, 0x80	; 128
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e0 e8       	ldi	r30, 0x80	; 128
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	8f 7e       	andi	r24, 0xEF	; 239
    2286:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    2288:	a0 e8       	ldi	r26, 0x80	; 128
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e0 e8       	ldi	r30, 0x80	; 128
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8f 7d       	andi	r24, 0xDF	; 223
    2294:	8c 93       	st	X, r24
    2296:	02 c1       	rjmp	.+516    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case TOOGLE_MODE:
				SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2298:	a0 e8       	ldi	r26, 0x80	; 128
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e0 e8       	ldi	r30, 0x80	; 128
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	80 61       	ori	r24, 0x10	; 16
    22a4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    22a6:	a0 e8       	ldi	r26, 0x80	; 128
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e0 e8       	ldi	r30, 0x80	; 128
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8f 7d       	andi	r24, 0xDF	; 223
    22b2:	8c 93       	st	X, r24
    22b4:	f3 c0       	rjmp	.+486    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case CLEAR_MODE:
				CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    22b6:	a0 e8       	ldi	r26, 0x80	; 128
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e0 e8       	ldi	r30, 0x80	; 128
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	8f 7e       	andi	r24, 0xEF	; 239
    22c2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1B1);
    22c4:	a0 e8       	ldi	r26, 0x80	; 128
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e0 e8       	ldi	r30, 0x80	; 128
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	80 62       	ori	r24, 0x20	; 32
    22d0:	8c 93       	st	X, r24
    22d2:	e4 c0       	rjmp	.+456    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case SET_MODE:
				SET_BIT(TCCR1A,TCCR1A_COM1B0);
    22d4:	a0 e8       	ldi	r26, 0x80	; 128
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e0 e8       	ldi	r30, 0x80	; 128
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	80 61       	ori	r24, 0x10	; 16
    22e0:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1B1);
    22e2:	a0 e8       	ldi	r26, 0x80	; 128
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e0 e8       	ldi	r30, 0x80	; 128
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	80 62       	ori	r24, 0x20	; 32
    22ee:	8c 93       	st	X, r24
    22f0:	d5 c0       	rjmp	.+426    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			default:Locla_u8errorstate=NOK;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	d2 c0       	rjmp	.+420    	; 0x249c <TIMER_u8choosecompmode+0x4ee>


			}
		}
		else{
			Locla_u8errorstate=NOK;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	cf c0       	rjmp	.+414    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
		}
	}
	else if(copy_u8timerno==TIMER2){
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	82 30       	cpi	r24, 0x02	; 2
    2302:	09 f0       	breq	.+2      	; 0x2306 <TIMER_u8choosecompmode+0x358>
    2304:	c9 c0       	rjmp	.+402    	; 0x2498 <TIMER_u8choosecompmode+0x4ea>
		if(copy_channelno==CHAN_A){
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	88 23       	and	r24, r24
    230a:	09 f0       	breq	.+2      	; 0x230e <TIMER_u8choosecompmode+0x360>
    230c:	5f c0       	rjmp	.+190    	; 0x23cc <TIMER_u8choosecompmode+0x41e>
			switch(copy_u8mode){
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	38 87       	std	Y+8, r19	; 0x08
    2316:	2f 83       	std	Y+7, r18	; 0x07
    2318:	8f 81       	ldd	r24, Y+7	; 0x07
    231a:	98 85       	ldd	r25, Y+8	; 0x08
    231c:	82 30       	cpi	r24, 0x02	; 2
    231e:	91 05       	cpc	r25, r1
    2320:	29 f1       	breq	.+74     	; 0x236c <TIMER_u8choosecompmode+0x3be>
    2322:	2f 81       	ldd	r18, Y+7	; 0x07
    2324:	38 85       	ldd	r19, Y+8	; 0x08
    2326:	23 30       	cpi	r18, 0x03	; 3
    2328:	31 05       	cpc	r19, r1
    232a:	34 f4       	brge	.+12     	; 0x2338 <TIMER_u8choosecompmode+0x38a>
    232c:	8f 81       	ldd	r24, Y+7	; 0x07
    232e:	98 85       	ldd	r25, Y+8	; 0x08
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	91 05       	cpc	r25, r1
    2334:	61 f0       	breq	.+24     	; 0x234e <TIMER_u8choosecompmode+0x3a0>
    2336:	47 c0       	rjmp	.+142    	; 0x23c6 <TIMER_u8choosecompmode+0x418>
    2338:	2f 81       	ldd	r18, Y+7	; 0x07
    233a:	38 85       	ldd	r19, Y+8	; 0x08
    233c:	23 30       	cpi	r18, 0x03	; 3
    233e:	31 05       	cpc	r19, r1
    2340:	21 f1       	breq	.+72     	; 0x238a <TIMER_u8choosecompmode+0x3dc>
    2342:	8f 81       	ldd	r24, Y+7	; 0x07
    2344:	98 85       	ldd	r25, Y+8	; 0x08
    2346:	84 30       	cpi	r24, 0x04	; 4
    2348:	91 05       	cpc	r25, r1
    234a:	71 f1       	breq	.+92     	; 0x23a8 <TIMER_u8choosecompmode+0x3fa>
    234c:	3c c0       	rjmp	.+120    	; 0x23c6 <TIMER_u8choosecompmode+0x418>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B0);
    234e:	a0 eb       	ldi	r26, 0xB0	; 176
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e0 eb       	ldi	r30, 0xB0	; 176
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8f 7e       	andi	r24, 0xEF	; 239
    235a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B1);
    235c:	a0 eb       	ldi	r26, 0xB0	; 176
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e0 eb       	ldi	r30, 0xB0	; 176
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	8f 7d       	andi	r24, 0xDF	; 223
    2368:	8c 93       	st	X, r24
    236a:	98 c0       	rjmp	.+304    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case TOOGLE_MODE:
				SET_BIT(TCCR2A,TCCR2A_COM2B0);
    236c:	a0 eb       	ldi	r26, 0xB0	; 176
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e0 eb       	ldi	r30, 0xB0	; 176
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 61       	ori	r24, 0x10	; 16
    2378:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B1);
    237a:	a0 eb       	ldi	r26, 0xB0	; 176
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e0 eb       	ldi	r30, 0xB0	; 176
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	8f 7d       	andi	r24, 0xDF	; 223
    2386:	8c 93       	st	X, r24
    2388:	89 c0       	rjmp	.+274    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case CLEAR_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B0);
    238a:	a0 eb       	ldi	r26, 0xB0	; 176
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e0 eb       	ldi	r30, 0xB0	; 176
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	8f 7e       	andi	r24, 0xEF	; 239
    2396:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_COM2B1);
    2398:	a0 eb       	ldi	r26, 0xB0	; 176
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e0 eb       	ldi	r30, 0xB0	; 176
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	80 62       	ori	r24, 0x20	; 32
    23a4:	8c 93       	st	X, r24
    23a6:	7a c0       	rjmp	.+244    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case SET_MODE:
				SET_BIT(TCCR2A,TCCR2A_COM2B0);
    23a8:	a0 eb       	ldi	r26, 0xB0	; 176
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e0 eb       	ldi	r30, 0xB0	; 176
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	80 61       	ori	r24, 0x10	; 16
    23b4:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_COM2B1);
    23b6:	a0 eb       	ldi	r26, 0xB0	; 176
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e0 eb       	ldi	r30, 0xB0	; 176
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	80 62       	ori	r24, 0x20	; 32
    23c2:	8c 93       	st	X, r24
    23c4:	6b c0       	rjmp	.+214    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			default:Locla_u8errorstate=NOK;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	68 c0       	rjmp	.+208    	; 0x249c <TIMER_u8choosecompmode+0x4ee>

			}
		}
		else if(copy_channelno==CHAN_B){
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	81 30       	cpi	r24, 0x01	; 1
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <TIMER_u8choosecompmode+0x426>
    23d2:	5f c0       	rjmp	.+190    	; 0x2492 <TIMER_u8choosecompmode+0x4e4>
			switch(copy_u8mode){
    23d4:	8c 81       	ldd	r24, Y+4	; 0x04
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	3e 83       	std	Y+6, r19	; 0x06
    23dc:	2d 83       	std	Y+5, r18	; 0x05
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
    23e0:	9e 81       	ldd	r25, Y+6	; 0x06
    23e2:	82 30       	cpi	r24, 0x02	; 2
    23e4:	91 05       	cpc	r25, r1
    23e6:	29 f1       	breq	.+74     	; 0x2432 <TIMER_u8choosecompmode+0x484>
    23e8:	2d 81       	ldd	r18, Y+5	; 0x05
    23ea:	3e 81       	ldd	r19, Y+6	; 0x06
    23ec:	23 30       	cpi	r18, 0x03	; 3
    23ee:	31 05       	cpc	r19, r1
    23f0:	34 f4       	brge	.+12     	; 0x23fe <TIMER_u8choosecompmode+0x450>
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	91 05       	cpc	r25, r1
    23fa:	61 f0       	breq	.+24     	; 0x2414 <TIMER_u8choosecompmode+0x466>
    23fc:	47 c0       	rjmp	.+142    	; 0x248c <TIMER_u8choosecompmode+0x4de>
    23fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2400:	3e 81       	ldd	r19, Y+6	; 0x06
    2402:	23 30       	cpi	r18, 0x03	; 3
    2404:	31 05       	cpc	r19, r1
    2406:	21 f1       	breq	.+72     	; 0x2450 <TIMER_u8choosecompmode+0x4a2>
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	84 30       	cpi	r24, 0x04	; 4
    240e:	91 05       	cpc	r25, r1
    2410:	71 f1       	breq	.+92     	; 0x246e <TIMER_u8choosecompmode+0x4c0>
    2412:	3c c0       	rjmp	.+120    	; 0x248c <TIMER_u8choosecompmode+0x4de>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B0);
    2414:	a0 eb       	ldi	r26, 0xB0	; 176
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e0 eb       	ldi	r30, 0xB0	; 176
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	8f 7e       	andi	r24, 0xEF	; 239
    2420:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B1);
    2422:	a0 eb       	ldi	r26, 0xB0	; 176
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e0 eb       	ldi	r30, 0xB0	; 176
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8f 7d       	andi	r24, 0xDF	; 223
    242e:	8c 93       	st	X, r24
    2430:	35 c0       	rjmp	.+106    	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case TOOGLE_MODE:
				SET_BIT(TCCR2A,TCCR2A_COM2B0);
    2432:	a0 eb       	ldi	r26, 0xB0	; 176
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e0 eb       	ldi	r30, 0xB0	; 176
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	80 61       	ori	r24, 0x10	; 16
    243e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B1);
    2440:	a0 eb       	ldi	r26, 0xB0	; 176
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e0 eb       	ldi	r30, 0xB0	; 176
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	8f 7d       	andi	r24, 0xDF	; 223
    244c:	8c 93       	st	X, r24
    244e:	26 c0       	rjmp	.+76     	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case CLEAR_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B0);
    2450:	a0 eb       	ldi	r26, 0xB0	; 176
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e0 eb       	ldi	r30, 0xB0	; 176
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	8f 7e       	andi	r24, 0xEF	; 239
    245c:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_COM2B1);
    245e:	a0 eb       	ldi	r26, 0xB0	; 176
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e0 eb       	ldi	r30, 0xB0	; 176
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	80 62       	ori	r24, 0x20	; 32
    246a:	8c 93       	st	X, r24
    246c:	17 c0       	rjmp	.+46     	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			case SET_MODE:
				SET_BIT(TCCR2A,TCCR2A_COM2B0);
    246e:	a0 eb       	ldi	r26, 0xB0	; 176
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e0 eb       	ldi	r30, 0xB0	; 176
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	80 61       	ori	r24, 0x10	; 16
    247a:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_COM2B1);
    247c:	a0 eb       	ldi	r26, 0xB0	; 176
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e0 eb       	ldi	r30, 0xB0	; 176
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	80 62       	ori	r24, 0x20	; 32
    2488:	8c 93       	st	X, r24
    248a:	08 c0       	rjmp	.+16     	; 0x249c <TIMER_u8choosecompmode+0x4ee>
				break;
			default:Locla_u8errorstate=NOK;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	05 c0       	rjmp	.+10     	; 0x249c <TIMER_u8choosecompmode+0x4ee>


			}
		}
		else{
			Locla_u8errorstate=NOK;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	02 c0       	rjmp	.+4      	; 0x249c <TIMER_u8choosecompmode+0x4ee>
		}
	}
	else {
		Locla_u8errorstate=NOK;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Locla_u8errorstate;
    249c:	89 81       	ldd	r24, Y+1	; 0x01
}
    249e:	60 96       	adiw	r28, 0x10	; 16
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <TIMER_u8choosefastorphasemode>:
u8 TIMER_u8choosefastorphasemode(u8 copy_u8timerno,u8 copy_channelno,u8 copy_u8mode){
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	60 97       	sbiw	r28, 0x10	; 16
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	8a 83       	std	Y+2, r24	; 0x02
    24c6:	6b 83       	std	Y+3, r22	; 0x03
    24c8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errorstate=OK;
    24ca:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8timerno==TIMER0){
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	88 23       	and	r24, r24
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <TIMER_u8choosefastorphasemode+0x24>
    24d2:	ae c0       	rjmp	.+348    	; 0x2630 <TIMER_u8choosefastorphasemode+0x180>
		if(copy_channelno==CHAN_A){
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	88 23       	and	r24, r24
    24d8:	09 f0       	breq	.+2      	; 0x24dc <TIMER_u8choosefastorphasemode+0x2c>
    24da:	5f c0       	rjmp	.+190    	; 0x259a <TIMER_u8choosefastorphasemode+0xea>
			switch(copy_u8mode){
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	38 8b       	std	Y+16, r19	; 0x10
    24e4:	2f 87       	std	Y+15, r18	; 0x0f
    24e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e8:	98 89       	ldd	r25, Y+16	; 0x10
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	91 05       	cpc	r25, r1
    24ee:	29 f1       	breq	.+74     	; 0x253a <TIMER_u8choosefastorphasemode+0x8a>
    24f0:	2f 85       	ldd	r18, Y+15	; 0x0f
    24f2:	38 89       	ldd	r19, Y+16	; 0x10
    24f4:	23 30       	cpi	r18, 0x03	; 3
    24f6:	31 05       	cpc	r19, r1
    24f8:	34 f4       	brge	.+12     	; 0x2506 <TIMER_u8choosefastorphasemode+0x56>
    24fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fc:	98 89       	ldd	r25, Y+16	; 0x10
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	91 05       	cpc	r25, r1
    2502:	61 f0       	breq	.+24     	; 0x251c <TIMER_u8choosefastorphasemode+0x6c>
    2504:	47 c0       	rjmp	.+142    	; 0x2594 <TIMER_u8choosefastorphasemode+0xe4>
    2506:	2f 85       	ldd	r18, Y+15	; 0x0f
    2508:	38 89       	ldd	r19, Y+16	; 0x10
    250a:	23 30       	cpi	r18, 0x03	; 3
    250c:	31 05       	cpc	r19, r1
    250e:	21 f1       	breq	.+72     	; 0x2558 <TIMER_u8choosefastorphasemode+0xa8>
    2510:	8f 85       	ldd	r24, Y+15	; 0x0f
    2512:	98 89       	ldd	r25, Y+16	; 0x10
    2514:	84 30       	cpi	r24, 0x04	; 4
    2516:	91 05       	cpc	r25, r1
    2518:	71 f1       	breq	.+92     	; 0x2576 <TIMER_u8choosefastorphasemode+0xc6>
    251a:	3c c0       	rjmp	.+120    	; 0x2594 <TIMER_u8choosefastorphasemode+0xe4>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_COM0A0);
    251c:	a4 e4       	ldi	r26, 0x44	; 68
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e4 e4       	ldi	r30, 0x44	; 68
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	8f 7b       	andi	r24, 0xBF	; 191
    2528:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_COM0A1);
    252a:	a4 e4       	ldi	r26, 0x44	; 68
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e4 e4       	ldi	r30, 0x44	; 68
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	8f 77       	andi	r24, 0x7F	; 127
    2536:	8c 93       	st	X, r24
    2538:	e1 c1       	rjmp	.+962    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case SECOND_MODE:
				SET_BIT(TCCR0A,TCCR0A_COM0A0);
    253a:	a4 e4       	ldi	r26, 0x44	; 68
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e4 e4       	ldi	r30, 0x44	; 68
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	80 64       	ori	r24, 0x40	; 64
    2546:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_COM0A1);
    2548:	a4 e4       	ldi	r26, 0x44	; 68
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e4 e4       	ldi	r30, 0x44	; 68
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	8f 77       	andi	r24, 0x7F	; 127
    2554:	8c 93       	st	X, r24
    2556:	d2 c1       	rjmp	.+932    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case NONINVERTING_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_COM0A0);
    2558:	a4 e4       	ldi	r26, 0x44	; 68
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e4 e4       	ldi	r30, 0x44	; 68
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	8f 7b       	andi	r24, 0xBF	; 191
    2564:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_COM0A1);
    2566:	a4 e4       	ldi	r26, 0x44	; 68
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e4 e4       	ldi	r30, 0x44	; 68
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	80 68       	ori	r24, 0x80	; 128
    2572:	8c 93       	st	X, r24
    2574:	c3 c1       	rjmp	.+902    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case INVERTING_MODE:
				SET_BIT(TCCR0A,TCCR0A_COM0A0);
    2576:	a4 e4       	ldi	r26, 0x44	; 68
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e4 e4       	ldi	r30, 0x44	; 68
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	80 64       	ori	r24, 0x40	; 64
    2582:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_COM0A1);
    2584:	a4 e4       	ldi	r26, 0x44	; 68
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e4 e4       	ldi	r30, 0x44	; 68
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	80 68       	ori	r24, 0x80	; 128
    2590:	8c 93       	st	X, r24
    2592:	b4 c1       	rjmp	.+872    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			default: Local_u8errorstate=NOK;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	b1 c1       	rjmp	.+866    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>

			}
		}
		else if(copy_channelno==CHAN_B){
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	09 f0       	breq	.+2      	; 0x25a2 <TIMER_u8choosefastorphasemode+0xf2>
    25a0:	44 c0       	rjmp	.+136    	; 0x262a <TIMER_u8choosefastorphasemode+0x17a>
			switch(copy_u8mode){
    25a2:	8c 81       	ldd	r24, Y+4	; 0x04
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	3e 87       	std	Y+14, r19	; 0x0e
    25aa:	2d 87       	std	Y+13, r18	; 0x0d
    25ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b0:	83 30       	cpi	r24, 0x03	; 3
    25b2:	91 05       	cpc	r25, r1
    25b4:	c9 f0       	breq	.+50     	; 0x25e8 <TIMER_u8choosefastorphasemode+0x138>
    25b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    25b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    25ba:	24 30       	cpi	r18, 0x04	; 4
    25bc:	31 05       	cpc	r19, r1
    25be:	19 f1       	breq	.+70     	; 0x2606 <TIMER_u8choosefastorphasemode+0x156>
    25c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c4:	81 30       	cpi	r24, 0x01	; 1
    25c6:	91 05       	cpc	r25, r1
    25c8:	69 f5       	brne	.+90     	; 0x2624 <TIMER_u8choosefastorphasemode+0x174>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_COM0B0);
    25ca:	a4 e4       	ldi	r26, 0x44	; 68
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e4 e4       	ldi	r30, 0x44	; 68
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	8f 7e       	andi	r24, 0xEF	; 239
    25d6:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0A,TCCR0A_COM0B1);
    25d8:	a4 e4       	ldi	r26, 0x44	; 68
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e4 e4       	ldi	r30, 0x44	; 68
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	8f 7d       	andi	r24, 0xDF	; 223
    25e4:	8c 93       	st	X, r24
    25e6:	8a c1       	rjmp	.+788    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case NONINVERTING_MODE:
				CLEAR_BIT(TCCR0A,TCCR0A_COM0B0);
    25e8:	a4 e4       	ldi	r26, 0x44	; 68
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e4 e4       	ldi	r30, 0x44	; 68
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	8f 7e       	andi	r24, 0xEF	; 239
    25f4:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_COM0B1);
    25f6:	a4 e4       	ldi	r26, 0x44	; 68
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e4 e4       	ldi	r30, 0x44	; 68
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	80 62       	ori	r24, 0x20	; 32
    2602:	8c 93       	st	X, r24
    2604:	7b c1       	rjmp	.+758    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case INVERTING_MODE:
				SET_BIT(TCCR0A,TCCR0A_COM0B0);
    2606:	a4 e4       	ldi	r26, 0x44	; 68
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e4 e4       	ldi	r30, 0x44	; 68
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	80 61       	ori	r24, 0x10	; 16
    2612:	8c 93       	st	X, r24
				SET_BIT(TCCR0A,TCCR0A_COM0B1);
    2614:	a4 e4       	ldi	r26, 0x44	; 68
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e4 e4       	ldi	r30, 0x44	; 68
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	80 62       	ori	r24, 0x20	; 32
    2620:	8c 93       	st	X, r24
    2622:	6c c1       	rjmp	.+728    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			default:Local_u8errorstate=NOK;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	69 c1       	rjmp	.+722    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>


			}
		}
		else{
			Local_u8errorstate=NOK;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	66 c1       	rjmp	.+716    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
		}
	}
	else if(copy_u8timerno==TIMER1){
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	81 30       	cpi	r24, 0x01	; 1
    2634:	09 f0       	breq	.+2      	; 0x2638 <TIMER_u8choosefastorphasemode+0x188>
    2636:	ae c0       	rjmp	.+348    	; 0x2794 <TIMER_u8choosefastorphasemode+0x2e4>
		if(copy_channelno==CHAN_A){
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	88 23       	and	r24, r24
    263c:	09 f0       	breq	.+2      	; 0x2640 <TIMER_u8choosefastorphasemode+0x190>
    263e:	5f c0       	rjmp	.+190    	; 0x26fe <TIMER_u8choosefastorphasemode+0x24e>
			switch(copy_u8mode){
    2640:	8c 81       	ldd	r24, Y+4	; 0x04
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	3c 87       	std	Y+12, r19	; 0x0c
    2648:	2b 87       	std	Y+11, r18	; 0x0b
    264a:	8b 85       	ldd	r24, Y+11	; 0x0b
    264c:	9c 85       	ldd	r25, Y+12	; 0x0c
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	91 05       	cpc	r25, r1
    2652:	29 f1       	breq	.+74     	; 0x269e <TIMER_u8choosefastorphasemode+0x1ee>
    2654:	2b 85       	ldd	r18, Y+11	; 0x0b
    2656:	3c 85       	ldd	r19, Y+12	; 0x0c
    2658:	23 30       	cpi	r18, 0x03	; 3
    265a:	31 05       	cpc	r19, r1
    265c:	34 f4       	brge	.+12     	; 0x266a <TIMER_u8choosefastorphasemode+0x1ba>
    265e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2660:	9c 85       	ldd	r25, Y+12	; 0x0c
    2662:	81 30       	cpi	r24, 0x01	; 1
    2664:	91 05       	cpc	r25, r1
    2666:	61 f0       	breq	.+24     	; 0x2680 <TIMER_u8choosefastorphasemode+0x1d0>
    2668:	47 c0       	rjmp	.+142    	; 0x26f8 <TIMER_u8choosefastorphasemode+0x248>
    266a:	2b 85       	ldd	r18, Y+11	; 0x0b
    266c:	3c 85       	ldd	r19, Y+12	; 0x0c
    266e:	23 30       	cpi	r18, 0x03	; 3
    2670:	31 05       	cpc	r19, r1
    2672:	21 f1       	breq	.+72     	; 0x26bc <TIMER_u8choosefastorphasemode+0x20c>
    2674:	8b 85       	ldd	r24, Y+11	; 0x0b
    2676:	9c 85       	ldd	r25, Y+12	; 0x0c
    2678:	84 30       	cpi	r24, 0x04	; 4
    267a:	91 05       	cpc	r25, r1
    267c:	71 f1       	breq	.+92     	; 0x26da <TIMER_u8choosefastorphasemode+0x22a>
    267e:	3c c0       	rjmp	.+120    	; 0x26f8 <TIMER_u8choosefastorphasemode+0x248>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2680:	a0 e8       	ldi	r26, 0x80	; 128
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e0 e8       	ldi	r30, 0x80	; 128
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	8f 7b       	andi	r24, 0xBF	; 191
    268c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    268e:	a0 e8       	ldi	r26, 0x80	; 128
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e0 e8       	ldi	r30, 0x80	; 128
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	8f 77       	andi	r24, 0x7F	; 127
    269a:	8c 93       	st	X, r24
    269c:	2f c1       	rjmp	.+606    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case SECOND_MODE:
				SET_BIT(TCCR1A,TCCR1A_COM1A0);
    269e:	a0 e8       	ldi	r26, 0x80	; 128
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e0 e8       	ldi	r30, 0x80	; 128
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	80 64       	ori	r24, 0x40	; 64
    26aa:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    26ac:	a0 e8       	ldi	r26, 0x80	; 128
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	e0 e8       	ldi	r30, 0x80	; 128
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	8f 77       	andi	r24, 0x7F	; 127
    26b8:	8c 93       	st	X, r24
    26ba:	20 c1       	rjmp	.+576    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case NONINVERTING_MODE:
				CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    26bc:	a0 e8       	ldi	r26, 0x80	; 128
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e0 e8       	ldi	r30, 0x80	; 128
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	8f 7b       	andi	r24, 0xBF	; 191
    26c8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1A1);
    26ca:	a0 e8       	ldi	r26, 0x80	; 128
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e0 e8       	ldi	r30, 0x80	; 128
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	80 68       	ori	r24, 0x80	; 128
    26d6:	8c 93       	st	X, r24
    26d8:	11 c1       	rjmp	.+546    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case INVERTING_MODE:
				SET_BIT(TCCR1A,TCCR1A_COM1A0);
    26da:	a0 e8       	ldi	r26, 0x80	; 128
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e0 e8       	ldi	r30, 0x80	; 128
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	80 64       	ori	r24, 0x40	; 64
    26e6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1A1);
    26e8:	a0 e8       	ldi	r26, 0x80	; 128
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e0 e8       	ldi	r30, 0x80	; 128
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	80 68       	ori	r24, 0x80	; 128
    26f4:	8c 93       	st	X, r24
    26f6:	02 c1       	rjmp	.+516    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			default:Local_u8errorstate=NOK;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	ff c0       	rjmp	.+510    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>

			}
		}
		else if (copy_channelno==CHAN_B){
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	09 f0       	breq	.+2      	; 0x2706 <TIMER_u8choosefastorphasemode+0x256>
    2704:	44 c0       	rjmp	.+136    	; 0x278e <TIMER_u8choosefastorphasemode+0x2de>
			switch(copy_u8mode){
    2706:	8c 81       	ldd	r24, Y+4	; 0x04
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	3a 87       	std	Y+10, r19	; 0x0a
    270e:	29 87       	std	Y+9, r18	; 0x09
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	83 30       	cpi	r24, 0x03	; 3
    2716:	91 05       	cpc	r25, r1
    2718:	c9 f0       	breq	.+50     	; 0x274c <TIMER_u8choosefastorphasemode+0x29c>
    271a:	29 85       	ldd	r18, Y+9	; 0x09
    271c:	3a 85       	ldd	r19, Y+10	; 0x0a
    271e:	24 30       	cpi	r18, 0x04	; 4
    2720:	31 05       	cpc	r19, r1
    2722:	19 f1       	breq	.+70     	; 0x276a <TIMER_u8choosefastorphasemode+0x2ba>
    2724:	89 85       	ldd	r24, Y+9	; 0x09
    2726:	9a 85       	ldd	r25, Y+10	; 0x0a
    2728:	81 30       	cpi	r24, 0x01	; 1
    272a:	91 05       	cpc	r25, r1
    272c:	69 f5       	brne	.+90     	; 0x2788 <TIMER_u8choosefastorphasemode+0x2d8>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    272e:	a0 e8       	ldi	r26, 0x80	; 128
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e0 e8       	ldi	r30, 0x80	; 128
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	8f 7e       	andi	r24, 0xEF	; 239
    273a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    273c:	a0 e8       	ldi	r26, 0x80	; 128
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	e0 e8       	ldi	r30, 0x80	; 128
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	8f 7d       	andi	r24, 0xDF	; 223
    2748:	8c 93       	st	X, r24
    274a:	d8 c0       	rjmp	.+432    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case NONINVERTING_MODE:
				CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    274c:	a0 e8       	ldi	r26, 0x80	; 128
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e0 e8       	ldi	r30, 0x80	; 128
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	8f 7e       	andi	r24, 0xEF	; 239
    2758:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1B1);
    275a:	a0 e8       	ldi	r26, 0x80	; 128
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e0 e8       	ldi	r30, 0x80	; 128
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	80 62       	ori	r24, 0x20	; 32
    2766:	8c 93       	st	X, r24
    2768:	c9 c0       	rjmp	.+402    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case INVERTING_MODE:
				SET_BIT(TCCR1A,TCCR1A_COM1B0);
    276a:	a0 e8       	ldi	r26, 0x80	; 128
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e0 e8       	ldi	r30, 0x80	; 128
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	80 61       	ori	r24, 0x10	; 16
    2776:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2778:	a0 e8       	ldi	r26, 0x80	; 128
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e0 e8       	ldi	r30, 0x80	; 128
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	80 62       	ori	r24, 0x20	; 32
    2784:	8c 93       	st	X, r24
    2786:	ba c0       	rjmp	.+372    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			default:Local_u8errorstate=NOK;
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	b7 c0       	rjmp	.+366    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
			}
		}
		else{
			Local_u8errorstate=NOK;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	b4 c0       	rjmp	.+360    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
		}
	}
	else if(copy_u8timerno==TIMER2){
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	82 30       	cpi	r24, 0x02	; 2
    2798:	09 f0       	breq	.+2      	; 0x279c <TIMER_u8choosefastorphasemode+0x2ec>
    279a:	ae c0       	rjmp	.+348    	; 0x28f8 <TIMER_u8choosefastorphasemode+0x448>
		if(copy_channelno==CHAN_A){
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	88 23       	and	r24, r24
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <TIMER_u8choosefastorphasemode+0x2f4>
    27a2:	5f c0       	rjmp	.+190    	; 0x2862 <TIMER_u8choosefastorphasemode+0x3b2>
			switch(copy_u8mode){
    27a4:	8c 81       	ldd	r24, Y+4	; 0x04
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	38 87       	std	Y+8, r19	; 0x08
    27ac:	2f 83       	std	Y+7, r18	; 0x07
    27ae:	8f 81       	ldd	r24, Y+7	; 0x07
    27b0:	98 85       	ldd	r25, Y+8	; 0x08
    27b2:	82 30       	cpi	r24, 0x02	; 2
    27b4:	91 05       	cpc	r25, r1
    27b6:	29 f1       	breq	.+74     	; 0x2802 <TIMER_u8choosefastorphasemode+0x352>
    27b8:	2f 81       	ldd	r18, Y+7	; 0x07
    27ba:	38 85       	ldd	r19, Y+8	; 0x08
    27bc:	23 30       	cpi	r18, 0x03	; 3
    27be:	31 05       	cpc	r19, r1
    27c0:	34 f4       	brge	.+12     	; 0x27ce <TIMER_u8choosefastorphasemode+0x31e>
    27c2:	8f 81       	ldd	r24, Y+7	; 0x07
    27c4:	98 85       	ldd	r25, Y+8	; 0x08
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	91 05       	cpc	r25, r1
    27ca:	61 f0       	breq	.+24     	; 0x27e4 <TIMER_u8choosefastorphasemode+0x334>
    27cc:	47 c0       	rjmp	.+142    	; 0x285c <TIMER_u8choosefastorphasemode+0x3ac>
    27ce:	2f 81       	ldd	r18, Y+7	; 0x07
    27d0:	38 85       	ldd	r19, Y+8	; 0x08
    27d2:	23 30       	cpi	r18, 0x03	; 3
    27d4:	31 05       	cpc	r19, r1
    27d6:	21 f1       	breq	.+72     	; 0x2820 <TIMER_u8choosefastorphasemode+0x370>
    27d8:	8f 81       	ldd	r24, Y+7	; 0x07
    27da:	98 85       	ldd	r25, Y+8	; 0x08
    27dc:	84 30       	cpi	r24, 0x04	; 4
    27de:	91 05       	cpc	r25, r1
    27e0:	71 f1       	breq	.+92     	; 0x283e <TIMER_u8choosefastorphasemode+0x38e>
    27e2:	3c c0       	rjmp	.+120    	; 0x285c <TIMER_u8choosefastorphasemode+0x3ac>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_COM2A0);
    27e4:	a0 eb       	ldi	r26, 0xB0	; 176
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e0 eb       	ldi	r30, 0xB0	; 176
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	8f 7b       	andi	r24, 0xBF	; 191
    27f0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_COM2A1);
    27f2:	a0 eb       	ldi	r26, 0xB0	; 176
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e0 eb       	ldi	r30, 0xB0	; 176
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	8f 77       	andi	r24, 0x7F	; 127
    27fe:	8c 93       	st	X, r24
    2800:	7d c0       	rjmp	.+250    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case SECOND_MODE:
				SET_BIT(TCCR2A,TCCR2A_COM2A0);
    2802:	a0 eb       	ldi	r26, 0xB0	; 176
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e0 eb       	ldi	r30, 0xB0	; 176
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	80 64       	ori	r24, 0x40	; 64
    280e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_COM2A1);
    2810:	a0 eb       	ldi	r26, 0xB0	; 176
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e0 eb       	ldi	r30, 0xB0	; 176
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8f 77       	andi	r24, 0x7F	; 127
    281c:	8c 93       	st	X, r24
    281e:	6e c0       	rjmp	.+220    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case NONINVERTING_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_COM2A0);
    2820:	a0 eb       	ldi	r26, 0xB0	; 176
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	e0 eb       	ldi	r30, 0xB0	; 176
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	8f 7b       	andi	r24, 0xBF	; 191
    282c:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_COM2A1);
    282e:	a0 eb       	ldi	r26, 0xB0	; 176
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e0 eb       	ldi	r30, 0xB0	; 176
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	80 68       	ori	r24, 0x80	; 128
    283a:	8c 93       	st	X, r24
    283c:	5f c0       	rjmp	.+190    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case INVERTING_MODE:
				SET_BIT(TCCR2A,TCCR2A_COM2A0);
    283e:	a0 eb       	ldi	r26, 0xB0	; 176
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e0 eb       	ldi	r30, 0xB0	; 176
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	80 64       	ori	r24, 0x40	; 64
    284a:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_COM2A1);
    284c:	a0 eb       	ldi	r26, 0xB0	; 176
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e0 eb       	ldi	r30, 0xB0	; 176
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	80 68       	ori	r24, 0x80	; 128
    2858:	8c 93       	st	X, r24
    285a:	50 c0       	rjmp	.+160    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			default:Local_u8errorstate=NOK;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	4d c0       	rjmp	.+154    	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
			}
		}
		else if(copy_channelno==CHAN_B){
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	09 f0       	breq	.+2      	; 0x286a <TIMER_u8choosefastorphasemode+0x3ba>
    2868:	44 c0       	rjmp	.+136    	; 0x28f2 <TIMER_u8choosefastorphasemode+0x442>
			switch(copy_u8mode){
    286a:	8c 81       	ldd	r24, Y+4	; 0x04
    286c:	28 2f       	mov	r18, r24
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	3e 83       	std	Y+6, r19	; 0x06
    2872:	2d 83       	std	Y+5, r18	; 0x05
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	83 30       	cpi	r24, 0x03	; 3
    287a:	91 05       	cpc	r25, r1
    287c:	c9 f0       	breq	.+50     	; 0x28b0 <TIMER_u8choosefastorphasemode+0x400>
    287e:	2d 81       	ldd	r18, Y+5	; 0x05
    2880:	3e 81       	ldd	r19, Y+6	; 0x06
    2882:	24 30       	cpi	r18, 0x04	; 4
    2884:	31 05       	cpc	r19, r1
    2886:	19 f1       	breq	.+70     	; 0x28ce <TIMER_u8choosefastorphasemode+0x41e>
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	91 05       	cpc	r25, r1
    2890:	69 f5       	brne	.+90     	; 0x28ec <TIMER_u8choosefastorphasemode+0x43c>
			case NORMAL_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B0);
    2892:	a0 eb       	ldi	r26, 0xB0	; 176
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	e0 eb       	ldi	r30, 0xB0	; 176
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	8f 7e       	andi	r24, 0xEF	; 239
    289e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B1);
    28a0:	a0 eb       	ldi	r26, 0xB0	; 176
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e0 eb       	ldi	r30, 0xB0	; 176
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	8f 7d       	andi	r24, 0xDF	; 223
    28ac:	8c 93       	st	X, r24
    28ae:	26 c0       	rjmp	.+76     	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case NONINVERTING_MODE:
				CLEAR_BIT(TCCR2A,TCCR2A_COM2B0);
    28b0:	a0 eb       	ldi	r26, 0xB0	; 176
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e0 eb       	ldi	r30, 0xB0	; 176
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	8f 7e       	andi	r24, 0xEF	; 239
    28bc:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_COM2B1);
    28be:	a0 eb       	ldi	r26, 0xB0	; 176
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e0 eb       	ldi	r30, 0xB0	; 176
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	80 62       	ori	r24, 0x20	; 32
    28ca:	8c 93       	st	X, r24
    28cc:	17 c0       	rjmp	.+46     	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			case INVERTING_MODE:
				SET_BIT(TCCR2A,TCCR2A_COM2B0);
    28ce:	a0 eb       	ldi	r26, 0xB0	; 176
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e0 eb       	ldi	r30, 0xB0	; 176
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	80 61       	ori	r24, 0x10	; 16
    28da:	8c 93       	st	X, r24
				SET_BIT(TCCR2A,TCCR2A_COM2B1);
    28dc:	a0 eb       	ldi	r26, 0xB0	; 176
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e0 eb       	ldi	r30, 0xB0	; 176
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	80 62       	ori	r24, 0x20	; 32
    28e8:	8c 93       	st	X, r24
    28ea:	08 c0       	rjmp	.+16     	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
				break;
			default:Local_u8errorstate=NOK;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	05 c0       	rjmp	.+10     	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>

			}
		}
		else{
			Local_u8errorstate=NOK;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	02 c0       	rjmp	.+4      	; 0x28fc <TIMER_u8choosefastorphasemode+0x44c>
		}
	}
	else{
		Local_u8errorstate=NOK;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errorstate;
    28fc:	89 81       	ldd	r24, Y+1	; 0x01

}
    28fe:	60 96       	adiw	r28, 0x10	; 16
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <TIMER_u8setprescaler>:
u8 TIMER_u8setprescaler(u8 copy_u8timerno,u8 copy_u8prescale){
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	00 d0       	rcall	.+0      	; 0x2916 <TIMER_u8setprescaler+0x6>
    2916:	0f 92       	push	r0
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	8a 83       	std	Y+2, r24	; 0x02
    291e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errorstate=OK;
    2920:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8timerno==TIMER0){
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	88 23       	and	r24, r24
    2926:	81 f4       	brne	.+32     	; 0x2948 <TIMER_u8setprescaler+0x38>
		TCCR0B&=CLEAR_MASK;
    2928:	a5 e4       	ldi	r26, 0x45	; 69
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e5 e4       	ldi	r30, 0x45	; 69
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	88 7f       	andi	r24, 0xF8	; 248
    2934:	8c 93       	st	X, r24
		TCCR0B|=copy_u8prescale;
    2936:	a5 e4       	ldi	r26, 0x45	; 69
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e5 e4       	ldi	r30, 0x45	; 69
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	90 81       	ld	r25, Z
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	89 2b       	or	r24, r25
    2944:	8c 93       	st	X, r24
    2946:	28 c0       	rjmp	.+80     	; 0x2998 <TIMER_u8setprescaler+0x88>
	}
	else if (copy_u8timerno==TIMER1){
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	81 30       	cpi	r24, 0x01	; 1
    294c:	81 f4       	brne	.+32     	; 0x296e <TIMER_u8setprescaler+0x5e>
		TCCR1B&=CLEAR_MASK;
    294e:	a1 e8       	ldi	r26, 0x81	; 129
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e1 e8       	ldi	r30, 0x81	; 129
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	88 7f       	andi	r24, 0xF8	; 248
    295a:	8c 93       	st	X, r24
		TCCR1B|=copy_u8prescale;
    295c:	a1 e8       	ldi	r26, 0x81	; 129
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e1 e8       	ldi	r30, 0x81	; 129
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	90 81       	ld	r25, Z
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	89 2b       	or	r24, r25
    296a:	8c 93       	st	X, r24
    296c:	15 c0       	rjmp	.+42     	; 0x2998 <TIMER_u8setprescaler+0x88>
	}
	else if(copy_u8timerno==TIMER2){
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	82 30       	cpi	r24, 0x02	; 2
    2972:	81 f4       	brne	.+32     	; 0x2994 <TIMER_u8setprescaler+0x84>
		TCCR2B&=CLEAR_MASK;
    2974:	a1 eb       	ldi	r26, 0xB1	; 177
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e1 eb       	ldi	r30, 0xB1	; 177
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	88 7f       	andi	r24, 0xF8	; 248
    2980:	8c 93       	st	X, r24
		TCCR2B|=copy_u8prescale;
    2982:	a1 eb       	ldi	r26, 0xB1	; 177
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e1 eb       	ldi	r30, 0xB1	; 177
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	90 81       	ld	r25, Z
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	89 2b       	or	r24, r25
    2990:	8c 93       	st	X, r24
    2992:	02 c0       	rjmp	.+4      	; 0x2998 <TIMER_u8setprescaler+0x88>
	}
	else{
		Local_u8errorstate=NOK;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errorstate;
    2998:	89 81       	ldd	r24, Y+1	; 0x01
}
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <TIMER_u8setoverflowcallback>:
u8 TIMER_u8setoverflowcallback(u8 copy_u8timerno,void(* copy_pvfunc)(void)){
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <TIMER_u8setoverflowcallback+0x6>
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <TIMER_u8setoverflowcallback+0x8>
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	8a 83       	std	Y+2, r24	; 0x02
    29b4:	7c 83       	std	Y+4, r23	; 0x04
    29b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errorstate=OK;
    29b8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvfunc==NULL){
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	19 f4       	brne	.+6      	; 0x29c8 <TIMER_u8setoverflowcallback+0x22>
		Local_u8errorstate=NOK;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	20 c0       	rjmp	.+64     	; 0x2a08 <TIMER_u8setoverflowcallback+0x62>
	}
	else{
		if(copy_u8timerno==TIMER0){
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	88 23       	and	r24, r24
    29cc:	39 f4       	brne	.+14     	; 0x29dc <TIMER_u8setoverflowcallback+0x36>
			TIMER0_pvcallbackfunc=copy_pvfunc;
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	90 93 19 01 	sts	0x0119, r25
    29d6:	80 93 18 01 	sts	0x0118, r24
    29da:	16 c0       	rjmp	.+44     	; 0x2a08 <TIMER_u8setoverflowcallback+0x62>
		}
		else if(copy_u8timerno==TIMER1){
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	81 30       	cpi	r24, 0x01	; 1
    29e0:	39 f4       	brne	.+14     	; 0x29f0 <TIMER_u8setoverflowcallback+0x4a>
			TIMER1_pvcallbackfunc=copy_pvfunc;
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	90 93 1b 01 	sts	0x011B, r25
    29ea:	80 93 1a 01 	sts	0x011A, r24
    29ee:	0c c0       	rjmp	.+24     	; 0x2a08 <TIMER_u8setoverflowcallback+0x62>
		}
		else if(copy_u8timerno==TIMER2){
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	82 30       	cpi	r24, 0x02	; 2
    29f4:	39 f4       	brne	.+14     	; 0x2a04 <TIMER_u8setoverflowcallback+0x5e>
			TIMER2_pvcallbackfunc=copy_pvfunc;
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	90 93 1d 01 	sts	0x011D, r25
    29fe:	80 93 1c 01 	sts	0x011C, r24
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <TIMER_u8setoverflowcallback+0x62>
		}
		else {
			Local_u8errorstate=NOK;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8errorstate;
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <TIMER_u8setcompmatchcallback>:
u8 TIMER_u8setcompmatchcallback(u8 copy_u8timerno,void(* copy_pvfunc)(void),u8 copy_u8channel){
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <TIMER_u8setcompmatchcallback+0x6>
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <TIMER_u8setcompmatchcallback+0x8>
    2a20:	0f 92       	push	r0
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	8a 83       	std	Y+2, r24	; 0x02
    2a28:	7c 83       	std	Y+4, r23	; 0x04
    2a2a:	6b 83       	std	Y+3, r22	; 0x03
    2a2c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8errorstate=OK;
    2a2e:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pvfunc==NULL){
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	9c 81       	ldd	r25, Y+4	; 0x04
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	19 f4       	brne	.+6      	; 0x2a3e <TIMER_u8setcompmatchcallback+0x26>
		Local_u8errorstate=NOK;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	50 c0       	rjmp	.+160    	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>
	}
	else{
		if(copy_u8timerno==TIMER0){
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	88 23       	and	r24, r24
    2a42:	b9 f4       	brne	.+46     	; 0x2a72 <TIMER_u8setcompmatchcallback+0x5a>
			if(copy_u8channel==CHAN_A){
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	88 23       	and	r24, r24
    2a48:	39 f4       	brne	.+14     	; 0x2a58 <TIMER_u8setcompmatchcallback+0x40>
				TIMER0_pvcallbackcompfuncA=copy_pvfunc;
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	90 93 1f 01 	sts	0x011F, r25
    2a52:	80 93 1e 01 	sts	0x011E, r24
    2a56:	43 c0       	rjmp	.+134    	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>
			}
			else if(copy_u8channel==CHAN_B){
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	39 f4       	brne	.+14     	; 0x2a6c <TIMER_u8setcompmatchcallback+0x54>
				TIMER0_pvcallbackcompfuncB=copy_pvfunc;
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	90 93 25 01 	sts	0x0125, r25
    2a66:	80 93 24 01 	sts	0x0124, r24
    2a6a:	39 c0       	rjmp	.+114    	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>

			}
			else {
				Local_u8errorstate=NOK;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	36 c0       	rjmp	.+108    	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>
			}

		}
		else if(copy_u8timerno==TIMER1){
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	b9 f4       	brne	.+46     	; 0x2aa6 <TIMER_u8setcompmatchcallback+0x8e>
			if(copy_u8channel==CHAN_A){
    2a78:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7a:	88 23       	and	r24, r24
    2a7c:	39 f4       	brne	.+14     	; 0x2a8c <TIMER_u8setcompmatchcallback+0x74>
				TIMER1_pvcallbackcompfuncA=copy_pvfunc;
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	9c 81       	ldd	r25, Y+4	; 0x04
    2a82:	90 93 21 01 	sts	0x0121, r25
    2a86:	80 93 20 01 	sts	0x0120, r24
    2a8a:	29 c0       	rjmp	.+82     	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>
			}
			else if(copy_u8channel==CHAN_B){
    2a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	39 f4       	brne	.+14     	; 0x2aa0 <TIMER_u8setcompmatchcallback+0x88>
				TIMER1_pvcallbackcompfuncB=copy_pvfunc;
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	9c 81       	ldd	r25, Y+4	; 0x04
    2a96:	90 93 27 01 	sts	0x0127, r25
    2a9a:	80 93 26 01 	sts	0x0126, r24
    2a9e:	1f c0       	rjmp	.+62     	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>

			}
			else {
				Local_u8errorstate=NOK;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	1c c0       	rjmp	.+56     	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>
			}

		}
		else if(copy_u8timerno==TIMER2){
    2aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa8:	82 30       	cpi	r24, 0x02	; 2
    2aaa:	b9 f4       	brne	.+46     	; 0x2ada <TIMER_u8setcompmatchcallback+0xc2>
			if(copy_u8channel==CHAN_A){
    2aac:	8d 81       	ldd	r24, Y+5	; 0x05
    2aae:	88 23       	and	r24, r24
    2ab0:	39 f4       	brne	.+14     	; 0x2ac0 <TIMER_u8setcompmatchcallback+0xa8>
				TIMER2_pvcallbackcompfuncA=copy_pvfunc;
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab6:	90 93 23 01 	sts	0x0123, r25
    2aba:	80 93 22 01 	sts	0x0122, r24
    2abe:	0f c0       	rjmp	.+30     	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>
			}
			else if(copy_u8channel==CHAN_B){
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	81 30       	cpi	r24, 0x01	; 1
    2ac4:	39 f4       	brne	.+14     	; 0x2ad4 <TIMER_u8setcompmatchcallback+0xbc>
				TIMER2_pvcallbackcompfuncB=copy_pvfunc;
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aca:	90 93 29 01 	sts	0x0129, r25
    2ace:	80 93 28 01 	sts	0x0128, r24
    2ad2:	05 c0       	rjmp	.+10     	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>

			}
			else {
				Local_u8errorstate=NOK;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	02 c0       	rjmp	.+4      	; 0x2ade <TIMER_u8setcompmatchcallback+0xc6>
			}


		}
		else {
			Local_u8errorstate=NOK;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8errorstate;
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <TIMER_u8settimervalue>:
u8 TIMER_u8settimervalue(u8 copy_u8timerno,u8 copy_u8rimervalue){
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <TIMER_u8settimervalue+0x6>
    2af6:	0f 92       	push	r0
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	8a 83       	std	Y+2, r24	; 0x02
    2afe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errorstate=OK;
    2b00:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8timerno==TIMER0){
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	88 23       	and	r24, r24
    2b06:	29 f4       	brne	.+10     	; 0x2b12 <TIMER_u8settimervalue+0x22>
		TCNT0=copy_u8rimervalue;
    2b08:	e6 e4       	ldi	r30, 0x46	; 70
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	80 83       	st	Z, r24
    2b10:	0a c0       	rjmp	.+20     	; 0x2b26 <TIMER_u8settimervalue+0x36>
	}
	else if(copy_u8timerno==TIMER2){
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	82 30       	cpi	r24, 0x02	; 2
    2b16:	29 f4       	brne	.+10     	; 0x2b22 <TIMER_u8settimervalue+0x32>
		TCNT2=copy_u8rimervalue;
    2b18:	e2 eb       	ldi	r30, 0xB2	; 178
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	80 83       	st	Z, r24
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <TIMER_u8settimervalue+0x36>
	}
	else{
		Local_u8errorstate=NOK;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errorstate;
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <TIMER1_u8settimervalue>:
void TIMER1_u8settimervalue(u16 copy_u16rimervalue){
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	00 d0       	rcall	.+0      	; 0x2b3a <TIMER1_u8settimervalue+0x6>
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	9a 83       	std	Y+2, r25	; 0x02
    2b40:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=copy_u16rimervalue;
    2b42:	e4 e8       	ldi	r30, 0x84	; 132
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
}
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <TIMER_u8getimervalue>:
u8 TIMER_u8getimervalue(u8 copy_u8timerno,u16* copy_pu8rimervalue){
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <TIMER_u8getimervalue+0x6>
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <TIMER_u8getimervalue+0x8>
    2b60:	0f 92       	push	r0
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	8a 83       	std	Y+2, r24	; 0x02
    2b68:	7c 83       	std	Y+4, r23	; 0x04
    2b6a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errorstate=OK;
    2b6c:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pu8rimervalue==NULL){
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	19 f4       	brne	.+6      	; 0x2b7c <TIMER_u8getimervalue+0x24>
		Local_u8errorstate=NOK;
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	25 c0       	rjmp	.+74     	; 0x2bc6 <TIMER_u8getimervalue+0x6e>
	}
	else{
		if(copy_u8timerno==TIMER0){
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	88 23       	and	r24, r24
    2b80:	51 f4       	brne	.+20     	; 0x2b96 <TIMER_u8getimervalue+0x3e>
			*copy_pu8rimervalue=TCNT0;
    2b82:	e6 e4       	ldi	r30, 0x46	; 70
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	88 2f       	mov	r24, r24
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	18 c0       	rjmp	.+48     	; 0x2bc6 <TIMER_u8getimervalue+0x6e>
	}
		else if(copy_u8timerno==TIMER1){
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	81 30       	cpi	r24, 0x01	; 1
    2b9a:	49 f4       	brne	.+18     	; 0x2bae <TIMER_u8getimervalue+0x56>
			*copy_pu8rimervalue=TCNT1;
    2b9c:	e4 e8       	ldi	r30, 0x84	; 132
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba8:	91 83       	std	Z+1, r25	; 0x01
    2baa:	80 83       	st	Z, r24
    2bac:	0c c0       	rjmp	.+24     	; 0x2bc6 <TIMER_u8getimervalue+0x6e>
		}
		else if(copy_u8timerno==TIMER2){
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	82 30       	cpi	r24, 0x02	; 2
    2bb2:	49 f4       	brne	.+18     	; 0x2bc6 <TIMER_u8getimervalue+0x6e>
			*copy_pu8rimervalue=TCNT2;
    2bb4:	e2 eb       	ldi	r30, 0xB2	; 178
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	88 2f       	mov	r24, r24
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	80 83       	st	Z, r24
		}
	}


}
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <TIMER1_voidsettimer1value>:





void TIMER1_voidsettimer1value(u16 copy_u8timer1value){
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <TIMER1_voidsettimer1value+0x6>
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=copy_u8timer1value;
    2be4:	e4 e8       	ldi	r30, 0x84	; 132
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	9a 81       	ldd	r25, Y+2	; 0x02
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24

}
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <TIMER1_u16readtimervalue>:
u16 TIMER1_u16readtimervalue(void){
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2c02:	e4 e8       	ldi	r30, 0x84	; 132
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	91 81       	ldd	r25, Z+1	; 0x01
}
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <TIMER1_voidinit>:
void TIMER1_voidinit(void){
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
	/* initialize at normal mode*,prescaler timer1 divided by 8	 */
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2c18:	a0 e8       	ldi	r26, 0x80	; 128
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	e0 e8       	ldi	r30, 0x80	; 128
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	8f 7b       	andi	r24, 0xBF	; 191
    2c24:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2c26:	a0 e8       	ldi	r26, 0x80	; 128
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	e0 e8       	ldi	r30, 0x80	; 128
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	8f 77       	andi	r24, 0x7F	; 127
    2c32:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    2c34:	a1 e8       	ldi	r26, 0x81	; 129
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e1 e8       	ldi	r30, 0x81	; 129
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	8e 7f       	andi	r24, 0xFE	; 254
    2c40:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    2c42:	a1 e8       	ldi	r26, 0x81	; 129
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e1 e8       	ldi	r30, 0x81	; 129
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	82 60       	ori	r24, 0x02	; 2
    2c4e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    2c50:	a1 e8       	ldi	r26, 0x81	; 129
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e1 e8       	ldi	r30, 0x81	; 129
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	8b 7f       	andi	r24, 0xFB	; 251
    2c5c:	8c 93       	st	X, r24
}
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <__vector_16>:

void __vector_16 (void)__attribute__((signal));
void __vector_16 (void){
    2c64:	1f 92       	push	r1
    2c66:	0f 92       	push	r0
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	0f 92       	push	r0
    2c6c:	11 24       	eor	r1, r1
    2c6e:	2f 93       	push	r18
    2c70:	3f 93       	push	r19
    2c72:	4f 93       	push	r20
    2c74:	5f 93       	push	r21
    2c76:	6f 93       	push	r22
    2c78:	7f 93       	push	r23
    2c7a:	8f 93       	push	r24
    2c7c:	9f 93       	push	r25
    2c7e:	af 93       	push	r26
    2c80:	bf 93       	push	r27
    2c82:	ef 93       	push	r30
    2c84:	ff 93       	push	r31
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvcallbackfunc!=NULL){
    2c8e:	80 91 18 01 	lds	r24, 0x0118
    2c92:	90 91 19 01 	lds	r25, 0x0119
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	29 f0       	breq	.+10     	; 0x2ca4 <__vector_16+0x40>
		TIMER0_pvcallbackfunc();
    2c9a:	e0 91 18 01 	lds	r30, 0x0118
    2c9e:	f0 91 19 01 	lds	r31, 0x0119
    2ca2:	09 95       	icall
	}
}
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	ff 91       	pop	r31
    2caa:	ef 91       	pop	r30
    2cac:	bf 91       	pop	r27
    2cae:	af 91       	pop	r26
    2cb0:	9f 91       	pop	r25
    2cb2:	8f 91       	pop	r24
    2cb4:	7f 91       	pop	r23
    2cb6:	6f 91       	pop	r22
    2cb8:	5f 91       	pop	r21
    2cba:	4f 91       	pop	r20
    2cbc:	3f 91       	pop	r19
    2cbe:	2f 91       	pop	r18
    2cc0:	0f 90       	pop	r0
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	0f 90       	pop	r0
    2cc6:	1f 90       	pop	r1
    2cc8:	18 95       	reti

00002cca <__vector_13>:
void __vector_13 (void)__attribute__((signal));
void __vector_13 (void){
    2cca:	1f 92       	push	r1
    2ccc:	0f 92       	push	r0
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	0f 92       	push	r0
    2cd2:	11 24       	eor	r1, r1
    2cd4:	2f 93       	push	r18
    2cd6:	3f 93       	push	r19
    2cd8:	4f 93       	push	r20
    2cda:	5f 93       	push	r21
    2cdc:	6f 93       	push	r22
    2cde:	7f 93       	push	r23
    2ce0:	8f 93       	push	r24
    2ce2:	9f 93       	push	r25
    2ce4:	af 93       	push	r26
    2ce6:	bf 93       	push	r27
    2ce8:	ef 93       	push	r30
    2cea:	ff 93       	push	r31
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvcallbackfunc!=NULL){
    2cf4:	80 91 1a 01 	lds	r24, 0x011A
    2cf8:	90 91 1b 01 	lds	r25, 0x011B
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	29 f0       	breq	.+10     	; 0x2d0a <__vector_13+0x40>
		TIMER1_pvcallbackfunc();
    2d00:	e0 91 1a 01 	lds	r30, 0x011A
    2d04:	f0 91 1b 01 	lds	r31, 0x011B
    2d08:	09 95       	icall
	}
}
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	ff 91       	pop	r31
    2d10:	ef 91       	pop	r30
    2d12:	bf 91       	pop	r27
    2d14:	af 91       	pop	r26
    2d16:	9f 91       	pop	r25
    2d18:	8f 91       	pop	r24
    2d1a:	7f 91       	pop	r23
    2d1c:	6f 91       	pop	r22
    2d1e:	5f 91       	pop	r21
    2d20:	4f 91       	pop	r20
    2d22:	3f 91       	pop	r19
    2d24:	2f 91       	pop	r18
    2d26:	0f 90       	pop	r0
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	0f 90       	pop	r0
    2d2c:	1f 90       	pop	r1
    2d2e:	18 95       	reti

00002d30 <__vector_9>:
void __vector_9 (void)__attribute__((signal));
void __vector_9 (void){
    2d30:	1f 92       	push	r1
    2d32:	0f 92       	push	r0
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	0f 92       	push	r0
    2d38:	11 24       	eor	r1, r1
    2d3a:	2f 93       	push	r18
    2d3c:	3f 93       	push	r19
    2d3e:	4f 93       	push	r20
    2d40:	5f 93       	push	r21
    2d42:	6f 93       	push	r22
    2d44:	7f 93       	push	r23
    2d46:	8f 93       	push	r24
    2d48:	9f 93       	push	r25
    2d4a:	af 93       	push	r26
    2d4c:	bf 93       	push	r27
    2d4e:	ef 93       	push	r30
    2d50:	ff 93       	push	r31
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvcallbackfunc!=NULL){
    2d5a:	80 91 1c 01 	lds	r24, 0x011C
    2d5e:	90 91 1d 01 	lds	r25, 0x011D
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	29 f0       	breq	.+10     	; 0x2d70 <__vector_9+0x40>
		TIMER2_pvcallbackfunc();
    2d66:	e0 91 1c 01 	lds	r30, 0x011C
    2d6a:	f0 91 1d 01 	lds	r31, 0x011D
    2d6e:	09 95       	icall
	}
}
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	ff 91       	pop	r31
    2d76:	ef 91       	pop	r30
    2d78:	bf 91       	pop	r27
    2d7a:	af 91       	pop	r26
    2d7c:	9f 91       	pop	r25
    2d7e:	8f 91       	pop	r24
    2d80:	7f 91       	pop	r23
    2d82:	6f 91       	pop	r22
    2d84:	5f 91       	pop	r21
    2d86:	4f 91       	pop	r20
    2d88:	3f 91       	pop	r19
    2d8a:	2f 91       	pop	r18
    2d8c:	0f 90       	pop	r0
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	0f 90       	pop	r0
    2d92:	1f 90       	pop	r1
    2d94:	18 95       	reti

00002d96 <__vector_14>:
void __vector_14 (void)__attribute__((signal));
void __vector_14 (void){
    2d96:	1f 92       	push	r1
    2d98:	0f 92       	push	r0
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	0f 92       	push	r0
    2d9e:	11 24       	eor	r1, r1
    2da0:	2f 93       	push	r18
    2da2:	3f 93       	push	r19
    2da4:	4f 93       	push	r20
    2da6:	5f 93       	push	r21
    2da8:	6f 93       	push	r22
    2daa:	7f 93       	push	r23
    2dac:	8f 93       	push	r24
    2dae:	9f 93       	push	r25
    2db0:	af 93       	push	r26
    2db2:	bf 93       	push	r27
    2db4:	ef 93       	push	r30
    2db6:	ff 93       	push	r31
    2db8:	df 93       	push	r29
    2dba:	cf 93       	push	r28
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvcallbackcompfuncA!=NULL){
    2dc0:	80 91 1e 01 	lds	r24, 0x011E
    2dc4:	90 91 1f 01 	lds	r25, 0x011F
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	29 f0       	breq	.+10     	; 0x2dd6 <__vector_14+0x40>
		TIMER0_pvcallbackcompfuncA();
    2dcc:	e0 91 1e 01 	lds	r30, 0x011E
    2dd0:	f0 91 1f 01 	lds	r31, 0x011F
    2dd4:	09 95       	icall
	}
}
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	ff 91       	pop	r31
    2ddc:	ef 91       	pop	r30
    2dde:	bf 91       	pop	r27
    2de0:	af 91       	pop	r26
    2de2:	9f 91       	pop	r25
    2de4:	8f 91       	pop	r24
    2de6:	7f 91       	pop	r23
    2de8:	6f 91       	pop	r22
    2dea:	5f 91       	pop	r21
    2dec:	4f 91       	pop	r20
    2dee:	3f 91       	pop	r19
    2df0:	2f 91       	pop	r18
    2df2:	0f 90       	pop	r0
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	0f 90       	pop	r0
    2df8:	1f 90       	pop	r1
    2dfa:	18 95       	reti

00002dfc <__vector_15>:
void __vector_15 (void)__attribute__((signal));
void __vector_15 (void){
    2dfc:	1f 92       	push	r1
    2dfe:	0f 92       	push	r0
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	0f 92       	push	r0
    2e04:	11 24       	eor	r1, r1
    2e06:	2f 93       	push	r18
    2e08:	3f 93       	push	r19
    2e0a:	4f 93       	push	r20
    2e0c:	5f 93       	push	r21
    2e0e:	6f 93       	push	r22
    2e10:	7f 93       	push	r23
    2e12:	8f 93       	push	r24
    2e14:	9f 93       	push	r25
    2e16:	af 93       	push	r26
    2e18:	bf 93       	push	r27
    2e1a:	ef 93       	push	r30
    2e1c:	ff 93       	push	r31
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvcallbackcompfuncB!=NULL){
    2e26:	80 91 24 01 	lds	r24, 0x0124
    2e2a:	90 91 25 01 	lds	r25, 0x0125
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	29 f0       	breq	.+10     	; 0x2e3c <__vector_15+0x40>
		TIMER0_pvcallbackcompfuncB();
    2e32:	e0 91 24 01 	lds	r30, 0x0124
    2e36:	f0 91 25 01 	lds	r31, 0x0125
    2e3a:	09 95       	icall
	}
}
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	ff 91       	pop	r31
    2e42:	ef 91       	pop	r30
    2e44:	bf 91       	pop	r27
    2e46:	af 91       	pop	r26
    2e48:	9f 91       	pop	r25
    2e4a:	8f 91       	pop	r24
    2e4c:	7f 91       	pop	r23
    2e4e:	6f 91       	pop	r22
    2e50:	5f 91       	pop	r21
    2e52:	4f 91       	pop	r20
    2e54:	3f 91       	pop	r19
    2e56:	2f 91       	pop	r18
    2e58:	0f 90       	pop	r0
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	0f 90       	pop	r0
    2e5e:	1f 90       	pop	r1
    2e60:	18 95       	reti

00002e62 <__vector_11>:
void __vector_11 (void)__attribute__((signal));
void __vector_11 (void){
    2e62:	1f 92       	push	r1
    2e64:	0f 92       	push	r0
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	0f 92       	push	r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	2f 93       	push	r18
    2e6e:	3f 93       	push	r19
    2e70:	4f 93       	push	r20
    2e72:	5f 93       	push	r21
    2e74:	6f 93       	push	r22
    2e76:	7f 93       	push	r23
    2e78:	8f 93       	push	r24
    2e7a:	9f 93       	push	r25
    2e7c:	af 93       	push	r26
    2e7e:	bf 93       	push	r27
    2e80:	ef 93       	push	r30
    2e82:	ff 93       	push	r31
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvcallbackcompfuncA!=NULL){
    2e8c:	80 91 20 01 	lds	r24, 0x0120
    2e90:	90 91 21 01 	lds	r25, 0x0121
    2e94:	00 97       	sbiw	r24, 0x00	; 0
    2e96:	29 f0       	breq	.+10     	; 0x2ea2 <__vector_11+0x40>
		TIMER1_pvcallbackcompfuncA();
    2e98:	e0 91 20 01 	lds	r30, 0x0120
    2e9c:	f0 91 21 01 	lds	r31, 0x0121
    2ea0:	09 95       	icall
	}
}
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	ff 91       	pop	r31
    2ea8:	ef 91       	pop	r30
    2eaa:	bf 91       	pop	r27
    2eac:	af 91       	pop	r26
    2eae:	9f 91       	pop	r25
    2eb0:	8f 91       	pop	r24
    2eb2:	7f 91       	pop	r23
    2eb4:	6f 91       	pop	r22
    2eb6:	5f 91       	pop	r21
    2eb8:	4f 91       	pop	r20
    2eba:	3f 91       	pop	r19
    2ebc:	2f 91       	pop	r18
    2ebe:	0f 90       	pop	r0
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	0f 90       	pop	r0
    2ec4:	1f 90       	pop	r1
    2ec6:	18 95       	reti

00002ec8 <__vector_12>:
void __vector_12 (void)__attribute__((signal));
void __vector_12 (void){
    2ec8:	1f 92       	push	r1
    2eca:	0f 92       	push	r0
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	0f 92       	push	r0
    2ed0:	11 24       	eor	r1, r1
    2ed2:	2f 93       	push	r18
    2ed4:	3f 93       	push	r19
    2ed6:	4f 93       	push	r20
    2ed8:	5f 93       	push	r21
    2eda:	6f 93       	push	r22
    2edc:	7f 93       	push	r23
    2ede:	8f 93       	push	r24
    2ee0:	9f 93       	push	r25
    2ee2:	af 93       	push	r26
    2ee4:	bf 93       	push	r27
    2ee6:	ef 93       	push	r30
    2ee8:	ff 93       	push	r31
    2eea:	df 93       	push	r29
    2eec:	cf 93       	push	r28
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_pvcallbackcompfuncB!=NULL){
    2ef2:	80 91 26 01 	lds	r24, 0x0126
    2ef6:	90 91 27 01 	lds	r25, 0x0127
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	29 f0       	breq	.+10     	; 0x2f08 <__vector_12+0x40>
		TIMER1_pvcallbackcompfuncB();
    2efe:	e0 91 26 01 	lds	r30, 0x0126
    2f02:	f0 91 27 01 	lds	r31, 0x0127
    2f06:	09 95       	icall
	}
}
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	ff 91       	pop	r31
    2f0e:	ef 91       	pop	r30
    2f10:	bf 91       	pop	r27
    2f12:	af 91       	pop	r26
    2f14:	9f 91       	pop	r25
    2f16:	8f 91       	pop	r24
    2f18:	7f 91       	pop	r23
    2f1a:	6f 91       	pop	r22
    2f1c:	5f 91       	pop	r21
    2f1e:	4f 91       	pop	r20
    2f20:	3f 91       	pop	r19
    2f22:	2f 91       	pop	r18
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <__vector_7>:
void __vector_7 (void)__attribute__((signal));
void __vector_7 (void){
    2f2e:	1f 92       	push	r1
    2f30:	0f 92       	push	r0
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	0f 92       	push	r0
    2f36:	11 24       	eor	r1, r1
    2f38:	2f 93       	push	r18
    2f3a:	3f 93       	push	r19
    2f3c:	4f 93       	push	r20
    2f3e:	5f 93       	push	r21
    2f40:	6f 93       	push	r22
    2f42:	7f 93       	push	r23
    2f44:	8f 93       	push	r24
    2f46:	9f 93       	push	r25
    2f48:	af 93       	push	r26
    2f4a:	bf 93       	push	r27
    2f4c:	ef 93       	push	r30
    2f4e:	ff 93       	push	r31
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvcallbackcompfuncA!=NULL){
    2f58:	80 91 22 01 	lds	r24, 0x0122
    2f5c:	90 91 23 01 	lds	r25, 0x0123
    2f60:	00 97       	sbiw	r24, 0x00	; 0
    2f62:	29 f0       	breq	.+10     	; 0x2f6e <__vector_7+0x40>
		TIMER2_pvcallbackcompfuncA();
    2f64:	e0 91 22 01 	lds	r30, 0x0122
    2f68:	f0 91 23 01 	lds	r31, 0x0123
    2f6c:	09 95       	icall
	}
}
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	ff 91       	pop	r31
    2f74:	ef 91       	pop	r30
    2f76:	bf 91       	pop	r27
    2f78:	af 91       	pop	r26
    2f7a:	9f 91       	pop	r25
    2f7c:	8f 91       	pop	r24
    2f7e:	7f 91       	pop	r23
    2f80:	6f 91       	pop	r22
    2f82:	5f 91       	pop	r21
    2f84:	4f 91       	pop	r20
    2f86:	3f 91       	pop	r19
    2f88:	2f 91       	pop	r18
    2f8a:	0f 90       	pop	r0
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	0f 90       	pop	r0
    2f90:	1f 90       	pop	r1
    2f92:	18 95       	reti

00002f94 <__vector_8>:
void __vector_8 (void)__attribute__((signal));
void __vector_8 (void){
    2f94:	1f 92       	push	r1
    2f96:	0f 92       	push	r0
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	0f 92       	push	r0
    2f9c:	11 24       	eor	r1, r1
    2f9e:	2f 93       	push	r18
    2fa0:	3f 93       	push	r19
    2fa2:	4f 93       	push	r20
    2fa4:	5f 93       	push	r21
    2fa6:	6f 93       	push	r22
    2fa8:	7f 93       	push	r23
    2faa:	8f 93       	push	r24
    2fac:	9f 93       	push	r25
    2fae:	af 93       	push	r26
    2fb0:	bf 93       	push	r27
    2fb2:	ef 93       	push	r30
    2fb4:	ff 93       	push	r31
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_pvcallbackcompfuncB!=NULL){
    2fbe:	80 91 28 01 	lds	r24, 0x0128
    2fc2:	90 91 29 01 	lds	r25, 0x0129
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	29 f0       	breq	.+10     	; 0x2fd4 <__vector_8+0x40>
		TIMER2_pvcallbackcompfuncB();
    2fca:	e0 91 28 01 	lds	r30, 0x0128
    2fce:	f0 91 29 01 	lds	r31, 0x0129
    2fd2:	09 95       	icall
	}
}
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	ff 91       	pop	r31
    2fda:	ef 91       	pop	r30
    2fdc:	bf 91       	pop	r27
    2fde:	af 91       	pop	r26
    2fe0:	9f 91       	pop	r25
    2fe2:	8f 91       	pop	r24
    2fe4:	7f 91       	pop	r23
    2fe6:	6f 91       	pop	r22
    2fe8:	5f 91       	pop	r21
    2fea:	4f 91       	pop	r20
    2fec:	3f 91       	pop	r19
    2fee:	2f 91       	pop	r18
    2ff0:	0f 90       	pop	r0
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	0f 90       	pop	r0
    2ff6:	1f 90       	pop	r1
    2ff8:	18 95       	reti

00002ffa <TIMER0_voidsetcompmatchvalue>:

void TIMER0_voidsetcompmatchvalue(u16 copy_u8vlaue){
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	00 d0       	rcall	.+0      	; 0x3000 <TIMER0_voidsetcompmatchvalue+0x6>
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
	OCOR1AL=copy_u8vlaue;
    3008:	e8 e8       	ldi	r30, 0x88	; 136
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
}
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	08 95       	ret

0000301e <MAPING_s32mapingvalue>:
s32 MAPING_s32mapingvalue(MAPING*copy_structobject,u8 copy_u8mapingstate){
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	29 97       	sbiw	r28, 0x09	; 9
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	9e 83       	std	Y+6, r25	; 0x06
    3034:	8d 83       	std	Y+5, r24	; 0x05
    3036:	6f 83       	std	Y+7, r22	; 0x07
	if(copy_u8mapingstate==NORMAL){
    3038:	8f 81       	ldd	r24, Y+7	; 0x07
    303a:	81 30       	cpi	r24, 0x01	; 1
    303c:	d9 f5       	brne	.+118    	; 0x30b4 <MAPING_s32mapingvalue+0x96>
		s32 OUTPUT_s32vlaue;
		OUTPUT_s32vlaue=((copy_structobject->copy_s32max_output-copy_structobject->copy_s32min_output)/(copy_structobject->copy_s32max_input-copy_structobject->copy_s32min_input)*(copy_structobject->copy_s32inputvalue-copy_structobject->copy_s32min_input))+copy_structobject->copy_s32min_output;
    303e:	ed 81       	ldd	r30, Y+5	; 0x05
    3040:	fe 81       	ldd	r31, Y+6	; 0x06
    3042:	26 81       	ldd	r18, Z+6	; 0x06
    3044:	37 81       	ldd	r19, Z+7	; 0x07
    3046:	ed 81       	ldd	r30, Y+5	; 0x05
    3048:	fe 81       	ldd	r31, Y+6	; 0x06
    304a:	84 81       	ldd	r24, Z+4	; 0x04
    304c:	95 81       	ldd	r25, Z+5	; 0x05
    304e:	a9 01       	movw	r20, r18
    3050:	48 1b       	sub	r20, r24
    3052:	59 0b       	sbc	r21, r25
    3054:	ed 81       	ldd	r30, Y+5	; 0x05
    3056:	fe 81       	ldd	r31, Y+6	; 0x06
    3058:	22 81       	ldd	r18, Z+2	; 0x02
    305a:	33 81       	ldd	r19, Z+3	; 0x03
    305c:	ed 81       	ldd	r30, Y+5	; 0x05
    305e:	fe 81       	ldd	r31, Y+6	; 0x06
    3060:	80 81       	ld	r24, Z
    3062:	91 81       	ldd	r25, Z+1	; 0x01
    3064:	28 1b       	sub	r18, r24
    3066:	39 0b       	sbc	r19, r25
    3068:	ca 01       	movw	r24, r20
    306a:	b9 01       	movw	r22, r18
    306c:	0e 94 ce 19 	call	0x339c	; 0x339c <__divmodhi4>
    3070:	cb 01       	movw	r24, r22
    3072:	ac 01       	movw	r20, r24
    3074:	ed 81       	ldd	r30, Y+5	; 0x05
    3076:	fe 81       	ldd	r31, Y+6	; 0x06
    3078:	20 85       	ldd	r18, Z+8	; 0x08
    307a:	31 85       	ldd	r19, Z+9	; 0x09
    307c:	ed 81       	ldd	r30, Y+5	; 0x05
    307e:	fe 81       	ldd	r31, Y+6	; 0x06
    3080:	80 81       	ld	r24, Z
    3082:	91 81       	ldd	r25, Z+1	; 0x01
    3084:	b9 01       	movw	r22, r18
    3086:	68 1b       	sub	r22, r24
    3088:	79 0b       	sbc	r23, r25
    308a:	cb 01       	movw	r24, r22
    308c:	48 9f       	mul	r20, r24
    308e:	90 01       	movw	r18, r0
    3090:	49 9f       	mul	r20, r25
    3092:	30 0d       	add	r19, r0
    3094:	58 9f       	mul	r21, r24
    3096:	30 0d       	add	r19, r0
    3098:	11 24       	eor	r1, r1
    309a:	ed 81       	ldd	r30, Y+5	; 0x05
    309c:	fe 81       	ldd	r31, Y+6	; 0x06
    309e:	84 81       	ldd	r24, Z+4	; 0x04
    30a0:	95 81       	ldd	r25, Z+5	; 0x05
    30a2:	82 0f       	add	r24, r18
    30a4:	93 1f       	adc	r25, r19
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
		return OUTPUT_s32vlaue;
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	99 87       	std	Y+9, r25	; 0x09
    30b0:	88 87       	std	Y+8, r24	; 0x08
    30b2:	40 c0       	rjmp	.+128    	; 0x3134 <MAPING_s32mapingvalue+0x116>
	}
	else if(copy_u8mapingstate==REVERSED){
    30b4:	8f 81       	ldd	r24, Y+7	; 0x07
    30b6:	82 30       	cpi	r24, 0x02	; 2
    30b8:	d9 f5       	brne	.+118    	; 0x3130 <MAPING_s32mapingvalue+0x112>
		s32 INPUT_s32vlaue;
		INPUT_s32vlaue=((copy_structobject->copy_s32max_input-copy_structobject->copy_s32min_input)/(copy_structobject->copy_s32max_output-copy_structobject->copy_s32min_output))*(copy_structobject->copy_s32outputvalue-copy_structobject->copy_s32min_output)+copy_structobject->copy_s32min_input;
    30ba:	ed 81       	ldd	r30, Y+5	; 0x05
    30bc:	fe 81       	ldd	r31, Y+6	; 0x06
    30be:	22 81       	ldd	r18, Z+2	; 0x02
    30c0:	33 81       	ldd	r19, Z+3	; 0x03
    30c2:	ed 81       	ldd	r30, Y+5	; 0x05
    30c4:	fe 81       	ldd	r31, Y+6	; 0x06
    30c6:	80 81       	ld	r24, Z
    30c8:	91 81       	ldd	r25, Z+1	; 0x01
    30ca:	a9 01       	movw	r20, r18
    30cc:	48 1b       	sub	r20, r24
    30ce:	59 0b       	sbc	r21, r25
    30d0:	ed 81       	ldd	r30, Y+5	; 0x05
    30d2:	fe 81       	ldd	r31, Y+6	; 0x06
    30d4:	26 81       	ldd	r18, Z+6	; 0x06
    30d6:	37 81       	ldd	r19, Z+7	; 0x07
    30d8:	ed 81       	ldd	r30, Y+5	; 0x05
    30da:	fe 81       	ldd	r31, Y+6	; 0x06
    30dc:	84 81       	ldd	r24, Z+4	; 0x04
    30de:	95 81       	ldd	r25, Z+5	; 0x05
    30e0:	28 1b       	sub	r18, r24
    30e2:	39 0b       	sbc	r19, r25
    30e4:	ca 01       	movw	r24, r20
    30e6:	b9 01       	movw	r22, r18
    30e8:	0e 94 ce 19 	call	0x339c	; 0x339c <__divmodhi4>
    30ec:	cb 01       	movw	r24, r22
    30ee:	ac 01       	movw	r20, r24
    30f0:	ed 81       	ldd	r30, Y+5	; 0x05
    30f2:	fe 81       	ldd	r31, Y+6	; 0x06
    30f4:	22 85       	ldd	r18, Z+10	; 0x0a
    30f6:	33 85       	ldd	r19, Z+11	; 0x0b
    30f8:	ed 81       	ldd	r30, Y+5	; 0x05
    30fa:	fe 81       	ldd	r31, Y+6	; 0x06
    30fc:	84 81       	ldd	r24, Z+4	; 0x04
    30fe:	95 81       	ldd	r25, Z+5	; 0x05
    3100:	b9 01       	movw	r22, r18
    3102:	68 1b       	sub	r22, r24
    3104:	79 0b       	sbc	r23, r25
    3106:	cb 01       	movw	r24, r22
    3108:	48 9f       	mul	r20, r24
    310a:	90 01       	movw	r18, r0
    310c:	49 9f       	mul	r20, r25
    310e:	30 0d       	add	r19, r0
    3110:	58 9f       	mul	r21, r24
    3112:	30 0d       	add	r19, r0
    3114:	11 24       	eor	r1, r1
    3116:	ed 81       	ldd	r30, Y+5	; 0x05
    3118:	fe 81       	ldd	r31, Y+6	; 0x06
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	82 0f       	add	r24, r18
    3120:	93 1f       	adc	r25, r19
    3122:	9a 83       	std	Y+2, r25	; 0x02
    3124:	89 83       	std	Y+1, r24	; 0x01
		return INPUT_s32vlaue;
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	9a 81       	ldd	r25, Y+2	; 0x02
    312a:	99 87       	std	Y+9, r25	; 0x09
    312c:	88 87       	std	Y+8, r24	; 0x08
    312e:	02 c0       	rjmp	.+4      	; 0x3134 <MAPING_s32mapingvalue+0x116>
	}
	else{
		return 0;
    3130:	19 86       	std	Y+9, r1	; 0x09
    3132:	18 86       	std	Y+8, r1	; 0x08
    3134:	88 85       	ldd	r24, Y+8	; 0x08
    3136:	99 85       	ldd	r25, Y+9	; 0x09
	}
}
    3138:	29 96       	adiw	r28, 0x09	; 9
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <main>:
#include"GIE_interface.h"
#include"TIMERS_interface.h"
#include<util/delay.h>
void PWM(void);

void main(void){
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
    3152:	e1 97       	sbiw	r28, 0x31	; 49
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	de bf       	out	0x3e, r29	; 62
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u8counter;
	PORT_voidInit();
    315e:	0e 94 4f 0a 	call	0x149e	; 0x149e <PORT_voidInit>
	TIMER0_voidinit();
    3162:	0e 94 6d 0a 	call	0x14da	; 0x14da <TIMER0_voidinit>
	MAPING OBJECT1={1000,5000,0,180,0,180};
    3166:	ce 01       	movw	r24, r28
    3168:	81 96       	adiw	r24, 0x21	; 33
    316a:	9e a7       	std	Y+46, r25	; 0x2e
    316c:	8d a7       	std	Y+45, r24	; 0x2d
    316e:	e8 e0       	ldi	r30, 0x08	; 8
    3170:	f1 e0       	ldi	r31, 0x01	; 1
    3172:	f8 ab       	std	Y+48, r31	; 0x30
    3174:	ef a7       	std	Y+47, r30	; 0x2f
    3176:	fc e0       	ldi	r31, 0x0C	; 12
    3178:	f9 ab       	std	Y+49, r31	; 0x31
    317a:	ef a5       	ldd	r30, Y+47	; 0x2f
    317c:	f8 a9       	ldd	r31, Y+48	; 0x30
    317e:	00 80       	ld	r0, Z
    3180:	8f a5       	ldd	r24, Y+47	; 0x2f
    3182:	98 a9       	ldd	r25, Y+48	; 0x30
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	98 ab       	std	Y+48, r25	; 0x30
    3188:	8f a7       	std	Y+47, r24	; 0x2f
    318a:	ed a5       	ldd	r30, Y+45	; 0x2d
    318c:	fe a5       	ldd	r31, Y+46	; 0x2e
    318e:	00 82       	st	Z, r0
    3190:	8d a5       	ldd	r24, Y+45	; 0x2d
    3192:	9e a5       	ldd	r25, Y+46	; 0x2e
    3194:	01 96       	adiw	r24, 0x01	; 1
    3196:	9e a7       	std	Y+46, r25	; 0x2e
    3198:	8d a7       	std	Y+45, r24	; 0x2d
    319a:	99 a9       	ldd	r25, Y+49	; 0x31
    319c:	91 50       	subi	r25, 0x01	; 1
    319e:	99 ab       	std	Y+49, r25	; 0x31
    31a0:	e9 a9       	ldd	r30, Y+49	; 0x31
    31a2:	ee 23       	and	r30, r30
    31a4:	51 f7       	brne	.-44     	; 0x317a <main+0x30>
	s32 inputvalue=MAPING_s32mapingvalue(&OBJECT1,REVERSED);
    31a6:	ce 01       	movw	r24, r28
    31a8:	81 96       	adiw	r24, 0x21	; 33
    31aa:	62 e0       	ldi	r22, 0x02	; 2
    31ac:	0e 94 0f 18 	call	0x301e	; 0x301e <MAPING_s32mapingvalue>
    31b0:	9e 8f       	std	Y+30, r25	; 0x1e
    31b2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*TIMER0_setcallback(&PWM);
	GIE_voidenable();
	*/

	while(1){
		TIMER0_voidsetcompmatchvalue(1000);
    31b4:	88 ee       	ldi	r24, 0xE8	; 232
    31b6:	93 e0       	ldi	r25, 0x03	; 3
    31b8:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <TIMER0_voidsetcompmatchvalue>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	aa e7       	ldi	r26, 0x7A	; 122
    31c2:	b4 e4       	ldi	r27, 0x44	; 68
    31c4:	89 8f       	std	Y+25, r24	; 0x19
    31c6:	9a 8f       	std	Y+26, r25	; 0x1a
    31c8:	ab 8f       	std	Y+27, r26	; 0x1b
    31ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	69 8d       	ldd	r22, Y+25	; 0x19
    31ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a ef       	ldi	r20, 0xFA	; 250
    31da:	54 e4       	ldi	r21, 0x44	; 68
    31dc:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	8d 8b       	std	Y+21, r24	; 0x15
    31e6:	9e 8b       	std	Y+22, r25	; 0x16
    31e8:	af 8b       	std	Y+23, r26	; 0x17
    31ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31ec:	6d 89       	ldd	r22, Y+21	; 0x15
    31ee:	7e 89       	ldd	r23, Y+22	; 0x16
    31f0:	8f 89       	ldd	r24, Y+23	; 0x17
    31f2:	98 8d       	ldd	r25, Y+24	; 0x18
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e8       	ldi	r20, 0x80	; 128
    31fa:	5f e3       	ldi	r21, 0x3F	; 63
    31fc:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
    3200:	88 23       	and	r24, r24
    3202:	2c f4       	brge	.+10     	; 0x320e <main+0xc4>
		__ticks = 1;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	9c 8b       	std	Y+20, r25	; 0x14
    320a:	8b 8b       	std	Y+19, r24	; 0x13
    320c:	3f c0       	rjmp	.+126    	; 0x328c <main+0x142>
	else if (__tmp > 65535)
    320e:	6d 89       	ldd	r22, Y+21	; 0x15
    3210:	7e 89       	ldd	r23, Y+22	; 0x16
    3212:	8f 89       	ldd	r24, Y+23	; 0x17
    3214:	98 8d       	ldd	r25, Y+24	; 0x18
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	3f ef       	ldi	r19, 0xFF	; 255
    321a:	4f e7       	ldi	r20, 0x7F	; 127
    321c:	57 e4       	ldi	r21, 0x47	; 71
    321e:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
    3222:	18 16       	cp	r1, r24
    3224:	4c f5       	brge	.+82     	; 0x3278 <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	69 8d       	ldd	r22, Y+25	; 0x19
    3228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    322a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    322c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	9c 8b       	std	Y+20, r25	; 0x14
    324c:	8b 8b       	std	Y+19, r24	; 0x13
    324e:	0f c0       	rjmp	.+30     	; 0x326e <main+0x124>
    3250:	88 ec       	ldi	r24, 0xC8	; 200
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9a 8b       	std	Y+18, r25	; 0x12
    3256:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3258:	89 89       	ldd	r24, Y+17	; 0x11
    325a:	9a 89       	ldd	r25, Y+18	; 0x12
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <main+0x112>
    3260:	9a 8b       	std	Y+18, r25	; 0x12
    3262:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3264:	8b 89       	ldd	r24, Y+19	; 0x13
    3266:	9c 89       	ldd	r25, Y+20	; 0x14
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	9c 8b       	std	Y+20, r25	; 0x14
    326c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326e:	8b 89       	ldd	r24, Y+19	; 0x13
    3270:	9c 89       	ldd	r25, Y+20	; 0x14
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	69 f7       	brne	.-38     	; 0x3250 <main+0x106>
    3276:	14 c0       	rjmp	.+40     	; 0x32a0 <main+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3278:	6d 89       	ldd	r22, Y+21	; 0x15
    327a:	7e 89       	ldd	r23, Y+22	; 0x16
    327c:	8f 89       	ldd	r24, Y+23	; 0x17
    327e:	98 8d       	ldd	r25, Y+24	; 0x18
    3280:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	9c 8b       	std	Y+20, r25	; 0x14
    328a:	8b 8b       	std	Y+19, r24	; 0x13
    328c:	8b 89       	ldd	r24, Y+19	; 0x13
    328e:	9c 89       	ldd	r25, Y+20	; 0x14
    3290:	98 8b       	std	Y+16, r25	; 0x10
    3292:	8f 87       	std	Y+15, r24	; 0x0f
    3294:	8f 85       	ldd	r24, Y+15	; 0x0f
    3296:	98 89       	ldd	r25, Y+16	; 0x10
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <main+0x14e>
    329c:	98 8b       	std	Y+16, r25	; 0x10
    329e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		TIMER0_voidsetcompmatchvalue(5000);
    32a0:	88 e8       	ldi	r24, 0x88	; 136
    32a2:	93 e1       	ldi	r25, 0x13	; 19
    32a4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <TIMER0_voidsetcompmatchvalue>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	aa e7       	ldi	r26, 0x7A	; 122
    32ae:	b4 e4       	ldi	r27, 0x44	; 68
    32b0:	8b 87       	std	Y+11, r24	; 0x0b
    32b2:	9c 87       	std	Y+12, r25	; 0x0c
    32b4:	ad 87       	std	Y+13, r26	; 0x0d
    32b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    32bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32be:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	4a ef       	ldi	r20, 0xFA	; 250
    32c6:	54 e4       	ldi	r21, 0x44	; 68
    32c8:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	8f 83       	std	Y+7, r24	; 0x07
    32d2:	98 87       	std	Y+8, r25	; 0x08
    32d4:	a9 87       	std	Y+9, r26	; 0x09
    32d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32d8:	6f 81       	ldd	r22, Y+7	; 0x07
    32da:	78 85       	ldd	r23, Y+8	; 0x08
    32dc:	89 85       	ldd	r24, Y+9	; 0x09
    32de:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 e8       	ldi	r20, 0x80	; 128
    32e6:	5f e3       	ldi	r21, 0x3F	; 63
    32e8:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
    32ec:	88 23       	and	r24, r24
    32ee:	2c f4       	brge	.+10     	; 0x32fa <main+0x1b0>
		__ticks = 1;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	9e 83       	std	Y+6, r25	; 0x06
    32f6:	8d 83       	std	Y+5, r24	; 0x05
    32f8:	3f c0       	rjmp	.+126    	; 0x3378 <main+0x22e>
	else if (__tmp > 65535)
    32fa:	6f 81       	ldd	r22, Y+7	; 0x07
    32fc:	78 85       	ldd	r23, Y+8	; 0x08
    32fe:	89 85       	ldd	r24, Y+9	; 0x09
    3300:	9a 85       	ldd	r25, Y+10	; 0x0a
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	3f ef       	ldi	r19, 0xFF	; 255
    3306:	4f e7       	ldi	r20, 0x7F	; 127
    3308:	57 e4       	ldi	r21, 0x47	; 71
    330a:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
    330e:	18 16       	cp	r1, r24
    3310:	4c f5       	brge	.+82     	; 0x3364 <main+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3312:	6b 85       	ldd	r22, Y+11	; 0x0b
    3314:	7c 85       	ldd	r23, Y+12	; 0x0c
    3316:	8d 85       	ldd	r24, Y+13	; 0x0d
    3318:	9e 85       	ldd	r25, Y+14	; 0x0e
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	40 e2       	ldi	r20, 0x20	; 32
    3320:	51 e4       	ldi	r21, 0x41	; 65
    3322:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	bc 01       	movw	r22, r24
    332c:	cd 01       	movw	r24, r26
    332e:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	0f c0       	rjmp	.+30     	; 0x335a <main+0x210>
    333c:	88 ec       	ldi	r24, 0xC8	; 200
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	9c 83       	std	Y+4, r25	; 0x04
    3342:	8b 83       	std	Y+3, r24	; 0x03
    3344:	8b 81       	ldd	r24, Y+3	; 0x03
    3346:	9c 81       	ldd	r25, Y+4	; 0x04
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	f1 f7       	brne	.-4      	; 0x3348 <main+0x1fe>
    334c:	9c 83       	std	Y+4, r25	; 0x04
    334e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3350:	8d 81       	ldd	r24, Y+5	; 0x05
    3352:	9e 81       	ldd	r25, Y+6	; 0x06
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	69 f7       	brne	.-38     	; 0x333c <main+0x1f2>
    3362:	28 cf       	rjmp	.-432    	; 0x31b4 <main+0x6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3364:	6f 81       	ldd	r22, Y+7	; 0x07
    3366:	78 85       	ldd	r23, Y+8	; 0x08
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	9a 85       	ldd	r25, Y+10	; 0x0a
    336c:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	8d 81       	ldd	r24, Y+5	; 0x05
    337a:	9e 81       	ldd	r25, Y+6	; 0x06
    337c:	9a 83       	std	Y+2, r25	; 0x02
    337e:	89 83       	std	Y+1, r24	; 0x01
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	9a 81       	ldd	r25, Y+2	; 0x02
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <main+0x23a>
    3388:	9a 83       	std	Y+2, r25	; 0x02
    338a:	89 83       	std	Y+1, r24	; 0x01
    338c:	13 cf       	rjmp	.-474    	; 0x31b4 <main+0x6a>

0000338e <PWM>:

    }



void PWM(void){
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62

  else if(Local_u8counter==15){
 	 DIO_U8SetPinValue(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PIN_LOW);
  }
*/
	}
    3396:	cf 91       	pop	r28
    3398:	df 91       	pop	r29
    339a:	08 95       	ret

0000339c <__divmodhi4>:
    339c:	97 fb       	bst	r25, 7
    339e:	09 2e       	mov	r0, r25
    33a0:	07 26       	eor	r0, r23
    33a2:	0a d0       	rcall	.+20     	; 0x33b8 <__divmodhi4_neg1>
    33a4:	77 fd       	sbrc	r23, 7
    33a6:	04 d0       	rcall	.+8      	; 0x33b0 <__divmodhi4_neg2>
    33a8:	0c d0       	rcall	.+24     	; 0x33c2 <__udivmodhi4>
    33aa:	06 d0       	rcall	.+12     	; 0x33b8 <__divmodhi4_neg1>
    33ac:	00 20       	and	r0, r0
    33ae:	1a f4       	brpl	.+6      	; 0x33b6 <__divmodhi4_exit>

000033b0 <__divmodhi4_neg2>:
    33b0:	70 95       	com	r23
    33b2:	61 95       	neg	r22
    33b4:	7f 4f       	sbci	r23, 0xFF	; 255

000033b6 <__divmodhi4_exit>:
    33b6:	08 95       	ret

000033b8 <__divmodhi4_neg1>:
    33b8:	f6 f7       	brtc	.-4      	; 0x33b6 <__divmodhi4_exit>
    33ba:	90 95       	com	r25
    33bc:	81 95       	neg	r24
    33be:	9f 4f       	sbci	r25, 0xFF	; 255
    33c0:	08 95       	ret

000033c2 <__udivmodhi4>:
    33c2:	aa 1b       	sub	r26, r26
    33c4:	bb 1b       	sub	r27, r27
    33c6:	51 e1       	ldi	r21, 0x11	; 17
    33c8:	07 c0       	rjmp	.+14     	; 0x33d8 <__udivmodhi4_ep>

000033ca <__udivmodhi4_loop>:
    33ca:	aa 1f       	adc	r26, r26
    33cc:	bb 1f       	adc	r27, r27
    33ce:	a6 17       	cp	r26, r22
    33d0:	b7 07       	cpc	r27, r23
    33d2:	10 f0       	brcs	.+4      	; 0x33d8 <__udivmodhi4_ep>
    33d4:	a6 1b       	sub	r26, r22
    33d6:	b7 0b       	sbc	r27, r23

000033d8 <__udivmodhi4_ep>:
    33d8:	88 1f       	adc	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	5a 95       	dec	r21
    33de:	a9 f7       	brne	.-22     	; 0x33ca <__udivmodhi4_loop>
    33e0:	80 95       	com	r24
    33e2:	90 95       	com	r25
    33e4:	bc 01       	movw	r22, r24
    33e6:	cd 01       	movw	r24, r26
    33e8:	08 95       	ret

000033ea <__prologue_saves__>:
    33ea:	2f 92       	push	r2
    33ec:	3f 92       	push	r3
    33ee:	4f 92       	push	r4
    33f0:	5f 92       	push	r5
    33f2:	6f 92       	push	r6
    33f4:	7f 92       	push	r7
    33f6:	8f 92       	push	r8
    33f8:	9f 92       	push	r9
    33fa:	af 92       	push	r10
    33fc:	bf 92       	push	r11
    33fe:	cf 92       	push	r12
    3400:	df 92       	push	r13
    3402:	ef 92       	push	r14
    3404:	ff 92       	push	r15
    3406:	0f 93       	push	r16
    3408:	1f 93       	push	r17
    340a:	cf 93       	push	r28
    340c:	df 93       	push	r29
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	ca 1b       	sub	r28, r26
    3414:	db 0b       	sbc	r29, r27
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	09 94       	ijmp

00003422 <__epilogue_restores__>:
    3422:	2a 88       	ldd	r2, Y+18	; 0x12
    3424:	39 88       	ldd	r3, Y+17	; 0x11
    3426:	48 88       	ldd	r4, Y+16	; 0x10
    3428:	5f 84       	ldd	r5, Y+15	; 0x0f
    342a:	6e 84       	ldd	r6, Y+14	; 0x0e
    342c:	7d 84       	ldd	r7, Y+13	; 0x0d
    342e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3430:	9b 84       	ldd	r9, Y+11	; 0x0b
    3432:	aa 84       	ldd	r10, Y+10	; 0x0a
    3434:	b9 84       	ldd	r11, Y+9	; 0x09
    3436:	c8 84       	ldd	r12, Y+8	; 0x08
    3438:	df 80       	ldd	r13, Y+7	; 0x07
    343a:	ee 80       	ldd	r14, Y+6	; 0x06
    343c:	fd 80       	ldd	r15, Y+5	; 0x05
    343e:	0c 81       	ldd	r16, Y+4	; 0x04
    3440:	1b 81       	ldd	r17, Y+3	; 0x03
    3442:	aa 81       	ldd	r26, Y+2	; 0x02
    3444:	b9 81       	ldd	r27, Y+1	; 0x01
    3446:	ce 0f       	add	r28, r30
    3448:	d1 1d       	adc	r29, r1
    344a:	0f b6       	in	r0, 0x3f	; 63
    344c:	f8 94       	cli
    344e:	de bf       	out	0x3e, r29	; 62
    3450:	0f be       	out	0x3f, r0	; 63
    3452:	cd bf       	out	0x3d, r28	; 61
    3454:	ed 01       	movw	r28, r26
    3456:	08 95       	ret

00003458 <_exit>:
    3458:	f8 94       	cli

0000345a <__stop_program>:
    345a:	ff cf       	rjmp	.-2      	; 0x345a <__stop_program>
