
NRF_2_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800100  000024cc  00002560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800228  00800228  00002688  2**0
                  ALLOC
  3 .stab         000025f8  00000000  00000000  00002688  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001538  00000000  00000000  00004c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000061b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00006338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000650b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000851a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000968a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a82c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000aaed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b39b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f4 e2       	ldi	r31, 0x24	; 36
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 33       	cpi	r26, 0x31	; 49
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 94 11 	call	0x2328	; 0x2328 <main>
      9e:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__fixunssfsi>:
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	7b 01       	movw	r14, r22
      b0:	8c 01       	movw	r16, r24
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__gesf2>
      be:	88 23       	and	r24, r24
      c0:	8c f0       	brlt	.+34     	; 0xe4 <__fixunssfsi+0x3e>
      c2:	c8 01       	movw	r24, r16
      c4:	b7 01       	movw	r22, r14
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	5f e4       	ldi	r21, 0x4F	; 79
      ce:	0e 94 cb 01 	call	0x396	; 0x396 <__subsf3>
      d2:	0e 94 b3 03 	call	0x766	; 0x766 <__fixsfsi>
      d6:	9b 01       	movw	r18, r22
      d8:	ac 01       	movw	r20, r24
      da:	20 50       	subi	r18, 0x00	; 0
      dc:	30 40       	sbci	r19, 0x00	; 0
      de:	40 40       	sbci	r20, 0x00	; 0
      e0:	50 48       	sbci	r21, 0x80	; 128
      e2:	06 c0       	rjmp	.+12     	; 0xf0 <__fixunssfsi+0x4a>
      e4:	c8 01       	movw	r24, r16
      e6:	b7 01       	movw	r22, r14
      e8:	0e 94 b3 03 	call	0x766	; 0x766 <__fixsfsi>
      ec:	9b 01       	movw	r18, r22
      ee:	ac 01       	movw	r20, r24
      f0:	b9 01       	movw	r22, r18
      f2:	ca 01       	movw	r24, r20
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	ff 90       	pop	r15
      fa:	ef 90       	pop	r14
      fc:	08 95       	ret

000000fe <_fpadd_parts>:
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	e5 e8       	ldi	r30, 0x85	; 133
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__>
     10a:	dc 01       	movw	r26, r24
     10c:	2b 01       	movw	r4, r22
     10e:	fa 01       	movw	r30, r20
     110:	9c 91       	ld	r25, X
     112:	92 30       	cpi	r25, 0x02	; 2
     114:	08 f4       	brcc	.+2      	; 0x118 <_fpadd_parts+0x1a>
     116:	39 c1       	rjmp	.+626    	; 0x38a <_fpadd_parts+0x28c>
     118:	eb 01       	movw	r28, r22
     11a:	88 81       	ld	r24, Y
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	08 f4       	brcc	.+2      	; 0x122 <_fpadd_parts+0x24>
     120:	33 c1       	rjmp	.+614    	; 0x388 <_fpadd_parts+0x28a>
     122:	94 30       	cpi	r25, 0x04	; 4
     124:	69 f4       	brne	.+26     	; 0x140 <_fpadd_parts+0x42>
     126:	84 30       	cpi	r24, 0x04	; 4
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x2e>
     12a:	2f c1       	rjmp	.+606    	; 0x38a <_fpadd_parts+0x28c>
     12c:	11 96       	adiw	r26, 0x01	; 1
     12e:	9c 91       	ld	r25, X
     130:	11 97       	sbiw	r26, 0x01	; 1
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	98 17       	cp	r25, r24
     136:	09 f4       	brne	.+2      	; 0x13a <_fpadd_parts+0x3c>
     138:	28 c1       	rjmp	.+592    	; 0x38a <_fpadd_parts+0x28c>
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	25 c1       	rjmp	.+586    	; 0x38a <_fpadd_parts+0x28c>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	09 f4       	brne	.+2      	; 0x146 <_fpadd_parts+0x48>
     144:	21 c1       	rjmp	.+578    	; 0x388 <_fpadd_parts+0x28a>
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	a9 f4       	brne	.+42     	; 0x174 <_fpadd_parts+0x76>
     14a:	92 30       	cpi	r25, 0x02	; 2
     14c:	09 f0       	breq	.+2      	; 0x150 <_fpadd_parts+0x52>
     14e:	1d c1       	rjmp	.+570    	; 0x38a <_fpadd_parts+0x28c>
     150:	9a 01       	movw	r18, r20
     152:	ad 01       	movw	r20, r26
     154:	88 e0       	ldi	r24, 0x08	; 8
     156:	ea 01       	movw	r28, r20
     158:	09 90       	ld	r0, Y+
     15a:	ae 01       	movw	r20, r28
     15c:	e9 01       	movw	r28, r18
     15e:	09 92       	st	Y+, r0
     160:	9e 01       	movw	r18, r28
     162:	81 50       	subi	r24, 0x01	; 1
     164:	c1 f7       	brne	.-16     	; 0x156 <_fpadd_parts+0x58>
     166:	e2 01       	movw	r28, r4
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	11 96       	adiw	r26, 0x01	; 1
     16c:	9c 91       	ld	r25, X
     16e:	89 23       	and	r24, r25
     170:	81 83       	std	Z+1, r24	; 0x01
     172:	08 c1       	rjmp	.+528    	; 0x384 <_fpadd_parts+0x286>
     174:	92 30       	cpi	r25, 0x02	; 2
     176:	09 f4       	brne	.+2      	; 0x17a <_fpadd_parts+0x7c>
     178:	07 c1       	rjmp	.+526    	; 0x388 <_fpadd_parts+0x28a>
     17a:	12 96       	adiw	r26, 0x02	; 2
     17c:	2d 90       	ld	r2, X+
     17e:	3c 90       	ld	r3, X
     180:	13 97       	sbiw	r26, 0x03	; 3
     182:	eb 01       	movw	r28, r22
     184:	8a 81       	ldd	r24, Y+2	; 0x02
     186:	9b 81       	ldd	r25, Y+3	; 0x03
     188:	14 96       	adiw	r26, 0x04	; 4
     18a:	ad 90       	ld	r10, X+
     18c:	bd 90       	ld	r11, X+
     18e:	cd 90       	ld	r12, X+
     190:	dc 90       	ld	r13, X
     192:	17 97       	sbiw	r26, 0x07	; 7
     194:	ec 80       	ldd	r14, Y+4	; 0x04
     196:	fd 80       	ldd	r15, Y+5	; 0x05
     198:	0e 81       	ldd	r16, Y+6	; 0x06
     19a:	1f 81       	ldd	r17, Y+7	; 0x07
     19c:	91 01       	movw	r18, r2
     19e:	28 1b       	sub	r18, r24
     1a0:	39 0b       	sbc	r19, r25
     1a2:	b9 01       	movw	r22, r18
     1a4:	37 ff       	sbrs	r19, 7
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xb2>
     1a8:	66 27       	eor	r22, r22
     1aa:	77 27       	eor	r23, r23
     1ac:	62 1b       	sub	r22, r18
     1ae:	73 0b       	sbc	r23, r19
     1b0:	60 32       	cpi	r22, 0x20	; 32
     1b2:	71 05       	cpc	r23, r1
     1b4:	0c f0       	brlt	.+2      	; 0x1b8 <_fpadd_parts+0xba>
     1b6:	61 c0       	rjmp	.+194    	; 0x27a <_fpadd_parts+0x17c>
     1b8:	12 16       	cp	r1, r18
     1ba:	13 06       	cpc	r1, r19
     1bc:	6c f5       	brge	.+90     	; 0x218 <_fpadd_parts+0x11a>
     1be:	37 01       	movw	r6, r14
     1c0:	48 01       	movw	r8, r16
     1c2:	06 2e       	mov	r0, r22
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <_fpadd_parts+0xd0>
     1c6:	96 94       	lsr	r9
     1c8:	87 94       	ror	r8
     1ca:	77 94       	ror	r7
     1cc:	67 94       	ror	r6
     1ce:	0a 94       	dec	r0
     1d0:	d2 f7       	brpl	.-12     	; 0x1c6 <_fpadd_parts+0xc8>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	04 c0       	rjmp	.+8      	; 0x1e4 <_fpadd_parts+0xe6>
     1dc:	22 0f       	add	r18, r18
     1de:	33 1f       	adc	r19, r19
     1e0:	44 1f       	adc	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	6a 95       	dec	r22
     1e6:	d2 f7       	brpl	.-12     	; 0x1dc <_fpadd_parts+0xde>
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	30 40       	sbci	r19, 0x00	; 0
     1ec:	40 40       	sbci	r20, 0x00	; 0
     1ee:	50 40       	sbci	r21, 0x00	; 0
     1f0:	2e 21       	and	r18, r14
     1f2:	3f 21       	and	r19, r15
     1f4:	40 23       	and	r20, r16
     1f6:	51 23       	and	r21, r17
     1f8:	21 15       	cp	r18, r1
     1fa:	31 05       	cpc	r19, r1
     1fc:	41 05       	cpc	r20, r1
     1fe:	51 05       	cpc	r21, r1
     200:	21 f0       	breq	.+8      	; 0x20a <_fpadd_parts+0x10c>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	79 01       	movw	r14, r18
     20c:	8a 01       	movw	r16, r20
     20e:	e6 28       	or	r14, r6
     210:	f7 28       	or	r15, r7
     212:	08 29       	or	r16, r8
     214:	19 29       	or	r17, r9
     216:	3c c0       	rjmp	.+120    	; 0x290 <_fpadd_parts+0x192>
     218:	23 2b       	or	r18, r19
     21a:	d1 f1       	breq	.+116    	; 0x290 <_fpadd_parts+0x192>
     21c:	26 0e       	add	r2, r22
     21e:	37 1e       	adc	r3, r23
     220:	35 01       	movw	r6, r10
     222:	46 01       	movw	r8, r12
     224:	06 2e       	mov	r0, r22
     226:	04 c0       	rjmp	.+8      	; 0x230 <_fpadd_parts+0x132>
     228:	96 94       	lsr	r9
     22a:	87 94       	ror	r8
     22c:	77 94       	ror	r7
     22e:	67 94       	ror	r6
     230:	0a 94       	dec	r0
     232:	d2 f7       	brpl	.-12     	; 0x228 <_fpadd_parts+0x12a>
     234:	21 e0       	ldi	r18, 0x01	; 1
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	04 c0       	rjmp	.+8      	; 0x246 <_fpadd_parts+0x148>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	44 1f       	adc	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	6a 95       	dec	r22
     248:	d2 f7       	brpl	.-12     	; 0x23e <_fpadd_parts+0x140>
     24a:	21 50       	subi	r18, 0x01	; 1
     24c:	30 40       	sbci	r19, 0x00	; 0
     24e:	40 40       	sbci	r20, 0x00	; 0
     250:	50 40       	sbci	r21, 0x00	; 0
     252:	2a 21       	and	r18, r10
     254:	3b 21       	and	r19, r11
     256:	4c 21       	and	r20, r12
     258:	5d 21       	and	r21, r13
     25a:	21 15       	cp	r18, r1
     25c:	31 05       	cpc	r19, r1
     25e:	41 05       	cpc	r20, r1
     260:	51 05       	cpc	r21, r1
     262:	21 f0       	breq	.+8      	; 0x26c <_fpadd_parts+0x16e>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	59 01       	movw	r10, r18
     26e:	6a 01       	movw	r12, r20
     270:	a6 28       	or	r10, r6
     272:	b7 28       	or	r11, r7
     274:	c8 28       	or	r12, r8
     276:	d9 28       	or	r13, r9
     278:	0b c0       	rjmp	.+22     	; 0x290 <_fpadd_parts+0x192>
     27a:	82 15       	cp	r24, r2
     27c:	93 05       	cpc	r25, r3
     27e:	2c f0       	brlt	.+10     	; 0x28a <_fpadd_parts+0x18c>
     280:	1c 01       	movw	r2, r24
     282:	aa 24       	eor	r10, r10
     284:	bb 24       	eor	r11, r11
     286:	65 01       	movw	r12, r10
     288:	03 c0       	rjmp	.+6      	; 0x290 <_fpadd_parts+0x192>
     28a:	ee 24       	eor	r14, r14
     28c:	ff 24       	eor	r15, r15
     28e:	87 01       	movw	r16, r14
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	9c 91       	ld	r25, X
     294:	d2 01       	movw	r26, r4
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	8c 91       	ld	r24, X
     29a:	98 17       	cp	r25, r24
     29c:	09 f4       	brne	.+2      	; 0x2a0 <_fpadd_parts+0x1a2>
     29e:	45 c0       	rjmp	.+138    	; 0x32a <_fpadd_parts+0x22c>
     2a0:	99 23       	and	r25, r25
     2a2:	39 f0       	breq	.+14     	; 0x2b2 <_fpadd_parts+0x1b4>
     2a4:	a8 01       	movw	r20, r16
     2a6:	97 01       	movw	r18, r14
     2a8:	2a 19       	sub	r18, r10
     2aa:	3b 09       	sbc	r19, r11
     2ac:	4c 09       	sbc	r20, r12
     2ae:	5d 09       	sbc	r21, r13
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <_fpadd_parts+0x1c0>
     2b2:	a6 01       	movw	r20, r12
     2b4:	95 01       	movw	r18, r10
     2b6:	2e 19       	sub	r18, r14
     2b8:	3f 09       	sbc	r19, r15
     2ba:	40 0b       	sbc	r20, r16
     2bc:	51 0b       	sbc	r21, r17
     2be:	57 fd       	sbrc	r21, 7
     2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <_fpadd_parts+0x1d4>
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	33 82       	std	Z+3, r3	; 0x03
     2c6:	22 82       	std	Z+2, r2	; 0x02
     2c8:	24 83       	std	Z+4, r18	; 0x04
     2ca:	35 83       	std	Z+5, r19	; 0x05
     2cc:	46 83       	std	Z+6, r20	; 0x06
     2ce:	57 83       	std	Z+7, r21	; 0x07
     2d0:	1d c0       	rjmp	.+58     	; 0x30c <_fpadd_parts+0x20e>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	81 83       	std	Z+1, r24	; 0x01
     2d6:	33 82       	std	Z+3, r3	; 0x03
     2d8:	22 82       	std	Z+2, r2	; 0x02
     2da:	88 27       	eor	r24, r24
     2dc:	99 27       	eor	r25, r25
     2de:	dc 01       	movw	r26, r24
     2e0:	82 1b       	sub	r24, r18
     2e2:	93 0b       	sbc	r25, r19
     2e4:	a4 0b       	sbc	r26, r20
     2e6:	b5 0b       	sbc	r27, r21
     2e8:	84 83       	std	Z+4, r24	; 0x04
     2ea:	95 83       	std	Z+5, r25	; 0x05
     2ec:	a6 83       	std	Z+6, r26	; 0x06
     2ee:	b7 83       	std	Z+7, r27	; 0x07
     2f0:	0d c0       	rjmp	.+26     	; 0x30c <_fpadd_parts+0x20e>
     2f2:	22 0f       	add	r18, r18
     2f4:	33 1f       	adc	r19, r19
     2f6:	44 1f       	adc	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	24 83       	std	Z+4, r18	; 0x04
     2fc:	35 83       	std	Z+5, r19	; 0x05
     2fe:	46 83       	std	Z+6, r20	; 0x06
     300:	57 83       	std	Z+7, r21	; 0x07
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	93 83       	std	Z+3, r25	; 0x03
     30a:	82 83       	std	Z+2, r24	; 0x02
     30c:	24 81       	ldd	r18, Z+4	; 0x04
     30e:	35 81       	ldd	r19, Z+5	; 0x05
     310:	46 81       	ldd	r20, Z+6	; 0x06
     312:	57 81       	ldd	r21, Z+7	; 0x07
     314:	da 01       	movw	r26, r20
     316:	c9 01       	movw	r24, r18
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	a1 09       	sbc	r26, r1
     31c:	b1 09       	sbc	r27, r1
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	af 4f       	sbci	r26, 0xFF	; 255
     324:	bf 43       	sbci	r27, 0x3F	; 63
     326:	28 f3       	brcs	.-54     	; 0x2f2 <_fpadd_parts+0x1f4>
     328:	0b c0       	rjmp	.+22     	; 0x340 <_fpadd_parts+0x242>
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	33 82       	std	Z+3, r3	; 0x03
     32e:	22 82       	std	Z+2, r2	; 0x02
     330:	ea 0c       	add	r14, r10
     332:	fb 1c       	adc	r15, r11
     334:	0c 1d       	adc	r16, r12
     336:	1d 1d       	adc	r17, r13
     338:	e4 82       	std	Z+4, r14	; 0x04
     33a:	f5 82       	std	Z+5, r15	; 0x05
     33c:	06 83       	std	Z+6, r16	; 0x06
     33e:	17 83       	std	Z+7, r17	; 0x07
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	80 83       	st	Z, r24
     344:	24 81       	ldd	r18, Z+4	; 0x04
     346:	35 81       	ldd	r19, Z+5	; 0x05
     348:	46 81       	ldd	r20, Z+6	; 0x06
     34a:	57 81       	ldd	r21, Z+7	; 0x07
     34c:	57 ff       	sbrs	r21, 7
     34e:	1a c0       	rjmp	.+52     	; 0x384 <_fpadd_parts+0x286>
     350:	c9 01       	movw	r24, r18
     352:	aa 27       	eor	r26, r26
     354:	97 fd       	sbrc	r25, 7
     356:	a0 95       	com	r26
     358:	ba 2f       	mov	r27, r26
     35a:	81 70       	andi	r24, 0x01	; 1
     35c:	90 70       	andi	r25, 0x00	; 0
     35e:	a0 70       	andi	r26, 0x00	; 0
     360:	b0 70       	andi	r27, 0x00	; 0
     362:	56 95       	lsr	r21
     364:	47 95       	ror	r20
     366:	37 95       	ror	r19
     368:	27 95       	ror	r18
     36a:	82 2b       	or	r24, r18
     36c:	93 2b       	or	r25, r19
     36e:	a4 2b       	or	r26, r20
     370:	b5 2b       	or	r27, r21
     372:	84 83       	std	Z+4, r24	; 0x04
     374:	95 83       	std	Z+5, r25	; 0x05
     376:	a6 83       	std	Z+6, r26	; 0x06
     378:	b7 83       	std	Z+7, r27	; 0x07
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	93 81       	ldd	r25, Z+3	; 0x03
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
     384:	df 01       	movw	r26, r30
     386:	01 c0       	rjmp	.+2      	; 0x38a <_fpadd_parts+0x28c>
     388:	d2 01       	movw	r26, r4
     38a:	cd 01       	movw	r24, r26
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	e2 e1       	ldi	r30, 0x12	; 18
     392:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__>

00000396 <__subsf3>:
     396:	a0 e2       	ldi	r26, 0x20	; 32
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e1 ed       	ldi	r30, 0xD1	; 209
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     3a2:	69 83       	std	Y+1, r22	; 0x01
     3a4:	7a 83       	std	Y+2, r23	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	2d 83       	std	Y+5, r18	; 0x05
     3ac:	3e 83       	std	Y+6, r19	; 0x06
     3ae:	4f 83       	std	Y+7, r20	; 0x07
     3b0:	58 87       	std	Y+8, r21	; 0x08
     3b2:	e9 e0       	ldi	r30, 0x09	; 9
     3b4:	ee 2e       	mov	r14, r30
     3b6:	f1 2c       	mov	r15, r1
     3b8:	ec 0e       	add	r14, r28
     3ba:	fd 1e       	adc	r15, r29
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	b7 01       	movw	r22, r14
     3c2:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     3c6:	8e 01       	movw	r16, r28
     3c8:	0f 5e       	subi	r16, 0xEF	; 239
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	ce 01       	movw	r24, r28
     3ce:	05 96       	adiw	r24, 0x05	; 5
     3d0:	b8 01       	movw	r22, r16
     3d2:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     3d6:	8a 89       	ldd	r24, Y+18	; 0x12
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	89 27       	eor	r24, r25
     3dc:	8a 8b       	std	Y+18, r24	; 0x12
     3de:	c7 01       	movw	r24, r14
     3e0:	b8 01       	movw	r22, r16
     3e2:	ae 01       	movw	r20, r28
     3e4:	47 5e       	subi	r20, 0xE7	; 231
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     3ec:	0e 94 cf 04 	call	0x99e	; 0x99e <__pack_f>
     3f0:	a0 96       	adiw	r28, 0x20	; 32
     3f2:	e6 e0       	ldi	r30, 0x06	; 6
     3f4:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

000003f8 <__addsf3>:
     3f8:	a0 e2       	ldi	r26, 0x20	; 32
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     404:	69 83       	std	Y+1, r22	; 0x01
     406:	7a 83       	std	Y+2, r23	; 0x02
     408:	8b 83       	std	Y+3, r24	; 0x03
     40a:	9c 83       	std	Y+4, r25	; 0x04
     40c:	2d 83       	std	Y+5, r18	; 0x05
     40e:	3e 83       	std	Y+6, r19	; 0x06
     410:	4f 83       	std	Y+7, r20	; 0x07
     412:	58 87       	std	Y+8, r21	; 0x08
     414:	f9 e0       	ldi	r31, 0x09	; 9
     416:	ef 2e       	mov	r14, r31
     418:	f1 2c       	mov	r15, r1
     41a:	ec 0e       	add	r14, r28
     41c:	fd 1e       	adc	r15, r29
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	b7 01       	movw	r22, r14
     424:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     428:	8e 01       	movw	r16, r28
     42a:	0f 5e       	subi	r16, 0xEF	; 239
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	ce 01       	movw	r24, r28
     430:	05 96       	adiw	r24, 0x05	; 5
     432:	b8 01       	movw	r22, r16
     434:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     438:	c7 01       	movw	r24, r14
     43a:	b8 01       	movw	r22, r16
     43c:	ae 01       	movw	r20, r28
     43e:	47 5e       	subi	r20, 0xE7	; 231
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	0e 94 7f 00 	call	0xfe	; 0xfe <_fpadd_parts>
     446:	0e 94 cf 04 	call	0x99e	; 0x99e <__pack_f>
     44a:	a0 96       	adiw	r28, 0x20	; 32
     44c:	e6 e0       	ldi	r30, 0x06	; 6
     44e:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

00000452 <__mulsf3>:
     452:	a0 e2       	ldi	r26, 0x20	; 32
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ef e2       	ldi	r30, 0x2F	; 47
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__>
     45e:	69 83       	std	Y+1, r22	; 0x01
     460:	7a 83       	std	Y+2, r23	; 0x02
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	2d 83       	std	Y+5, r18	; 0x05
     468:	3e 83       	std	Y+6, r19	; 0x06
     46a:	4f 83       	std	Y+7, r20	; 0x07
     46c:	58 87       	std	Y+8, r21	; 0x08
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	be 01       	movw	r22, r28
     474:	67 5f       	subi	r22, 0xF7	; 247
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     47c:	ce 01       	movw	r24, r28
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	be 01       	movw	r22, r28
     482:	6f 5e       	subi	r22, 0xEF	; 239
     484:	7f 4f       	sbci	r23, 0xFF	; 255
     486:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	92 30       	cpi	r25, 0x02	; 2
     48e:	88 f0       	brcs	.+34     	; 0x4b2 <__mulsf3+0x60>
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	c8 f0       	brcs	.+50     	; 0x4c8 <__mulsf3+0x76>
     496:	94 30       	cpi	r25, 0x04	; 4
     498:	19 f4       	brne	.+6      	; 0x4a0 <__mulsf3+0x4e>
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	51 f4       	brne	.+20     	; 0x4b2 <__mulsf3+0x60>
     49e:	04 c0       	rjmp	.+8      	; 0x4a8 <__mulsf3+0x56>
     4a0:	84 30       	cpi	r24, 0x04	; 4
     4a2:	29 f4       	brne	.+10     	; 0x4ae <__mulsf3+0x5c>
     4a4:	92 30       	cpi	r25, 0x02	; 2
     4a6:	81 f4       	brne	.+32     	; 0x4c8 <__mulsf3+0x76>
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	c6 c0       	rjmp	.+396    	; 0x63a <__mulsf3+0x1e8>
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <__mulsf3+0x72>
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	8a 89       	ldd	r24, Y+18	; 0x12
     4b8:	98 13       	cpse	r25, r24
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	2a 87       	std	Y+10, r18	; 0x0a
     4be:	ce 01       	movw	r24, r28
     4c0:	09 96       	adiw	r24, 0x09	; 9
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <__mulsf3+0x1e8>
     4c4:	82 30       	cpi	r24, 0x02	; 2
     4c6:	49 f4       	brne	.+18     	; 0x4da <__mulsf3+0x88>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     4cc:	8a 89       	ldd	r24, Y+18	; 0x12
     4ce:	98 13       	cpse	r25, r24
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	2a 8b       	std	Y+18, r18	; 0x12
     4d4:	ce 01       	movw	r24, r28
     4d6:	41 96       	adiw	r24, 0x11	; 17
     4d8:	b0 c0       	rjmp	.+352    	; 0x63a <__mulsf3+0x1e8>
     4da:	2d 84       	ldd	r2, Y+13	; 0x0d
     4dc:	3e 84       	ldd	r3, Y+14	; 0x0e
     4de:	4f 84       	ldd	r4, Y+15	; 0x0f
     4e0:	58 88       	ldd	r5, Y+16	; 0x10
     4e2:	6d 88       	ldd	r6, Y+21	; 0x15
     4e4:	7e 88       	ldd	r7, Y+22	; 0x16
     4e6:	8f 88       	ldd	r8, Y+23	; 0x17
     4e8:	98 8c       	ldd	r9, Y+24	; 0x18
     4ea:	ee 24       	eor	r14, r14
     4ec:	ff 24       	eor	r15, r15
     4ee:	87 01       	movw	r16, r14
     4f0:	aa 24       	eor	r10, r10
     4f2:	bb 24       	eor	r11, r11
     4f4:	65 01       	movw	r12, r10
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	c1 01       	movw	r24, r2
     504:	81 70       	andi	r24, 0x01	; 1
     506:	90 70       	andi	r25, 0x00	; 0
     508:	89 2b       	or	r24, r25
     50a:	e9 f0       	breq	.+58     	; 0x546 <__mulsf3+0xf4>
     50c:	e6 0c       	add	r14, r6
     50e:	f7 1c       	adc	r15, r7
     510:	08 1d       	adc	r16, r8
     512:	19 1d       	adc	r17, r9
     514:	9a 01       	movw	r18, r20
     516:	ab 01       	movw	r20, r22
     518:	2a 0d       	add	r18, r10
     51a:	3b 1d       	adc	r19, r11
     51c:	4c 1d       	adc	r20, r12
     51e:	5d 1d       	adc	r21, r13
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e6 14       	cp	r14, r6
     52a:	f7 04       	cpc	r15, r7
     52c:	08 05       	cpc	r16, r8
     52e:	19 05       	cpc	r17, r9
     530:	20 f4       	brcc	.+8      	; 0x53a <__mulsf3+0xe8>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	a9 01       	movw	r20, r18
     53e:	48 0f       	add	r20, r24
     540:	59 1f       	adc	r21, r25
     542:	6a 1f       	adc	r22, r26
     544:	7b 1f       	adc	r23, r27
     546:	aa 0c       	add	r10, r10
     548:	bb 1c       	adc	r11, r11
     54a:	cc 1c       	adc	r12, r12
     54c:	dd 1c       	adc	r13, r13
     54e:	97 fe       	sbrs	r9, 7
     550:	08 c0       	rjmp	.+16     	; 0x562 <__mulsf3+0x110>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	a8 2a       	or	r10, r24
     55c:	b9 2a       	or	r11, r25
     55e:	ca 2a       	or	r12, r26
     560:	db 2a       	or	r13, r27
     562:	31 96       	adiw	r30, 0x01	; 1
     564:	e0 32       	cpi	r30, 0x20	; 32
     566:	f1 05       	cpc	r31, r1
     568:	49 f0       	breq	.+18     	; 0x57c <__mulsf3+0x12a>
     56a:	66 0c       	add	r6, r6
     56c:	77 1c       	adc	r7, r7
     56e:	88 1c       	adc	r8, r8
     570:	99 1c       	adc	r9, r9
     572:	56 94       	lsr	r5
     574:	47 94       	ror	r4
     576:	37 94       	ror	r3
     578:	27 94       	ror	r2
     57a:	c3 cf       	rjmp	.-122    	; 0x502 <__mulsf3+0xb0>
     57c:	fa 85       	ldd	r31, Y+10	; 0x0a
     57e:	ea 89       	ldd	r30, Y+18	; 0x12
     580:	2b 89       	ldd	r18, Y+19	; 0x13
     582:	3c 89       	ldd	r19, Y+20	; 0x14
     584:	8b 85       	ldd	r24, Y+11	; 0x0b
     586:	9c 85       	ldd	r25, Y+12	; 0x0c
     588:	28 0f       	add	r18, r24
     58a:	39 1f       	adc	r19, r25
     58c:	2e 5f       	subi	r18, 0xFE	; 254
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <__mulsf3+0x16e>
     592:	ca 01       	movw	r24, r20
     594:	81 70       	andi	r24, 0x01	; 1
     596:	90 70       	andi	r25, 0x00	; 0
     598:	89 2b       	or	r24, r25
     59a:	61 f0       	breq	.+24     	; 0x5b4 <__mulsf3+0x162>
     59c:	16 95       	lsr	r17
     59e:	07 95       	ror	r16
     5a0:	f7 94       	ror	r15
     5a2:	e7 94       	ror	r14
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e8       	ldi	r27, 0x80	; 128
     5ac:	e8 2a       	or	r14, r24
     5ae:	f9 2a       	or	r15, r25
     5b0:	0a 2b       	or	r16, r26
     5b2:	1b 2b       	or	r17, r27
     5b4:	76 95       	lsr	r23
     5b6:	67 95       	ror	r22
     5b8:	57 95       	ror	r21
     5ba:	47 95       	ror	r20
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	e7 cf       	rjmp	.-50     	; 0x592 <__mulsf3+0x140>
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <__mulsf3+0x18c>
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	66 1f       	adc	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	17 fd       	sbrc	r17, 7
     5d0:	41 60       	ori	r20, 0x01	; 1
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	00 1f       	adc	r16, r16
     5d8:	11 1f       	adc	r17, r17
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	30 40       	sbci	r19, 0x00	; 0
     5de:	40 30       	cpi	r20, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	59 07       	cpc	r21, r25
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	69 07       	cpc	r22, r25
     5e8:	90 e4       	ldi	r25, 0x40	; 64
     5ea:	79 07       	cpc	r23, r25
     5ec:	60 f3       	brcs	.-40     	; 0x5c6 <__mulsf3+0x174>
     5ee:	2b 8f       	std	Y+27, r18	; 0x1b
     5f0:	3c 8f       	std	Y+28, r19	; 0x1c
     5f2:	db 01       	movw	r26, r22
     5f4:	ca 01       	movw	r24, r20
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	90 70       	andi	r25, 0x00	; 0
     5fa:	a0 70       	andi	r26, 0x00	; 0
     5fc:	b0 70       	andi	r27, 0x00	; 0
     5fe:	80 34       	cpi	r24, 0x40	; 64
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	61 f4       	brne	.+24     	; 0x620 <__mulsf3+0x1ce>
     608:	47 fd       	sbrc	r20, 7
     60a:	0a c0       	rjmp	.+20     	; 0x620 <__mulsf3+0x1ce>
     60c:	e1 14       	cp	r14, r1
     60e:	f1 04       	cpc	r15, r1
     610:	01 05       	cpc	r16, r1
     612:	11 05       	cpc	r17, r1
     614:	29 f0       	breq	.+10     	; 0x620 <__mulsf3+0x1ce>
     616:	40 5c       	subi	r20, 0xC0	; 192
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	6f 4f       	sbci	r22, 0xFF	; 255
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	40 78       	andi	r20, 0x80	; 128
     620:	1a 8e       	std	Y+26, r1	; 0x1a
     622:	fe 17       	cp	r31, r30
     624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1d8>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	8a 8f       	std	Y+26, r24	; 0x1a
     62a:	4d 8f       	std	Y+29, r20	; 0x1d
     62c:	5e 8f       	std	Y+30, r21	; 0x1e
     62e:	6f 8f       	std	Y+31, r22	; 0x1f
     630:	78 a3       	std	Y+32, r23	; 0x20
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	89 8f       	std	Y+25, r24	; 0x19
     636:	ce 01       	movw	r24, r28
     638:	49 96       	adiw	r24, 0x19	; 25
     63a:	0e 94 cf 04 	call	0x99e	; 0x99e <__pack_f>
     63e:	a0 96       	adiw	r28, 0x20	; 32
     640:	e2 e1       	ldi	r30, 0x12	; 18
     642:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__>

00000646 <__gtsf2>:
     646:	a8 e1       	ldi	r26, 0x18	; 24
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e9 e2       	ldi	r30, 0x29	; 41
     64c:	f3 e0       	ldi	r31, 0x03	; 3
     64e:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     652:	69 83       	std	Y+1, r22	; 0x01
     654:	7a 83       	std	Y+2, r23	; 0x02
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	9c 83       	std	Y+4, r25	; 0x04
     65a:	2d 83       	std	Y+5, r18	; 0x05
     65c:	3e 83       	std	Y+6, r19	; 0x06
     65e:	4f 83       	std	Y+7, r20	; 0x07
     660:	58 87       	std	Y+8, r21	; 0x08
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	e8 2e       	mov	r14, r24
     666:	f1 2c       	mov	r15, r1
     668:	ec 0e       	add	r14, r28
     66a:	fd 1e       	adc	r15, r29
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	b7 01       	movw	r22, r14
     672:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     676:	8e 01       	movw	r16, r28
     678:	0f 5e       	subi	r16, 0xEF	; 239
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	ce 01       	movw	r24, r28
     67e:	05 96       	adiw	r24, 0x05	; 5
     680:	b8 01       	movw	r22, r16
     682:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     686:	89 85       	ldd	r24, Y+9	; 0x09
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	40 f0       	brcs	.+16     	; 0x69c <__gtsf2+0x56>
     68c:	89 89       	ldd	r24, Y+17	; 0x11
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	28 f0       	brcs	.+10     	; 0x69c <__gtsf2+0x56>
     692:	c7 01       	movw	r24, r14
     694:	b8 01       	movw	r22, r16
     696:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fpcmp_parts_f>
     69a:	01 c0       	rjmp	.+2      	; 0x69e <__gtsf2+0x58>
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	68 96       	adiw	r28, 0x18	; 24
     6a0:	e6 e0       	ldi	r30, 0x06	; 6
     6a2:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

000006a6 <__gesf2>:
     6a6:	a8 e1       	ldi	r26, 0x18	; 24
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	e9 e5       	ldi	r30, 0x59	; 89
     6ac:	f3 e0       	ldi	r31, 0x03	; 3
     6ae:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     6b2:	69 83       	std	Y+1, r22	; 0x01
     6b4:	7a 83       	std	Y+2, r23	; 0x02
     6b6:	8b 83       	std	Y+3, r24	; 0x03
     6b8:	9c 83       	std	Y+4, r25	; 0x04
     6ba:	2d 83       	std	Y+5, r18	; 0x05
     6bc:	3e 83       	std	Y+6, r19	; 0x06
     6be:	4f 83       	std	Y+7, r20	; 0x07
     6c0:	58 87       	std	Y+8, r21	; 0x08
     6c2:	89 e0       	ldi	r24, 0x09	; 9
     6c4:	e8 2e       	mov	r14, r24
     6c6:	f1 2c       	mov	r15, r1
     6c8:	ec 0e       	add	r14, r28
     6ca:	fd 1e       	adc	r15, r29
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	b7 01       	movw	r22, r14
     6d2:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     6d6:	8e 01       	movw	r16, r28
     6d8:	0f 5e       	subi	r16, 0xEF	; 239
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	ce 01       	movw	r24, r28
     6de:	05 96       	adiw	r24, 0x05	; 5
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     6e6:	89 85       	ldd	r24, Y+9	; 0x09
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	40 f0       	brcs	.+16     	; 0x6fc <__gesf2+0x56>
     6ec:	89 89       	ldd	r24, Y+17	; 0x11
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	28 f0       	brcs	.+10     	; 0x6fc <__gesf2+0x56>
     6f2:	c7 01       	movw	r24, r14
     6f4:	b8 01       	movw	r22, r16
     6f6:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fpcmp_parts_f>
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <__gesf2+0x58>
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	68 96       	adiw	r28, 0x18	; 24
     700:	e6 e0       	ldi	r30, 0x06	; 6
     702:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

00000706 <__ltsf2>:
     706:	a8 e1       	ldi	r26, 0x18	; 24
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	e9 e8       	ldi	r30, 0x89	; 137
     70c:	f3 e0       	ldi	r31, 0x03	; 3
     70e:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     712:	69 83       	std	Y+1, r22	; 0x01
     714:	7a 83       	std	Y+2, r23	; 0x02
     716:	8b 83       	std	Y+3, r24	; 0x03
     718:	9c 83       	std	Y+4, r25	; 0x04
     71a:	2d 83       	std	Y+5, r18	; 0x05
     71c:	3e 83       	std	Y+6, r19	; 0x06
     71e:	4f 83       	std	Y+7, r20	; 0x07
     720:	58 87       	std	Y+8, r21	; 0x08
     722:	89 e0       	ldi	r24, 0x09	; 9
     724:	e8 2e       	mov	r14, r24
     726:	f1 2c       	mov	r15, r1
     728:	ec 0e       	add	r14, r28
     72a:	fd 1e       	adc	r15, r29
     72c:	ce 01       	movw	r24, r28
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	b7 01       	movw	r22, r14
     732:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     736:	8e 01       	movw	r16, r28
     738:	0f 5e       	subi	r16, 0xEF	; 239
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
     73c:	ce 01       	movw	r24, r28
     73e:	05 96       	adiw	r24, 0x05	; 5
     740:	b8 01       	movw	r22, r16
     742:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     746:	89 85       	ldd	r24, Y+9	; 0x09
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	40 f0       	brcs	.+16     	; 0x75c <__ltsf2+0x56>
     74c:	89 89       	ldd	r24, Y+17	; 0x11
     74e:	82 30       	cpi	r24, 0x02	; 2
     750:	28 f0       	brcs	.+10     	; 0x75c <__ltsf2+0x56>
     752:	c7 01       	movw	r24, r14
     754:	b8 01       	movw	r22, r16
     756:	0e 94 1c 06 	call	0xc38	; 0xc38 <__fpcmp_parts_f>
     75a:	01 c0       	rjmp	.+2      	; 0x75e <__ltsf2+0x58>
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	68 96       	adiw	r28, 0x18	; 24
     760:	e6 e0       	ldi	r30, 0x06	; 6
     762:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

00000766 <__fixsfsi>:
     766:	ac e0       	ldi	r26, 0x0C	; 12
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	e9 eb       	ldi	r30, 0xB9	; 185
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__+0x20>
     772:	69 83       	std	Y+1, r22	; 0x01
     774:	7a 83       	std	Y+2, r23	; 0x02
     776:	8b 83       	std	Y+3, r24	; 0x03
     778:	9c 83       	std	Y+4, r25	; 0x04
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	be 01       	movw	r22, r28
     780:	6b 5f       	subi	r22, 0xFB	; 251
     782:	7f 4f       	sbci	r23, 0xFF	; 255
     784:	0e 94 a4 05 	call	0xb48	; 0xb48 <__unpack_f>
     788:	8d 81       	ldd	r24, Y+5	; 0x05
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	61 f1       	breq	.+88     	; 0x7e6 <__fixsfsi+0x80>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	50 f1       	brcs	.+84     	; 0x7e6 <__fixsfsi+0x80>
     792:	84 30       	cpi	r24, 0x04	; 4
     794:	21 f4       	brne	.+8      	; 0x79e <__fixsfsi+0x38>
     796:	8e 81       	ldd	r24, Y+6	; 0x06
     798:	88 23       	and	r24, r24
     79a:	51 f1       	breq	.+84     	; 0x7f0 <__fixsfsi+0x8a>
     79c:	2e c0       	rjmp	.+92     	; 0x7fa <__fixsfsi+0x94>
     79e:	2f 81       	ldd	r18, Y+7	; 0x07
     7a0:	38 85       	ldd	r19, Y+8	; 0x08
     7a2:	37 fd       	sbrc	r19, 7
     7a4:	20 c0       	rjmp	.+64     	; 0x7e6 <__fixsfsi+0x80>
     7a6:	6e 81       	ldd	r22, Y+6	; 0x06
     7a8:	2f 31       	cpi	r18, 0x1F	; 31
     7aa:	31 05       	cpc	r19, r1
     7ac:	1c f0       	brlt	.+6      	; 0x7b4 <__fixsfsi+0x4e>
     7ae:	66 23       	and	r22, r22
     7b0:	f9 f0       	breq	.+62     	; 0x7f0 <__fixsfsi+0x8a>
     7b2:	23 c0       	rjmp	.+70     	; 0x7fa <__fixsfsi+0x94>
     7b4:	8e e1       	ldi	r24, 0x1E	; 30
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	82 1b       	sub	r24, r18
     7ba:	93 0b       	sbc	r25, r19
     7bc:	29 85       	ldd	r18, Y+9	; 0x09
     7be:	3a 85       	ldd	r19, Y+10	; 0x0a
     7c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     7c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <__fixsfsi+0x68>
     7c6:	56 95       	lsr	r21
     7c8:	47 95       	ror	r20
     7ca:	37 95       	ror	r19
     7cc:	27 95       	ror	r18
     7ce:	8a 95       	dec	r24
     7d0:	d2 f7       	brpl	.-12     	; 0x7c6 <__fixsfsi+0x60>
     7d2:	66 23       	and	r22, r22
     7d4:	b1 f0       	breq	.+44     	; 0x802 <__fixsfsi+0x9c>
     7d6:	50 95       	com	r21
     7d8:	40 95       	com	r20
     7da:	30 95       	com	r19
     7dc:	21 95       	neg	r18
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
     7e0:	4f 4f       	sbci	r20, 0xFF	; 255
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	0e c0       	rjmp	.+28     	; 0x802 <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	09 c0       	rjmp	.+18     	; 0x802 <__fixsfsi+0x9c>
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	3f ef       	ldi	r19, 0xFF	; 255
     7f4:	4f ef       	ldi	r20, 0xFF	; 255
     7f6:	5f e7       	ldi	r21, 0x7F	; 127
     7f8:	04 c0       	rjmp	.+8      	; 0x802 <__fixsfsi+0x9c>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e8       	ldi	r21, 0x80	; 128
     802:	b9 01       	movw	r22, r18
     804:	ca 01       	movw	r24, r20
     806:	2c 96       	adiw	r28, 0x0c	; 12
     808:	e2 e0       	ldi	r30, 0x02	; 2
     80a:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__+0x20>

0000080e <__floatunsisf>:
     80e:	a8 e0       	ldi	r26, 0x08	; 8
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 35 12 	jmp	0x246a	; 0x246a <__prologue_saves__+0x10>
     81a:	7b 01       	movw	r14, r22
     81c:	8c 01       	movw	r16, r24
     81e:	61 15       	cp	r22, r1
     820:	71 05       	cpc	r23, r1
     822:	81 05       	cpc	r24, r1
     824:	91 05       	cpc	r25, r1
     826:	19 f4       	brne	.+6      	; 0x82e <__floatunsisf+0x20>
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	60 c0       	rjmp	.+192    	; 0x8ee <__floatunsisf+0xe0>
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	8e e1       	ldi	r24, 0x1E	; 30
     834:	c8 2e       	mov	r12, r24
     836:	d1 2c       	mov	r13, r1
     838:	dc 82       	std	Y+4, r13	; 0x04
     83a:	cb 82       	std	Y+3, r12	; 0x03
     83c:	ed 82       	std	Y+5, r14	; 0x05
     83e:	fe 82       	std	Y+6, r15	; 0x06
     840:	0f 83       	std	Y+7, r16	; 0x07
     842:	18 87       	std	Y+8, r17	; 0x08
     844:	c8 01       	movw	r24, r16
     846:	b7 01       	movw	r22, r14
     848:	0e 94 80 04 	call	0x900	; 0x900 <__clzsi2>
     84c:	fc 01       	movw	r30, r24
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	f7 ff       	sbrs	r31, 7
     852:	3b c0       	rjmp	.+118    	; 0x8ca <__floatunsisf+0xbc>
     854:	22 27       	eor	r18, r18
     856:	33 27       	eor	r19, r19
     858:	2e 1b       	sub	r18, r30
     85a:	3f 0b       	sbc	r19, r31
     85c:	57 01       	movw	r10, r14
     85e:	68 01       	movw	r12, r16
     860:	02 2e       	mov	r0, r18
     862:	04 c0       	rjmp	.+8      	; 0x86c <__floatunsisf+0x5e>
     864:	d6 94       	lsr	r13
     866:	c7 94       	ror	r12
     868:	b7 94       	ror	r11
     86a:	a7 94       	ror	r10
     86c:	0a 94       	dec	r0
     86e:	d2 f7       	brpl	.-12     	; 0x864 <__floatunsisf+0x56>
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	04 c0       	rjmp	.+8      	; 0x88a <__floatunsisf+0x7c>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	aa 1f       	adc	r26, r26
     888:	bb 1f       	adc	r27, r27
     88a:	2a 95       	dec	r18
     88c:	d2 f7       	brpl	.-12     	; 0x882 <__floatunsisf+0x74>
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	a1 09       	sbc	r26, r1
     892:	b1 09       	sbc	r27, r1
     894:	8e 21       	and	r24, r14
     896:	9f 21       	and	r25, r15
     898:	a0 23       	and	r26, r16
     89a:	b1 23       	and	r27, r17
     89c:	00 97       	sbiw	r24, 0x00	; 0
     89e:	a1 05       	cpc	r26, r1
     8a0:	b1 05       	cpc	r27, r1
     8a2:	21 f0       	breq	.+8      	; 0x8ac <__floatunsisf+0x9e>
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	4a 29       	or	r20, r10
     8ae:	5b 29       	or	r21, r11
     8b0:	6c 29       	or	r22, r12
     8b2:	7d 29       	or	r23, r13
     8b4:	4d 83       	std	Y+5, r20	; 0x05
     8b6:	5e 83       	std	Y+6, r21	; 0x06
     8b8:	6f 83       	std	Y+7, r22	; 0x07
     8ba:	78 87       	std	Y+8, r23	; 0x08
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	8e 1b       	sub	r24, r30
     8c2:	9f 0b       	sbc	r25, r31
     8c4:	9c 83       	std	Y+4, r25	; 0x04
     8c6:	8b 83       	std	Y+3, r24	; 0x03
     8c8:	12 c0       	rjmp	.+36     	; 0x8ee <__floatunsisf+0xe0>
     8ca:	30 97       	sbiw	r30, 0x00	; 0
     8cc:	81 f0       	breq	.+32     	; 0x8ee <__floatunsisf+0xe0>
     8ce:	0e 2e       	mov	r0, r30
     8d0:	04 c0       	rjmp	.+8      	; 0x8da <__floatunsisf+0xcc>
     8d2:	ee 0c       	add	r14, r14
     8d4:	ff 1c       	adc	r15, r15
     8d6:	00 1f       	adc	r16, r16
     8d8:	11 1f       	adc	r17, r17
     8da:	0a 94       	dec	r0
     8dc:	d2 f7       	brpl	.-12     	; 0x8d2 <__floatunsisf+0xc4>
     8de:	ed 82       	std	Y+5, r14	; 0x05
     8e0:	fe 82       	std	Y+6, r15	; 0x06
     8e2:	0f 83       	std	Y+7, r16	; 0x07
     8e4:	18 87       	std	Y+8, r17	; 0x08
     8e6:	ce 1a       	sub	r12, r30
     8e8:	df 0a       	sbc	r13, r31
     8ea:	dc 82       	std	Y+4, r13	; 0x04
     8ec:	cb 82       	std	Y+3, r12	; 0x03
     8ee:	1a 82       	std	Y+2, r1	; 0x02
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	0e 94 cf 04 	call	0x99e	; 0x99e <__pack_f>
     8f8:	28 96       	adiw	r28, 0x08	; 8
     8fa:	ea e0       	ldi	r30, 0x0A	; 10
     8fc:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__epilogue_restores__+0x10>

00000900 <__clzsi2>:
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	7b 01       	movw	r14, r22
     90a:	8c 01       	movw	r16, r24
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	e8 16       	cp	r14, r24
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	f8 06       	cpc	r15, r24
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	08 07       	cpc	r16, r24
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	18 07       	cpc	r17, r24
     91c:	88 f4       	brcc	.+34     	; 0x940 <__clzsi2+0x40>
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	e8 16       	cp	r14, r24
     922:	f1 04       	cpc	r15, r1
     924:	01 05       	cpc	r16, r1
     926:	11 05       	cpc	r17, r1
     928:	31 f0       	breq	.+12     	; 0x936 <__clzsi2+0x36>
     92a:	28 f0       	brcs	.+10     	; 0x936 <__clzsi2+0x36>
     92c:	88 e0       	ldi	r24, 0x08	; 8
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	a0 e0       	ldi	r26, 0x00	; 0
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	17 c0       	rjmp	.+46     	; 0x964 <__clzsi2+0x64>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	a0 e0       	ldi	r26, 0x00	; 0
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	12 c0       	rjmp	.+36     	; 0x964 <__clzsi2+0x64>
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	e8 16       	cp	r14, r24
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	f8 06       	cpc	r15, r24
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	08 07       	cpc	r16, r24
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	18 07       	cpc	r17, r24
     950:	28 f0       	brcs	.+10     	; 0x95c <__clzsi2+0x5c>
     952:	88 e1       	ldi	r24, 0x18	; 24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	04 c0       	rjmp	.+8      	; 0x964 <__clzsi2+0x64>
     95c:	80 e1       	ldi	r24, 0x10	; 16
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	20 e2       	ldi	r18, 0x20	; 32
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	28 1b       	sub	r18, r24
     96e:	39 0b       	sbc	r19, r25
     970:	4a 0b       	sbc	r20, r26
     972:	5b 0b       	sbc	r21, r27
     974:	04 c0       	rjmp	.+8      	; 0x97e <__clzsi2+0x7e>
     976:	16 95       	lsr	r17
     978:	07 95       	ror	r16
     97a:	f7 94       	ror	r15
     97c:	e7 94       	ror	r14
     97e:	8a 95       	dec	r24
     980:	d2 f7       	brpl	.-12     	; 0x976 <__clzsi2+0x76>
     982:	f7 01       	movw	r30, r14
     984:	e8 5f       	subi	r30, 0xF8	; 248
     986:	fe 4f       	sbci	r31, 0xFE	; 254
     988:	80 81       	ld	r24, Z
     98a:	28 1b       	sub	r18, r24
     98c:	31 09       	sbc	r19, r1
     98e:	41 09       	sbc	r20, r1
     990:	51 09       	sbc	r21, r1
     992:	c9 01       	movw	r24, r18
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	08 95       	ret

0000099e <__pack_f>:
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	fc 01       	movw	r30, r24
     9aa:	e4 80       	ldd	r14, Z+4	; 0x04
     9ac:	f5 80       	ldd	r15, Z+5	; 0x05
     9ae:	06 81       	ldd	r16, Z+6	; 0x06
     9b0:	17 81       	ldd	r17, Z+7	; 0x07
     9b2:	d1 80       	ldd	r13, Z+1	; 0x01
     9b4:	80 81       	ld	r24, Z
     9b6:	82 30       	cpi	r24, 0x02	; 2
     9b8:	48 f4       	brcc	.+18     	; 0x9cc <__pack_f+0x2e>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e1       	ldi	r26, 0x10	; 16
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	e8 2a       	or	r14, r24
     9c4:	f9 2a       	or	r15, r25
     9c6:	0a 2b       	or	r16, r26
     9c8:	1b 2b       	or	r17, r27
     9ca:	a5 c0       	rjmp	.+330    	; 0xb16 <__pack_f+0x178>
     9cc:	84 30       	cpi	r24, 0x04	; 4
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <__pack_f+0x34>
     9d0:	9f c0       	rjmp	.+318    	; 0xb10 <__pack_f+0x172>
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	21 f4       	brne	.+8      	; 0x9de <__pack_f+0x40>
     9d6:	ee 24       	eor	r14, r14
     9d8:	ff 24       	eor	r15, r15
     9da:	87 01       	movw	r16, r14
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <__pack_f+0x4a>
     9de:	e1 14       	cp	r14, r1
     9e0:	f1 04       	cpc	r15, r1
     9e2:	01 05       	cpc	r16, r1
     9e4:	11 05       	cpc	r17, r1
     9e6:	19 f4       	brne	.+6      	; 0x9ee <__pack_f+0x50>
     9e8:	e0 e0       	ldi	r30, 0x00	; 0
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	96 c0       	rjmp	.+300    	; 0xb1a <__pack_f+0x17c>
     9ee:	62 81       	ldd	r22, Z+2	; 0x02
     9f0:	73 81       	ldd	r23, Z+3	; 0x03
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	62 38       	cpi	r22, 0x82	; 130
     9f6:	79 07       	cpc	r23, r25
     9f8:	0c f0       	brlt	.+2      	; 0x9fc <__pack_f+0x5e>
     9fa:	5b c0       	rjmp	.+182    	; 0xab2 <__pack_f+0x114>
     9fc:	22 e8       	ldi	r18, 0x82	; 130
     9fe:	3f ef       	ldi	r19, 0xFF	; 255
     a00:	26 1b       	sub	r18, r22
     a02:	37 0b       	sbc	r19, r23
     a04:	2a 31       	cpi	r18, 0x1A	; 26
     a06:	31 05       	cpc	r19, r1
     a08:	2c f0       	brlt	.+10     	; 0xa14 <__pack_f+0x76>
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	2a c0       	rjmp	.+84     	; 0xa68 <__pack_f+0xca>
     a14:	b8 01       	movw	r22, r16
     a16:	a7 01       	movw	r20, r14
     a18:	02 2e       	mov	r0, r18
     a1a:	04 c0       	rjmp	.+8      	; 0xa24 <__pack_f+0x86>
     a1c:	76 95       	lsr	r23
     a1e:	67 95       	ror	r22
     a20:	57 95       	ror	r21
     a22:	47 95       	ror	r20
     a24:	0a 94       	dec	r0
     a26:	d2 f7       	brpl	.-12     	; 0xa1c <__pack_f+0x7e>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a0 e0       	ldi	r26, 0x00	; 0
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0x9c>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	aa 1f       	adc	r26, r26
     a38:	bb 1f       	adc	r27, r27
     a3a:	2a 95       	dec	r18
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__pack_f+0x94>
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	a1 09       	sbc	r26, r1
     a42:	b1 09       	sbc	r27, r1
     a44:	8e 21       	and	r24, r14
     a46:	9f 21       	and	r25, r15
     a48:	a0 23       	and	r26, r16
     a4a:	b1 23       	and	r27, r17
     a4c:	00 97       	sbiw	r24, 0x00	; 0
     a4e:	a1 05       	cpc	r26, r1
     a50:	b1 05       	cpc	r27, r1
     a52:	21 f0       	breq	.+8      	; 0xa5c <__pack_f+0xbe>
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	9a 01       	movw	r18, r20
     a5e:	ab 01       	movw	r20, r22
     a60:	28 2b       	or	r18, r24
     a62:	39 2b       	or	r19, r25
     a64:	4a 2b       	or	r20, r26
     a66:	5b 2b       	or	r21, r27
     a68:	da 01       	movw	r26, r20
     a6a:	c9 01       	movw	r24, r18
     a6c:	8f 77       	andi	r24, 0x7F	; 127
     a6e:	90 70       	andi	r25, 0x00	; 0
     a70:	a0 70       	andi	r26, 0x00	; 0
     a72:	b0 70       	andi	r27, 0x00	; 0
     a74:	80 34       	cpi	r24, 0x40	; 64
     a76:	91 05       	cpc	r25, r1
     a78:	a1 05       	cpc	r26, r1
     a7a:	b1 05       	cpc	r27, r1
     a7c:	39 f4       	brne	.+14     	; 0xa8c <__pack_f+0xee>
     a7e:	27 ff       	sbrs	r18, 7
     a80:	09 c0       	rjmp	.+18     	; 0xa94 <__pack_f+0xf6>
     a82:	20 5c       	subi	r18, 0xC0	; 192
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	4f 4f       	sbci	r20, 0xFF	; 255
     a88:	5f 4f       	sbci	r21, 0xFF	; 255
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__pack_f+0xf6>
     a8c:	21 5c       	subi	r18, 0xC1	; 193
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	4f 4f       	sbci	r20, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	e0 e0       	ldi	r30, 0x00	; 0
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	20 30       	cpi	r18, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	3a 07       	cpc	r19, r26
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	4a 07       	cpc	r20, r26
     aa2:	a0 e4       	ldi	r26, 0x40	; 64
     aa4:	5a 07       	cpc	r21, r26
     aa6:	10 f0       	brcs	.+4      	; 0xaac <__pack_f+0x10e>
     aa8:	e1 e0       	ldi	r30, 0x01	; 1
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	79 01       	movw	r14, r18
     aae:	8a 01       	movw	r16, r20
     ab0:	27 c0       	rjmp	.+78     	; 0xb00 <__pack_f+0x162>
     ab2:	60 38       	cpi	r22, 0x80	; 128
     ab4:	71 05       	cpc	r23, r1
     ab6:	64 f5       	brge	.+88     	; 0xb10 <__pack_f+0x172>
     ab8:	fb 01       	movw	r30, r22
     aba:	e1 58       	subi	r30, 0x81	; 129
     abc:	ff 4f       	sbci	r31, 0xFF	; 255
     abe:	d8 01       	movw	r26, r16
     ac0:	c7 01       	movw	r24, r14
     ac2:	8f 77       	andi	r24, 0x7F	; 127
     ac4:	90 70       	andi	r25, 0x00	; 0
     ac6:	a0 70       	andi	r26, 0x00	; 0
     ac8:	b0 70       	andi	r27, 0x00	; 0
     aca:	80 34       	cpi	r24, 0x40	; 64
     acc:	91 05       	cpc	r25, r1
     ace:	a1 05       	cpc	r26, r1
     ad0:	b1 05       	cpc	r27, r1
     ad2:	39 f4       	brne	.+14     	; 0xae2 <__pack_f+0x144>
     ad4:	e7 fe       	sbrs	r14, 7
     ad6:	0d c0       	rjmp	.+26     	; 0xaf2 <__pack_f+0x154>
     ad8:	80 e4       	ldi	r24, 0x40	; 64
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__pack_f+0x14c>
     ae2:	8f e3       	ldi	r24, 0x3F	; 63
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e8 0e       	add	r14, r24
     aec:	f9 1e       	adc	r15, r25
     aee:	0a 1f       	adc	r16, r26
     af0:	1b 1f       	adc	r17, r27
     af2:	17 ff       	sbrs	r17, 7
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <__pack_f+0x162>
     af6:	16 95       	lsr	r17
     af8:	07 95       	ror	r16
     afa:	f7 94       	ror	r15
     afc:	e7 94       	ror	r14
     afe:	31 96       	adiw	r30, 0x01	; 1
     b00:	87 e0       	ldi	r24, 0x07	; 7
     b02:	16 95       	lsr	r17
     b04:	07 95       	ror	r16
     b06:	f7 94       	ror	r15
     b08:	e7 94       	ror	r14
     b0a:	8a 95       	dec	r24
     b0c:	d1 f7       	brne	.-12     	; 0xb02 <__pack_f+0x164>
     b0e:	05 c0       	rjmp	.+10     	; 0xb1a <__pack_f+0x17c>
     b10:	ee 24       	eor	r14, r14
     b12:	ff 24       	eor	r15, r15
     b14:	87 01       	movw	r16, r14
     b16:	ef ef       	ldi	r30, 0xFF	; 255
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	6e 2f       	mov	r22, r30
     b1c:	67 95       	ror	r22
     b1e:	66 27       	eor	r22, r22
     b20:	67 95       	ror	r22
     b22:	90 2f       	mov	r25, r16
     b24:	9f 77       	andi	r25, 0x7F	; 127
     b26:	d7 94       	ror	r13
     b28:	dd 24       	eor	r13, r13
     b2a:	d7 94       	ror	r13
     b2c:	8e 2f       	mov	r24, r30
     b2e:	86 95       	lsr	r24
     b30:	49 2f       	mov	r20, r25
     b32:	46 2b       	or	r20, r22
     b34:	58 2f       	mov	r21, r24
     b36:	5d 29       	or	r21, r13
     b38:	b7 01       	movw	r22, r14
     b3a:	ca 01       	movw	r24, r20
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	df 90       	pop	r13
     b46:	08 95       	ret

00000b48 <__unpack_f>:
     b48:	fc 01       	movw	r30, r24
     b4a:	db 01       	movw	r26, r22
     b4c:	40 81       	ld	r20, Z
     b4e:	51 81       	ldd	r21, Z+1	; 0x01
     b50:	22 81       	ldd	r18, Z+2	; 0x02
     b52:	62 2f       	mov	r22, r18
     b54:	6f 77       	andi	r22, 0x7F	; 127
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	22 1f       	adc	r18, r18
     b5a:	22 27       	eor	r18, r18
     b5c:	22 1f       	adc	r18, r18
     b5e:	93 81       	ldd	r25, Z+3	; 0x03
     b60:	89 2f       	mov	r24, r25
     b62:	88 0f       	add	r24, r24
     b64:	82 2b       	or	r24, r18
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	99 1f       	adc	r25, r25
     b6c:	99 27       	eor	r25, r25
     b6e:	99 1f       	adc	r25, r25
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	9c 93       	st	X, r25
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	21 15       	cp	r18, r1
     b78:	31 05       	cpc	r19, r1
     b7a:	a9 f5       	brne	.+106    	; 0xbe6 <__unpack_f+0x9e>
     b7c:	41 15       	cp	r20, r1
     b7e:	51 05       	cpc	r21, r1
     b80:	61 05       	cpc	r22, r1
     b82:	71 05       	cpc	r23, r1
     b84:	11 f4       	brne	.+4      	; 0xb8a <__unpack_f+0x42>
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	37 c0       	rjmp	.+110    	; 0xbf8 <__unpack_f+0xb0>
     b8a:	82 e8       	ldi	r24, 0x82	; 130
     b8c:	9f ef       	ldi	r25, 0xFF	; 255
     b8e:	13 96       	adiw	r26, 0x03	; 3
     b90:	9c 93       	st	X, r25
     b92:	8e 93       	st	-X, r24
     b94:	12 97       	sbiw	r26, 0x02	; 2
     b96:	9a 01       	movw	r18, r20
     b98:	ab 01       	movw	r20, r22
     b9a:	67 e0       	ldi	r22, 0x07	; 7
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	44 1f       	adc	r20, r20
     ba2:	55 1f       	adc	r21, r21
     ba4:	6a 95       	dec	r22
     ba6:	d1 f7       	brne	.-12     	; 0xb9c <__unpack_f+0x54>
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	8c 93       	st	X, r24
     bac:	0d c0       	rjmp	.+26     	; 0xbc8 <__unpack_f+0x80>
     bae:	22 0f       	add	r18, r18
     bb0:	33 1f       	adc	r19, r19
     bb2:	44 1f       	adc	r20, r20
     bb4:	55 1f       	adc	r21, r21
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	8d 91       	ld	r24, X+
     bba:	9c 91       	ld	r25, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	13 96       	adiw	r26, 0x03	; 3
     bc2:	9c 93       	st	X, r25
     bc4:	8e 93       	st	-X, r24
     bc6:	12 97       	sbiw	r26, 0x02	; 2
     bc8:	20 30       	cpi	r18, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	38 07       	cpc	r19, r24
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	48 07       	cpc	r20, r24
     bd2:	80 e4       	ldi	r24, 0x40	; 64
     bd4:	58 07       	cpc	r21, r24
     bd6:	58 f3       	brcs	.-42     	; 0xbae <__unpack_f+0x66>
     bd8:	14 96       	adiw	r26, 0x04	; 4
     bda:	2d 93       	st	X+, r18
     bdc:	3d 93       	st	X+, r19
     bde:	4d 93       	st	X+, r20
     be0:	5c 93       	st	X, r21
     be2:	17 97       	sbiw	r26, 0x07	; 7
     be4:	08 95       	ret
     be6:	2f 3f       	cpi	r18, 0xFF	; 255
     be8:	31 05       	cpc	r19, r1
     bea:	79 f4       	brne	.+30     	; 0xc0a <__unpack_f+0xc2>
     bec:	41 15       	cp	r20, r1
     bee:	51 05       	cpc	r21, r1
     bf0:	61 05       	cpc	r22, r1
     bf2:	71 05       	cpc	r23, r1
     bf4:	19 f4       	brne	.+6      	; 0xbfc <__unpack_f+0xb4>
     bf6:	84 e0       	ldi	r24, 0x04	; 4
     bf8:	8c 93       	st	X, r24
     bfa:	08 95       	ret
     bfc:	64 ff       	sbrs	r22, 4
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <__unpack_f+0xbe>
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	8c 93       	st	X, r24
     c04:	12 c0       	rjmp	.+36     	; 0xc2a <__unpack_f+0xe2>
     c06:	1c 92       	st	X, r1
     c08:	10 c0       	rjmp	.+32     	; 0xc2a <__unpack_f+0xe2>
     c0a:	2f 57       	subi	r18, 0x7F	; 127
     c0c:	30 40       	sbci	r19, 0x00	; 0
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	3c 93       	st	X, r19
     c12:	2e 93       	st	-X, r18
     c14:	12 97       	sbiw	r26, 0x02	; 2
     c16:	83 e0       	ldi	r24, 0x03	; 3
     c18:	8c 93       	st	X, r24
     c1a:	87 e0       	ldi	r24, 0x07	; 7
     c1c:	44 0f       	add	r20, r20
     c1e:	55 1f       	adc	r21, r21
     c20:	66 1f       	adc	r22, r22
     c22:	77 1f       	adc	r23, r23
     c24:	8a 95       	dec	r24
     c26:	d1 f7       	brne	.-12     	; 0xc1c <__unpack_f+0xd4>
     c28:	70 64       	ori	r23, 0x40	; 64
     c2a:	14 96       	adiw	r26, 0x04	; 4
     c2c:	4d 93       	st	X+, r20
     c2e:	5d 93       	st	X+, r21
     c30:	6d 93       	st	X+, r22
     c32:	7c 93       	st	X, r23
     c34:	17 97       	sbiw	r26, 0x07	; 7
     c36:	08 95       	ret

00000c38 <__fpcmp_parts_f>:
     c38:	1f 93       	push	r17
     c3a:	dc 01       	movw	r26, r24
     c3c:	fb 01       	movw	r30, r22
     c3e:	9c 91       	ld	r25, X
     c40:	92 30       	cpi	r25, 0x02	; 2
     c42:	08 f4       	brcc	.+2      	; 0xc46 <__fpcmp_parts_f+0xe>
     c44:	47 c0       	rjmp	.+142    	; 0xcd4 <__fpcmp_parts_f+0x9c>
     c46:	80 81       	ld	r24, Z
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	08 f4       	brcc	.+2      	; 0xc4e <__fpcmp_parts_f+0x16>
     c4c:	43 c0       	rjmp	.+134    	; 0xcd4 <__fpcmp_parts_f+0x9c>
     c4e:	94 30       	cpi	r25, 0x04	; 4
     c50:	51 f4       	brne	.+20     	; 0xc66 <__fpcmp_parts_f+0x2e>
     c52:	11 96       	adiw	r26, 0x01	; 1
     c54:	1c 91       	ld	r17, X
     c56:	84 30       	cpi	r24, 0x04	; 4
     c58:	99 f5       	brne	.+102    	; 0xcc0 <__fpcmp_parts_f+0x88>
     c5a:	81 81       	ldd	r24, Z+1	; 0x01
     c5c:	68 2f       	mov	r22, r24
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	61 1b       	sub	r22, r17
     c62:	71 09       	sbc	r23, r1
     c64:	3f c0       	rjmp	.+126    	; 0xce4 <__fpcmp_parts_f+0xac>
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	21 f0       	breq	.+8      	; 0xc72 <__fpcmp_parts_f+0x3a>
     c6a:	92 30       	cpi	r25, 0x02	; 2
     c6c:	31 f4       	brne	.+12     	; 0xc7a <__fpcmp_parts_f+0x42>
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	b9 f1       	breq	.+110    	; 0xce0 <__fpcmp_parts_f+0xa8>
     c72:	81 81       	ldd	r24, Z+1	; 0x01
     c74:	88 23       	and	r24, r24
     c76:	89 f1       	breq	.+98     	; 0xcda <__fpcmp_parts_f+0xa2>
     c78:	2d c0       	rjmp	.+90     	; 0xcd4 <__fpcmp_parts_f+0x9c>
     c7a:	11 96       	adiw	r26, 0x01	; 1
     c7c:	1c 91       	ld	r17, X
     c7e:	11 97       	sbiw	r26, 0x01	; 1
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	f1 f0       	breq	.+60     	; 0xcc0 <__fpcmp_parts_f+0x88>
     c84:	81 81       	ldd	r24, Z+1	; 0x01
     c86:	18 17       	cp	r17, r24
     c88:	d9 f4       	brne	.+54     	; 0xcc0 <__fpcmp_parts_f+0x88>
     c8a:	12 96       	adiw	r26, 0x02	; 2
     c8c:	2d 91       	ld	r18, X+
     c8e:	3c 91       	ld	r19, X
     c90:	13 97       	sbiw	r26, 0x03	; 3
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	82 17       	cp	r24, r18
     c98:	93 07       	cpc	r25, r19
     c9a:	94 f0       	brlt	.+36     	; 0xcc0 <__fpcmp_parts_f+0x88>
     c9c:	28 17       	cp	r18, r24
     c9e:	39 07       	cpc	r19, r25
     ca0:	bc f0       	brlt	.+46     	; 0xcd0 <__fpcmp_parts_f+0x98>
     ca2:	14 96       	adiw	r26, 0x04	; 4
     ca4:	8d 91       	ld	r24, X+
     ca6:	9d 91       	ld	r25, X+
     ca8:	0d 90       	ld	r0, X+
     caa:	bc 91       	ld	r27, X
     cac:	a0 2d       	mov	r26, r0
     cae:	24 81       	ldd	r18, Z+4	; 0x04
     cb0:	35 81       	ldd	r19, Z+5	; 0x05
     cb2:	46 81       	ldd	r20, Z+6	; 0x06
     cb4:	57 81       	ldd	r21, Z+7	; 0x07
     cb6:	28 17       	cp	r18, r24
     cb8:	39 07       	cpc	r19, r25
     cba:	4a 07       	cpc	r20, r26
     cbc:	5b 07       	cpc	r21, r27
     cbe:	18 f4       	brcc	.+6      	; 0xcc6 <__fpcmp_parts_f+0x8e>
     cc0:	11 23       	and	r17, r17
     cc2:	41 f0       	breq	.+16     	; 0xcd4 <__fpcmp_parts_f+0x9c>
     cc4:	0a c0       	rjmp	.+20     	; 0xcda <__fpcmp_parts_f+0xa2>
     cc6:	82 17       	cp	r24, r18
     cc8:	93 07       	cpc	r25, r19
     cca:	a4 07       	cpc	r26, r20
     ccc:	b5 07       	cpc	r27, r21
     cce:	40 f4       	brcc	.+16     	; 0xce0 <__fpcmp_parts_f+0xa8>
     cd0:	11 23       	and	r17, r17
     cd2:	19 f0       	breq	.+6      	; 0xcda <__fpcmp_parts_f+0xa2>
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <__fpcmp_parts_f+0xac>
     cda:	6f ef       	ldi	r22, 0xFF	; 255
     cdc:	7f ef       	ldi	r23, 0xFF	; 255
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <__fpcmp_parts_f+0xac>
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	cb 01       	movw	r24, r22
     ce6:	1f 91       	pop	r17
     ce8:	08 95       	ret

00000cea <DIO_U8SetPinDirection>:

#include"DIO_register.h"
#include"DIO_private.h"
#include"DIO_interface.h"
#include"DIO_config.h"
u8 DIO_U8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction){
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	28 97       	sbiw	r28, 0x08	; 8
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	8a 83       	std	Y+2, r24	; 0x02
     d00:	6b 83       	std	Y+3, r22	; 0x03
     d02:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     d04:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	88 30       	cpi	r24, 0x08	; 8
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <DIO_U8SetPinDirection+0x24>
     d0c:	b3 c0       	rjmp	.+358    	; 0xe74 <DIO_U8SetPinDirection+0x18a>
		if(Copy_u8Direction==DIO_u8PIN_INPUT){
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	88 23       	and	r24, r24
     d12:	09 f0       	breq	.+2      	; 0xd16 <DIO_U8SetPinDirection+0x2c>
     d14:	56 c0       	rjmp	.+172    	; 0xdc2 <DIO_U8SetPinDirection+0xd8>
			switch(Copy_u8Port){
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	38 87       	std	Y+8, r19	; 0x08
     d1e:	2f 83       	std	Y+7, r18	; 0x07
     d20:	8f 81       	ldd	r24, Y+7	; 0x07
     d22:	98 85       	ldd	r25, Y+8	; 0x08
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	91 05       	cpc	r25, r1
     d28:	f9 f0       	breq	.+62     	; 0xd68 <DIO_U8SetPinDirection+0x7e>
     d2a:	2f 81       	ldd	r18, Y+7	; 0x07
     d2c:	38 85       	ldd	r19, Y+8	; 0x08
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	79 f1       	breq	.+94     	; 0xd92 <DIO_U8SetPinDirection+0xa8>
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	98 85       	ldd	r25, Y+8	; 0x08
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	09 f0       	breq	.+2      	; 0xd3e <DIO_U8SetPinDirection+0x54>
     d3c:	3f c0       	rjmp	.+126    	; 0xdbc <DIO_U8SetPinDirection+0xd2>
			case DIO_u8PORTD:CLEAR_BIT(DDRD,Copy_u8Pin);break;
     d3e:	aa e2       	ldi	r26, 0x2A	; 42
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	ea e2       	ldi	r30, 0x2A	; 42
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_U8SetPinDirection+0x72>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_U8SetPinDirection+0x6e>
     d60:	80 95       	com	r24
     d62:	84 23       	and	r24, r20
     d64:	8c 93       	st	X, r24
     d66:	88 c0       	rjmp	.+272    	; 0xe78 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTB:CLEAR_BIT(DDRB,Copy_u8Pin);break;
     d68:	a4 e2       	ldi	r26, 0x24	; 36
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e4 e2       	ldi	r30, 0x24	; 36
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	48 2f       	mov	r20, r24
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 2e       	mov	r0, r18
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <DIO_U8SetPinDirection+0x9c>
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <DIO_U8SetPinDirection+0x98>
     d8a:	80 95       	com	r24
     d8c:	84 23       	and	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	73 c0       	rjmp	.+230    	; 0xe78 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTC:CLEAR_BIT(DDRC,Copy_u8Pin);break;
     d92:	a7 e2       	ldi	r26, 0x27	; 39
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e7 e2       	ldi	r30, 0x27	; 39
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_U8SetPinDirection+0xc6>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_U8SetPinDirection+0xc2>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	5e c0       	rjmp	.+188    	; 0xe78 <DIO_U8SetPinDirection+0x18e>
			default :Local_u8ErrorState=1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	5b c0       	rjmp	.+182    	; 0xe78 <DIO_U8SetPinDirection+0x18e>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT){
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	09 f0       	breq	.+2      	; 0xdca <DIO_U8SetPinDirection+0xe0>
     dc8:	52 c0       	rjmp	.+164    	; 0xe6e <DIO_U8SetPinDirection+0x184>
			switch(Copy_u8Port){
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	3e 83       	std	Y+6, r19	; 0x06
     dd2:	2d 83       	std	Y+5, r18	; 0x05
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	91 05       	cpc	r25, r1
     ddc:	e9 f0       	breq	.+58     	; 0xe18 <DIO_U8SetPinDirection+0x12e>
     dde:	2d 81       	ldd	r18, Y+5	; 0x05
     de0:	3e 81       	ldd	r19, Y+6	; 0x06
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	61 f1       	breq	.+88     	; 0xe40 <DIO_U8SetPinDirection+0x156>
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	e1 f5       	brne	.+120    	; 0xe68 <DIO_U8SetPinDirection+0x17e>
			case DIO_u8PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
     df0:	aa e2       	ldi	r26, 0x2A	; 42
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	ea e2       	ldi	r30, 0x2A	; 42
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_U8SetPinDirection+0x124>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_U8SetPinDirection+0x120>
     e12:	84 2b       	or	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	30 c0       	rjmp	.+96     	; 0xe78 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
     e18:	a4 e2       	ldi	r26, 0x24	; 36
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e4 e2       	ldi	r30, 0x24	; 36
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_U8SetPinDirection+0x14c>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_U8SetPinDirection+0x148>
     e3a:	84 2b       	or	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	1c c0       	rjmp	.+56     	; 0xe78 <DIO_U8SetPinDirection+0x18e>
			case DIO_u8PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
     e40:	a7 e2       	ldi	r26, 0x27	; 39
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e7 e2       	ldi	r30, 0x27	; 39
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_U8SetPinDirection+0x174>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_U8SetPinDirection+0x170>
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <DIO_U8SetPinDirection+0x18e>
			default :Local_u8ErrorState=1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <DIO_U8SetPinDirection+0x18e>
			}
		}
		else{
			Local_u8ErrorState=1;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_U8SetPinDirection+0x18e>
		}

	}
	else{
		Local_u8ErrorState=1;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     e78:	89 81       	ldd	r24, Y+1	; 0x01

}
     e7a:	28 96       	adiw	r28, 0x08	; 8
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <DIO_U8SetPortirection>:
u8 DIO_U8SetPortirection(u8 Copy_u8Port,u8 Copy_u8Direction){
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <DIO_U8SetPortirection+0x6>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <DIO_U8SetPortirection+0x8>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	8a 83       	std	Y+2, r24	; 0x02
     e9c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     e9e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3d 83       	std	Y+5, r19	; 0x05
     ea8:	2c 83       	std	Y+4, r18	; 0x04
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	91 05       	cpc	r25, r1
     eb2:	71 f0       	breq	.+28     	; 0xed0 <DIO_U8SetPortirection+0x44>
     eb4:	2c 81       	ldd	r18, Y+4	; 0x04
     eb6:	3d 81       	ldd	r19, Y+5	; 0x05
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	31 05       	cpc	r19, r1
     ebc:	71 f0       	breq	.+28     	; 0xeda <DIO_U8SetPortirection+0x4e>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	79 f4       	brne	.+30     	; 0xee4 <DIO_U8SetPortirection+0x58>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
     ec6:	ea e2       	ldi	r30, 0x2A	; 42
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	80 83       	st	Z, r24
     ece:	0c c0       	rjmp	.+24     	; 0xee8 <DIO_U8SetPortirection+0x5c>
	case DIO_u8PORTB: DDRB =Copy_u8Direction; break;
     ed0:	e4 e2       	ldi	r30, 0x24	; 36
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	80 83       	st	Z, r24
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <DIO_U8SetPortirection+0x5c>
	case DIO_u8PORTC: DDRC =Copy_u8Direction; break;
     eda:	e7 e2       	ldi	r30, 0x27	; 39
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	80 83       	st	Z, r24
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_U8SetPortirection+0x5c>
	default:Local_u8ErrorState=1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorState;
     ee8:	89 81       	ldd	r24, Y+1	; 0x01

}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <DIO_U8SetPinValue>:
u8 DIO_U8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Vlaue){
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	28 97       	sbiw	r28, 0x08	; 8
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	8a 83       	std	Y+2, r24	; 0x02
     f10:	6b 83       	std	Y+3, r22	; 0x03
     f12:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     f14:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7){
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	88 30       	cpi	r24, 0x08	; 8
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <DIO_U8SetPinValue+0x24>
     f1c:	b3 c0       	rjmp	.+358    	; 0x1084 <DIO_U8SetPinValue+0x18a>
			if(Copy_u8Vlaue==DIO_u8PIN_LOW){
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	88 23       	and	r24, r24
     f22:	09 f0       	breq	.+2      	; 0xf26 <DIO_U8SetPinValue+0x2c>
     f24:	56 c0       	rjmp	.+172    	; 0xfd2 <DIO_U8SetPinValue+0xd8>
				switch(Copy_u8Port){
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	38 87       	std	Y+8, r19	; 0x08
     f2e:	2f 83       	std	Y+7, r18	; 0x07
     f30:	8f 81       	ldd	r24, Y+7	; 0x07
     f32:	98 85       	ldd	r25, Y+8	; 0x08
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	f9 f0       	breq	.+62     	; 0xf78 <DIO_U8SetPinValue+0x7e>
     f3a:	2f 81       	ldd	r18, Y+7	; 0x07
     f3c:	38 85       	ldd	r19, Y+8	; 0x08
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	79 f1       	breq	.+94     	; 0xfa2 <DIO_U8SetPinValue+0xa8>
     f44:	8f 81       	ldd	r24, Y+7	; 0x07
     f46:	98 85       	ldd	r25, Y+8	; 0x08
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	09 f0       	breq	.+2      	; 0xf4e <DIO_U8SetPinValue+0x54>
     f4c:	3f c0       	rjmp	.+126    	; 0xfcc <DIO_U8SetPinValue+0xd2>
				case DIO_u8PORTD:CLEAR_BIT(PORTD,Copy_u8Pin);break;
     f4e:	ab e2       	ldi	r26, 0x2B	; 43
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e2       	ldi	r30, 0x2B	; 43
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_U8SetPinValue+0x72>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_U8SetPinValue+0x6e>
     f70:	80 95       	com	r24
     f72:	84 23       	and	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	88 c0       	rjmp	.+272    	; 0x1088 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTB:CLEAR_BIT(PORTB,Copy_u8Pin);break;
     f78:	a5 e2       	ldi	r26, 0x25	; 37
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e5 e2       	ldi	r30, 0x25	; 37
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_U8SetPinValue+0x9c>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_U8SetPinValue+0x98>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	73 c0       	rjmp	.+230    	; 0x1088 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTC:CLEAR_BIT(PORTC,Copy_u8Pin);break;
     fa2:	a8 e2       	ldi	r26, 0x28	; 40
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e8 e2       	ldi	r30, 0x28	; 40
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_U8SetPinValue+0xc6>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_U8SetPinValue+0xc2>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	5e c0       	rjmp	.+188    	; 0x1088 <DIO_U8SetPinValue+0x18e>
				default :Local_u8ErrorState=1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	5b c0       	rjmp	.+182    	; 0x1088 <DIO_U8SetPinValue+0x18e>
				}
			}
			else if(Copy_u8Vlaue==DIO_u8PIN_HIGH)
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	09 f0       	breq	.+2      	; 0xfda <DIO_U8SetPinValue+0xe0>
     fd8:	52 c0       	rjmp	.+164    	; 0x107e <DIO_U8SetPinValue+0x184>
			{
				switch(Copy_u8Port){
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3e 83       	std	Y+6, r19	; 0x06
     fe2:	2d 83       	std	Y+5, r18	; 0x05
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	91 05       	cpc	r25, r1
     fec:	e9 f0       	breq	.+58     	; 0x1028 <DIO_U8SetPinValue+0x12e>
     fee:	2d 81       	ldd	r18, Y+5	; 0x05
     ff0:	3e 81       	ldd	r19, Y+6	; 0x06
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	61 f1       	breq	.+88     	; 0x1050 <DIO_U8SetPinValue+0x156>
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	e1 f5       	brne	.+120    	; 0x1078 <DIO_U8SetPinValue+0x17e>
				case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    1000:	ab e2       	ldi	r26, 0x2B	; 43
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	eb e2       	ldi	r30, 0x2B	; 43
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_U8SetPinValue+0x124>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_U8SetPinValue+0x120>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	30 c0       	rjmp	.+96     	; 0x1088 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    1028:	a5 e2       	ldi	r26, 0x25	; 37
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e5 e2       	ldi	r30, 0x25	; 37
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_U8SetPinValue+0x14c>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_U8SetPinValue+0x148>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	1c c0       	rjmp	.+56     	; 0x1088 <DIO_U8SetPinValue+0x18e>
				case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_U8SetPinValue+0x174>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_U8SetPinValue+0x170>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	08 c0       	rjmp	.+16     	; 0x1088 <DIO_U8SetPinValue+0x18e>
				default :Local_u8ErrorState=1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <DIO_U8SetPinValue+0x18e>
				}
			}
			else{
				Local_u8ErrorState=1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_U8SetPinValue+0x18e>
			}

		}
		else{
			Local_u8ErrorState=1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
    1088:	89 81       	ldd	r24, Y+1	; 0x01

}
    108a:	28 96       	adiw	r28, 0x08	; 8
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <DIO_U8SetPortValue>:
u8 DIO_U8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <DIO_U8SetPortValue+0x6>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <DIO_U8SetPortValue+0x8>
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	8a 83       	std	Y+2, r24	; 0x02
    10ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    10ae:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3d 83       	std	Y+5, r19	; 0x05
    10b8:	2c 83       	std	Y+4, r18	; 0x04
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	9d 81       	ldd	r25, Y+5	; 0x05
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 05       	cpc	r25, r1
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <DIO_U8SetPortValue+0x44>
    10c4:	2c 81       	ldd	r18, Y+4	; 0x04
    10c6:	3d 81       	ldd	r19, Y+5	; 0x05
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	71 f0       	breq	.+28     	; 0x10ea <DIO_U8SetPortValue+0x4e>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	79 f4       	brne	.+30     	; 0x10f4 <DIO_U8SetPortValue+0x58>
		case DIO_u8PORTD: PORTD =Copy_u8Value; break;
    10d6:	eb e2       	ldi	r30, 0x2B	; 43
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	80 83       	st	Z, r24
    10de:	0c c0       	rjmp	.+24     	; 0x10f8 <DIO_U8SetPortValue+0x5c>
		case DIO_u8PORTB: PORTB =Copy_u8Value; break;
    10e0:	e5 e2       	ldi	r30, 0x25	; 37
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	80 83       	st	Z, r24
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <DIO_U8SetPortValue+0x5c>
		case DIO_u8PORTC: PORTC =Copy_u8Value; break;
    10ea:	e8 e2       	ldi	r30, 0x28	; 40
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	80 83       	st	Z, r24
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_U8SetPortValue+0x5c>
		default:Local_u8ErrorState=1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01

		}
	return Local_u8ErrorState;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01

}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_u8Value ){
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	27 97       	sbiw	r28, 0x07	; 7
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	8a 83       	std	Y+2, r24	; 0x02
    1120:	6b 83       	std	Y+3, r22	; 0x03
    1122:	5d 83       	std	Y+5, r21	; 0x05
    1124:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1126:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value!=NULL&&Copy_u8Pin<=DIO_u8PIN7){
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	9d 81       	ldd	r25, Y+5	; 0x05
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	09 f4       	brne	.+2      	; 0x1132 <DIO_U8GetPinValue+0x28>
    1130:	58 c0       	rjmp	.+176    	; 0x11e2 <DIO_U8GetPinValue+0xd8>
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 30       	cpi	r24, 0x08	; 8
    1136:	08 f0       	brcs	.+2      	; 0x113a <DIO_U8GetPinValue+0x30>
    1138:	54 c0       	rjmp	.+168    	; 0x11e2 <DIO_U8GetPinValue+0xd8>
		switch(Copy_u8Port){
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3f 83       	std	Y+7, r19	; 0x07
    1142:	2e 83       	std	Y+6, r18	; 0x06
    1144:	4e 81       	ldd	r20, Y+6	; 0x06
    1146:	5f 81       	ldd	r21, Y+7	; 0x07
    1148:	41 30       	cpi	r20, 0x01	; 1
    114a:	51 05       	cpc	r21, r1
    114c:	f9 f0       	breq	.+62     	; 0x118c <DIO_U8GetPinValue+0x82>
    114e:	8e 81       	ldd	r24, Y+6	; 0x06
    1150:	9f 81       	ldd	r25, Y+7	; 0x07
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	91 05       	cpc	r25, r1
    1156:	71 f1       	breq	.+92     	; 0x11b4 <DIO_U8GetPinValue+0xaa>
    1158:	2e 81       	ldd	r18, Y+6	; 0x06
    115a:	3f 81       	ldd	r19, Y+7	; 0x07
    115c:	21 15       	cp	r18, r1
    115e:	31 05       	cpc	r19, r1
    1160:	09 f0       	breq	.+2      	; 0x1164 <DIO_U8GetPinValue+0x5a>
    1162:	3c c0       	rjmp	.+120    	; 0x11dc <DIO_U8GetPinValue+0xd2>
		case DIO_u8PORTD: *Copy_u8Value=GET_BIT(PIND ,Copy_u8Pin);break;
    1164:	e9 e2       	ldi	r30, 0x29	; 41
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_U8GetPinValue+0x72>
    1178:	55 95       	asr	r21
    117a:	47 95       	ror	r20
    117c:	8a 95       	dec	r24
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_U8GetPinValue+0x6e>
    1180:	ca 01       	movw	r24, r20
    1182:	81 70       	andi	r24, 0x01	; 1
    1184:	ec 81       	ldd	r30, Y+4	; 0x04
    1186:	fd 81       	ldd	r31, Y+5	; 0x05
    1188:	80 83       	st	Z, r24
    118a:	2d c0       	rjmp	.+90     	; 0x11e6 <DIO_U8GetPinValue+0xdc>
        case DIO_u8PORTB: *Copy_u8Value=GET_BIT(PINB ,Copy_u8Pin);break;
    118c:	e3 e2       	ldi	r30, 0x23	; 35
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_U8GetPinValue+0x9a>
    11a0:	55 95       	asr	r21
    11a2:	47 95       	ror	r20
    11a4:	8a 95       	dec	r24
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_U8GetPinValue+0x96>
    11a8:	ca 01       	movw	r24, r20
    11aa:	81 70       	andi	r24, 0x01	; 1
    11ac:	ec 81       	ldd	r30, Y+4	; 0x04
    11ae:	fd 81       	ldd	r31, Y+5	; 0x05
    11b0:	80 83       	st	Z, r24
    11b2:	19 c0       	rjmp	.+50     	; 0x11e6 <DIO_U8GetPinValue+0xdc>
        case DIO_u8PORTC:*Copy_u8Value=GET_BIT(PINC  ,Copy_u8Pin);break;
    11b4:	e6 e2       	ldi	r30, 0x26	; 38
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a9 01       	movw	r20, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_U8GetPinValue+0xc2>
    11c8:	55 95       	asr	r21
    11ca:	47 95       	ror	r20
    11cc:	8a 95       	dec	r24
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_U8GetPinValue+0xbe>
    11d0:	ca 01       	movw	r24, r20
    11d2:	81 70       	andi	r24, 0x01	; 1
    11d4:	ec 81       	ldd	r30, Y+4	; 0x04
    11d6:	fd 81       	ldd	r31, Y+5	; 0x05
    11d8:	80 83       	st	Z, r24
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <DIO_U8GetPinValue+0xdc>
        default:Local_u8ErrorState=1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_U8GetPinValue+0xdc>
		}
	}
	else{
		Local_u8ErrorState=1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01

}
    11e8:	27 96       	adiw	r28, 0x07	; 7
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <delay_function>:
#include "NRF_config.h"
/*start of low level functions, specific to the mcu and compiler*/

/*delay in miliseconds*/
void delay_function(uint32_t duration_ms)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	62 97       	sbiw	r28, 0x12	; 18
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	6f 87       	std	Y+15, r22	; 0x0f
    1210:	78 8b       	std	Y+16, r23	; 0x10
    1212:	89 8b       	std	Y+17, r24	; 0x11
    1214:	9a 8b       	std	Y+18, r25	; 0x12

	_delay_ms(duration_ms);
    1216:	6f 85       	ldd	r22, Y+15	; 0x0f
    1218:	78 89       	ldd	r23, Y+16	; 0x10
    121a:	89 89       	ldd	r24, Y+17	; 0x11
    121c:	9a 89       	ldd	r25, Y+18	; 0x12
    121e:	0e 94 07 04 	call	0x80e	; 0x80e <__floatunsisf>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	8b 87       	std	Y+11, r24	; 0x0b
    1228:	9c 87       	std	Y+12, r25	; 0x0c
    122a:	ad 87       	std	Y+13, r26	; 0x0d
    122c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1230:	7c 85       	ldd	r23, Y+12	; 0x0c
    1232:	8d 85       	ldd	r24, Y+13	; 0x0d
    1234:	9e 85       	ldd	r25, Y+14	; 0x0e
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a e7       	ldi	r20, 0x7A	; 122
    123c:	53 e4       	ldi	r21, 0x43	; 67
    123e:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8f 83       	std	Y+7, r24	; 0x07
    1248:	98 87       	std	Y+8, r25	; 0x08
    124a:	a9 87       	std	Y+9, r26	; 0x09
    124c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <delay_function+0x76>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <delay_function+0xf4>
	else if (__tmp > 65535)
    1270:	6f 81       	ldd	r22, Y+7	; 0x07
    1272:	78 85       	ldd	r23, Y+8	; 0x08
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	9a 85       	ldd	r25, Y+10	; 0x0a
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <delay_function+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <delay_function+0xd6>
    12b2:	89 e1       	ldi	r24, 0x19	; 25
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <delay_function+0xc4>
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <delay_function+0xb8>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <delay_function+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <delay_function+0x100>
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
}
    1302:	62 96       	adiw	r28, 0x12	; 18
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <SPI_Initializer>:

/*contains all SPI configuations, such as pins and control registers*/
/*SPI control: master, interrupts disabled, clock polarity low when idle, clock phase falling edge, clock up tp 1 MHz*/
void SPI_Initializer()
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	  SPCR = 0X51;                      /*master, interrupt disabled, spi enabled, clock polarity low when idle, clock phase falling edge, 1 MHz clock*/
    131c:	ec e4       	ldi	r30, 0x4C	; 76
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	81 e5       	ldi	r24, 0x51	; 81
    1322:	80 83       	st	Z, r24

}
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <pinout_Initializer>:

/*contains all CSN and CE pins gpio configurations, including setting them as gpio outputs and turning SPI off and CE '1'*/
void pinout_Initializer()
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinDirection(NRF_PORT, CE_PIN, DIO_u8PIN_OUTPUT);
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	66 e0       	ldi	r22, 0x06	; 6
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	0e 94 75 06 	call	0xcea	; 0xcea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(NRF_PORT, CSN_PIN, DIO_u8PIN_OUTPUT);
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	67 e0       	ldi	r22, 0x07	; 7
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	0e 94 75 06 	call	0xcea	; 0xcea <DIO_U8SetPinDirection>
	DIO_U8SetPinValue(NRF_PORT, CSN_PIN, SPI_OFF);
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	67 e0       	ldi	r22, 0x07	; 7
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_U8SetPinValue>
	nrf24_CE(1);                         /*no need to change this line*/
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <nrf24_CE>



}
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <nrf24_SPI>:

/*CSN pin manipulation to high or low (SPI on or off)*/
void nrf24_SPI(uint8_t input)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	0f 92       	push	r0
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	89 83       	std	Y+1, r24	; 0x01
	if (input == SPI_ON){
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	88 23       	and	r24, r24
    136c:	31 f4       	brne	.+12     	; 0x137a <nrf24_SPI+0x1e>
		DIO_U8SetPinValue(NRF_PORT, CSN_PIN, DIO_u8PIN_LOW);
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	67 e0       	ldi	r22, 0x07	; 7
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_U8SetPinValue>
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <nrf24_SPI+0x28>
	}
	else{
		DIO_U8SetPinValue(NRF_PORT, CSN_PIN, DIO_u8PIN_HIGH);
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	67 e0       	ldi	r22, 0x07	; 7
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_U8SetPinValue>

	}

}
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <SPI_send_command>:

/*1 byte SPI shift register send and receive routine*/
uint8_t SPI_send_command(uint8_t command)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	89 83       	std	Y+1, r24	; 0x01
	SPDR = command;
    1398:	ee e4       	ldi	r30, 0x4E	; 78
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	80 83       	st	Z, r24
	while ((SPSR & (1 << SPSR_SPIF)) == 0);
    13a0:	ed e4       	ldi	r30, 0x4D	; 77
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	88 23       	and	r24, r24
    13a8:	dc f7       	brge	.-10     	; 0x13a0 <SPI_send_command+0x14>
	return SPDR;
    13aa:	ee e4       	ldi	r30, 0x4E	; 78
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
}
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <nrf24_CE>:

/*CE pin maniplation to high or low*/
void nrf24_CE(uint8_t input)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01
	if (input == CE_ON)
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	31 f4       	brne	.+12     	; 0x13d6 <nrf24_CE+0x1e>
		DIO_U8SetPinValue(NRF_PORT, CE_PIN, DIO_u8PIN_HIGH);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	66 e0       	ldi	r22, 0x06	; 6
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_U8SetPinValue>
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <nrf24_CE+0x28>
	else
		DIO_U8SetPinValue(NRF_PORT, CE_PIN, DIO_u8PIN_LOW);
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	66 e0       	ldi	r22, 0x06	; 6
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 7d 07 	call	0xefa	; 0xefa <DIO_U8SetPinValue>
}
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <nrf24_dynamic_ack>:

/*function to enable or disable dynamic acknowledge. if enabled, you can disable acknowledge
   on a specific payload with W_TX_PAYLOAD_NOACK or enable acknowledge using W_TX_PAYLOAD commands.
   if disabled, you cannot disable acknowledging a payload. manipulates EN_DYN_ACK inside FEATURE*/
void nrf24_dynamic_ack(uint8_t state)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	0f 92       	push	r0
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	89 83       	std	Y+1, r24	; 0x01
	if (state == ENABLE)
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	b1 f4       	brne	.+44     	; 0x1426 <nrf24_dynamic_ack+0x3e>
	{
		nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
    13fa:	2b e2       	ldi	r18, 0x2B	; 43
    13fc:	32 e0       	ldi	r19, 0x02	; 2
    13fe:	8d e1       	ldi	r24, 0x1D	; 29
    1400:	b9 01       	movw	r22, r18
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
		register_new_value = register_current_value | (1 << EN_DYN_ACK);
    140a:	80 91 2b 02 	lds	r24, 0x022B
    140e:	81 60       	ori	r24, 0x01	; 1
    1410:	80 93 2c 02 	sts	0x022C, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    1414:	2c e2       	ldi	r18, 0x2C	; 44
    1416:	32 e0       	ldi	r19, 0x02	; 2
    1418:	8d e1       	ldi	r24, 0x1D	; 29
    141a:	b9 01       	movw	r22, r18
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
    1424:	15 c0       	rjmp	.+42     	; 0x1450 <nrf24_dynamic_ack+0x68>
	}
	else
	{
		nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
    1426:	2b e2       	ldi	r18, 0x2B	; 43
    1428:	32 e0       	ldi	r19, 0x02	; 2
    142a:	8d e1       	ldi	r24, 0x1D	; 29
    142c:	b9 01       	movw	r22, r18
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
		register_new_value = register_current_value & (~(1 << EN_DYN_ACK));
    1436:	80 91 2b 02 	lds	r24, 0x022B
    143a:	8e 7f       	andi	r24, 0xFE	; 254
    143c:	80 93 2c 02 	sts	0x022C, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    1440:	2c e2       	ldi	r18, 0x2C	; 44
    1442:	32 e0       	ldi	r19, 0x02	; 2
    1444:	8d e1       	ldi	r24, 0x1D	; 29
    1446:	b9 01       	movw	r22, r18
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	}
}
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <nrf24_transmit>:

/*function for PTX device to transmit 1 to 32 bytes of data, used for both dynamic payload length
   and static payload length methods. acknowledgemet state could be NO_ACK_MODE or ACK_MODE*/
uint8_t nrf24_transmit(uint8_t *payload, uint8_t payload_width, uint8_t acknowledgement_state)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	00 d0       	rcall	.+0      	; 0x145e <nrf24_transmit+0x6>
    145e:	00 d0       	rcall	.+0      	; 0x1460 <nrf24_transmit+0x8>
    1460:	0f 92       	push	r0
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	6b 83       	std	Y+3, r22	; 0x03
    146c:	4c 83       	std	Y+4, r20	; 0x04
	nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);         /*in order to check TX_FIFO status*/
    146e:	2b e2       	ldi	r18, 0x2B	; 43
    1470:	32 e0       	ldi	r19, 0x02	; 2
    1472:	87 e0       	ldi	r24, 0x07	; 7
    1474:	b9 01       	movw	r22, r18
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
	if ((!(register_current_value & (1 << TX_FULL))) && (current_mode == PTX))
    147e:	80 91 2b 02 	lds	r24, 0x022B
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	80 72       	andi	r24, 0x20	; 32
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	b1 f4       	brne	.+44     	; 0x14ba <nrf24_transmit+0x62>
    148e:	80 91 08 02 	lds	r24, 0x0208
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 f4       	brne	.+36     	; 0x14ba <nrf24_transmit+0x62>
	{
		current_acknowledgement_state = acknowledgement_state;      /*setting the acknowledgement state to either NO_ACK or ACK, based on input*/
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	80 93 09 02 	sts	0x0209, r24
		if (dynamic_payload == ENABLE)
    149c:	80 91 29 02 	lds	r24, 0x0229
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	19 f4       	brne	.+6      	; 0x14aa <nrf24_transmit+0x52>
			payload_width = current_payload_width;
    14a4:	80 91 2f 02 	lds	r24, 0x022F
    14a8:	8b 83       	std	Y+3, r24	; 0x03
		nrf24_send_payload(payload, payload_width);                 /*the actual function to send data*/
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02
    14ae:	6b 81       	ldd	r22, Y+3	; 0x03
    14b0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <nrf24_send_payload>
		return (TRANSMIT_BEGIN);                                     /*TX FIFO is not full and nrf24l01+ mode is standby ii or ptx*/
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <nrf24_transmit+0x64>
	}
	else
	{
		return (TRANSMIT_FAIL);            /*TX FIFO full or wrong mode*/
    14ba:	1d 82       	std	Y+5, r1	; 0x05
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <nrf24_send_payload>:

/*used by nrf24_transmit function to send the actual data*/
void nrf24_send_payload(uint8_t *payload, uint8_t payload_width)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <nrf24_send_payload+0x6>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	6b 83       	std	Y+3, r22	; 0x03
	nrf24_SPI(SPI_ON);
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
	if (current_acknowledgement_state == NO_ACK_MODE)
    14e6:	80 91 09 02 	lds	r24, 0x0209
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	21 f4       	brne	.+8      	; 0x14f6 <nrf24_send_payload+0x28>
		SPI_command = W_TX_PAYLOAD_NOACK;
    14ee:	80 eb       	ldi	r24, 0xB0	; 176
    14f0:	80 93 2a 02 	sts	0x022A, r24
    14f4:	03 c0       	rjmp	.+6      	; 0x14fc <nrf24_send_payload+0x2e>
	else
		SPI_command = W_TX_PAYLOAD;
    14f6:	80 ea       	ldi	r24, 0xA0	; 160
    14f8:	80 93 2a 02 	sts	0x022A, r24
	SPI_send_command(SPI_command);
    14fc:	80 91 2a 02 	lds	r24, 0x022A
    1500:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
    1504:	11 c0       	rjmp	.+34     	; 0x1528 <nrf24_send_payload+0x5a>
	for (; payload_width; payload_width--)
	{
		SPI_command = *payload;
    1506:	e9 81       	ldd	r30, Y+1	; 0x01
    1508:	fa 81       	ldd	r31, Y+2	; 0x02
    150a:	80 81       	ld	r24, Z
    150c:	80 93 2a 02 	sts	0x022A, r24
		SPI_send_command(SPI_command);
    1510:	80 91 2a 02 	lds	r24, 0x022A
    1514:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
		payload++;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
	if (current_acknowledgement_state == NO_ACK_MODE)
		SPI_command = W_TX_PAYLOAD_NOACK;
	else
		SPI_command = W_TX_PAYLOAD;
	SPI_send_command(SPI_command);
	for (; payload_width; payload_width--)
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	81 50       	subi	r24, 0x01	; 1
    1526:	8b 83       	std	Y+3, r24	; 0x03
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	88 23       	and	r24, r24
    152c:	61 f7       	brne	.-40     	; 0x1506 <nrf24_send_payload+0x38>
	{
		SPI_command = *payload;
		SPI_send_command(SPI_command);
		payload++;
	}
	nrf24_SPI(SPI_OFF);
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <nrf24_transmit_status>:

/*reports back transmit status: TRANSMIT_DONE, TRANSMIT_FAILED (in case of reaching maximum number of retransmits in auto acknowledgement mode)
  and TRANSMIT_IN_PROGRESS, if neither flags are set. automatically resets the '1' flags.*/
uint8_t nrf24_transmit_status()
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);      /*status register is read to check TX_DS flag*/
    154a:	2b e2       	ldi	r18, 0x2B	; 43
    154c:	32 e0       	ldi	r19, 0x02	; 2
    154e:	87 e0       	ldi	r24, 0x07	; 7
    1550:	b9 01       	movw	r22, r18
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
	if (register_current_value & (1 << TX_DS))                          /*if the TX_DS == 1, */
    155a:	80 91 2b 02 	lds	r24, 0x022B
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	80 72       	andi	r24, 0x20	; 32
    1564:	90 70       	andi	r25, 0x00	; 0
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	59 f0       	breq	.+22     	; 0x1580 <nrf24_transmit_status+0x40>
	{
		nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the TX_DS flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
    156a:	2b e2       	ldi	r18, 0x2B	; 43
    156c:	32 e0       	ldi	r19, 0x02	; 2
    156e:	87 e0       	ldi	r24, 0x07	; 7
    1570:	b9 01       	movw	r22, r18
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
		return TRANSMIT_DONE;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <nrf24_transmit_status+0x68>
	}
	else if (register_current_value & (1 << MAX_RT))
    1580:	80 91 2b 02 	lds	r24, 0x022B
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	80 71       	andi	r24, 0x10	; 16
    158a:	90 70       	andi	r25, 0x00	; 0
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	59 f0       	breq	.+22     	; 0x15a6 <nrf24_transmit_status+0x66>
	{
		nrf24_write(STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*reseting the MAX_RT flag. as mentioned by datasheet, writing '1' to a flag resets that flag*/
    1590:	2b e2       	ldi	r18, 0x2B	; 43
    1592:	32 e0       	ldi	r19, 0x02	; 2
    1594:	87 e0       	ldi	r24, 0x07	; 7
    1596:	b9 01       	movw	r22, r18
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
		return TRANSMIT_FAILED;
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <nrf24_transmit_status+0x68>
	}
	else
		return TRANSMIT_IN_PROGRESS;
    15a6:	19 82       	std	Y+1, r1	; 0x01
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <nrf24_receive>:

/*the receive function output is used as a polling method to check the received data inside RX FIFOs.
If there is any data available, it will be loaded inside payload array*/
uint8_t nrf24_receive(uint8_t *payload, uint8_t payload_width)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <nrf24_receive+0x6>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <nrf24_receive+0x8>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	6b 83       	std	Y+3, r22	; 0x03
	if (current_mode == PRX)
    15c4:	80 91 08 02 	lds	r24, 0x0208
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	09 f0       	breq	.+2      	; 0x15ce <nrf24_receive+0x1c>
    15cc:	66 c0       	rjmp	.+204    	; 0x169a <nrf24_receive+0xe8>
	{
		nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
    15ce:	2b e2       	ldi	r18, 0x2B	; 43
    15d0:	32 e0       	ldi	r19, 0x02	; 2
    15d2:	87 e0       	ldi	r24, 0x07	; 7
    15d4:	b9 01       	movw	r22, r18
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
		if (register_current_value & (1 << RX_DR))                         /*if received data is ready inside RX FIFO*/
    15de:	80 91 2b 02 	lds	r24, 0x022B
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	80 74       	andi	r24, 0x40	; 64
    15e8:	90 70       	andi	r25, 0x00	; 0
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <nrf24_receive+0x3e>
    15ee:	52 c0       	rjmp	.+164    	; 0x1694 <nrf24_receive+0xe2>
		{
			if(dynamic_payload == DISABLE)                                    /*if dynamic payload width is disabled, use the static payload width and ignore the input*/
    15f0:	80 91 29 02 	lds	r24, 0x0229
    15f4:	88 23       	and	r24, r24
    15f6:	19 f4       	brne	.+6      	; 0x15fe <nrf24_receive+0x4c>
				payload_width = current_payload_width;
    15f8:	80 91 2f 02 	lds	r24, 0x022F
    15fc:	8b 83       	std	Y+3, r24	; 0x03

			nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
			SPI_command = R_RX_PAYLOAD;
    1604:	81 e6       	ldi	r24, 0x61	; 97
    1606:	80 93 2a 02 	sts	0x022A, r24
			SPI_send_command(SPI_command);
    160a:	80 91 2a 02 	lds	r24, 0x022A
    160e:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
    1612:	12 c0       	rjmp	.+36     	; 0x1638 <nrf24_receive+0x86>

			for (; payload_width; payload_width--)
			{
				SPI_command = NOP_CMD;
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	80 93 2a 02 	sts	0x022A, r24
				*payload = SPI_send_command(SPI_command);
    161a:	80 91 2a 02 	lds	r24, 0x022A
    161e:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
    1622:	e9 81       	ldd	r30, Y+1	; 0x01
    1624:	fa 81       	ldd	r31, Y+2	; 0x02
    1626:	80 83       	st	Z, r24
				payload++;
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01

			nrf24_SPI(SPI_ON);                                                /*sending the read payload command to nrf24l01+*/
			SPI_command = R_RX_PAYLOAD;
			SPI_send_command(SPI_command);

			for (; payload_width; payload_width--)
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	81 50       	subi	r24, 0x01	; 1
    1636:	8b 83       	std	Y+3, r24	; 0x03
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	88 23       	and	r24, r24
    163c:	59 f7       	brne	.-42     	; 0x1614 <nrf24_receive+0x62>
			{
				SPI_command = NOP_CMD;
				*payload = SPI_send_command(SPI_command);
				payload++;
			}
			nrf24_SPI(SPI_OFF);
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
			nrf24_read(FIFO_STATUS_ADDRESS, &register_current_value, 1, CLOSE);   /*in order to check the RX_EMPTY flag*/
    1644:	2b e2       	ldi	r18, 0x2B	; 43
    1646:	32 e0       	ldi	r19, 0x02	; 2
    1648:	87 e1       	ldi	r24, 0x17	; 23
    164a:	b9 01       	movw	r22, r18
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
			if(register_current_value & (1 << RX_EMPTY))                        /*if the RX FIFO is empty, reset the RX_DR flag inside STATUS register*/
    1654:	80 91 2b 02 	lds	r24, 0x022B
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	81 70       	andi	r24, 0x01	; 1
    165e:	90 70       	andi	r25, 0x00	; 0
    1660:	88 23       	and	r24, r24
    1662:	a9 f0       	breq	.+42     	; 0x168e <nrf24_receive+0xdc>
			{
				nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
    1664:	2b e2       	ldi	r18, 0x2B	; 43
    1666:	32 e0       	ldi	r19, 0x02	; 2
    1668:	87 e0       	ldi	r24, 0x07	; 7
    166a:	b9 01       	movw	r22, r18
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
				register_new_value = register_current_value | (1 << RX_DR);
    1674:	80 91 2b 02 	lds	r24, 0x022B
    1678:	80 64       	ori	r24, 0x40	; 64
    167a:	80 93 2c 02 	sts	0x022C, r24
				nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
    167e:	2c e2       	ldi	r18, 0x2C	; 44
    1680:	32 e0       	ldi	r19, 0x02	; 2
    1682:	87 e0       	ldi	r24, 0x07	; 7
    1684:	b9 01       	movw	r22, r18
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
			}
			return OPERATION_DONE;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	8c 83       	std	Y+4, r24	; 0x04
    1692:	04 c0       	rjmp	.+8      	; 0x169c <nrf24_receive+0xea>
		}
		else
		{
			return RECEIVE_FIFO_EMPTY;
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	8c 83       	std	Y+4, r24	; 0x04
    1698:	01 c0       	rjmp	.+2      	; 0x169c <nrf24_receive+0xea>
		}
	}
	else
		return OPERATION_ERROR;
    169a:	1c 82       	std	Y+4, r1	; 0x04
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <nrf24_flush>:

/*function which uses TX_FLUSH or RX_FLUSH command to flush the fifo buffers. if successful, output is OPERATION_DONE.
   if not successful (wrong input or wrong mode of operation) output will be OPERATION_ERROR*/
uint8_t nrf24_flush(uint8_t fifo_select)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <nrf24_flush+0x6>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <nrf24_flush+0x8>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	89 83       	std	Y+1, r24	; 0x01
	switch (fifo_select)
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3c 83       	std	Y+4, r19	; 0x04
    16c2:	2b 83       	std	Y+3, r18	; 0x03
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	d9 f0       	breq	.+54     	; 0x1702 <nrf24_flush+0x56>
    16cc:	2b 81       	ldd	r18, Y+3	; 0x03
    16ce:	3c 81       	ldd	r19, Y+4	; 0x04
    16d0:	21 30       	cpi	r18, 0x01	; 1
    16d2:	31 05       	cpc	r19, r1
    16d4:	61 f5       	brne	.+88     	; 0x172e <nrf24_flush+0x82>
	{
	case TX_BUFFER:
		if (current_mode == PTX)
    16d6:	80 91 08 02 	lds	r24, 0x0208
    16da:	83 30       	cpi	r24, 0x03	; 3
    16dc:	81 f4       	brne	.+32     	; 0x16fe <nrf24_flush+0x52>
		{
			nrf24_SPI(SPI_ON);
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
			SPI_command = FLUSH_TX;
    16e4:	81 ee       	ldi	r24, 0xE1	; 225
    16e6:	80 93 2a 02 	sts	0x022A, r24
			SPI_send_command(SPI_command);
    16ea:	80 91 2a 02 	lds	r24, 0x022A
    16ee:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
			nrf24_SPI(SPI_OFF);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
			return OPERATION_DONE;
    16f8:	31 e0       	ldi	r19, 0x01	; 1
    16fa:	3a 83       	std	Y+2, r19	; 0x02
    16fc:	19 c0       	rjmp	.+50     	; 0x1730 <nrf24_flush+0x84>
		}
		else
			return OPERATION_ERROR;
    16fe:	1a 82       	std	Y+2, r1	; 0x02
    1700:	17 c0       	rjmp	.+46     	; 0x1730 <nrf24_flush+0x84>
	case RX_BUFFER:
		if (current_mode == PRX)
    1702:	80 91 08 02 	lds	r24, 0x0208
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	81 f4       	brne	.+32     	; 0x172a <nrf24_flush+0x7e>
		{
			nrf24_SPI(SPI_ON);
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
			SPI_command = FLUSH_RX;
    1710:	82 ee       	ldi	r24, 0xE2	; 226
    1712:	80 93 2a 02 	sts	0x022A, r24
			SPI_send_command(SPI_command);
    1716:	80 91 2a 02 	lds	r24, 0x022A
    171a:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
			nrf24_SPI(SPI_OFF);
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
			return OPERATION_DONE;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	8a 83       	std	Y+2, r24	; 0x02
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <nrf24_flush+0x84>
		}
		else
			return OPERATION_ERROR;
    172a:	1a 82       	std	Y+2, r1	; 0x02
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <nrf24_flush+0x84>
	default:
		return OPERATION_ERROR;
    172e:	1a 82       	std	Y+2, r1	; 0x02
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <nrf24_reset>:

/*must be called atleast once, which happens with calling nrf24_device function*/
void nrf24_reset()
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
	reset_flag = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	80 93 28 02 	sts	0x0228, r24
	nrf24_CE(CE_OFF);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <nrf24_CE>
	register_new_value = CONFIG_REGISTER_DEFAULT;
    1754:	88 e0       	ldi	r24, 0x08	; 8
    1756:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    175a:	2c e2       	ldi	r18, 0x2C	; 44
    175c:	32 e0       	ldi	r19, 0x02	; 2
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	b9 01       	movw	r22, r18
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	register_new_value = EN_AA_REGISTER_DEFAULT;
    176a:	8f e3       	ldi	r24, 0x3F	; 63
    176c:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
    1770:	2c e2       	ldi	r18, 0x2C	; 44
    1772:	32 e0       	ldi	r19, 0x02	; 2
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	b9 01       	movw	r22, r18
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	register_new_value = EN_RXADDR_REGISTER_DEFAULT;
    1780:	10 92 2c 02 	sts	0x022C, r1
	nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
    1784:	2c e2       	ldi	r18, 0x2C	; 44
    1786:	32 e0       	ldi	r19, 0x02	; 2
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	b9 01       	movw	r22, r18
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	register_new_value = SETUP_AW_REGISTER_DEFAULT;
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(SETUP_AW_ADDRESS, &register_new_value, 1, CLOSE);
    179a:	2c e2       	ldi	r18, 0x2C	; 44
    179c:	32 e0       	ldi	r19, 0x02	; 2
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	b9 01       	movw	r22, r18
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	register_new_value = RF_CH_REGISTER_DEFAULT;
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(RF_CH_ADDRESS, &register_new_value, 1, CLOSE);
    17b0:	2c e2       	ldi	r18, 0x2C	; 44
    17b2:	32 e0       	ldi	r19, 0x02	; 2
    17b4:	85 e0       	ldi	r24, 0x05	; 5
    17b6:	b9 01       	movw	r22, r18
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	register_new_value = RF_SETUP_REGISTER_DEFAULT;
    17c0:	8e e0       	ldi	r24, 0x0E	; 14
    17c2:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
    17c6:	2c e2       	ldi	r18, 0x2C	; 44
    17c8:	32 e0       	ldi	r19, 0x02	; 2
    17ca:	86 e0       	ldi	r24, 0x06	; 6
    17cc:	b9 01       	movw	r22, r18
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	register_new_value = STATUS_REGISTER_DEFAULT;
    17d6:	8e e0       	ldi	r24, 0x0E	; 14
    17d8:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
    17dc:	2c e2       	ldi	r18, 0x2C	; 44
    17de:	32 e0       	ldi	r19, 0x02	; 2
    17e0:	87 e0       	ldi	r24, 0x07	; 7
    17e2:	b9 01       	movw	r22, r18
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>

	nrf24_mode(PTX);
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
	nrf24_flush(TX_BUFFER);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	0e 94 56 0b 	call	0x16ac	; 0x16ac <nrf24_flush>
	nrf24_mode(PRX);
    17f8:	84 e0       	ldi	r24, 0x04	; 4
    17fa:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
	nrf24_flush(RX_BUFFER);
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	0e 94 56 0b 	call	0x16ac	; 0x16ac <nrf24_flush>

	nrf24_read(STATUS_ADDRESS, &register_current_value, 1, CLOSE);
    1804:	2b e2       	ldi	r18, 0x2B	; 43
    1806:	32 e0       	ldi	r19, 0x02	; 2
    1808:	87 e0       	ldi	r24, 0x07	; 7
    180a:	b9 01       	movw	r22, r18
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
	register_new_value = register_current_value | (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
    1814:	80 91 2b 02 	lds	r24, 0x022B
    1818:	80 67       	ori	r24, 0x70	; 112
    181a:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(STATUS_ADDRESS, &register_new_value, 1, CLOSE);
    181e:	2c e2       	ldi	r18, 0x2C	; 44
    1820:	32 e0       	ldi	r19, 0x02	; 2
    1822:	87 e0       	ldi	r24, 0x07	; 7
    1824:	b9 01       	movw	r22, r18
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>

	nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <nrf24_interrupt_mask>
	nrf24_crc_configuration(ENABLE, 1);
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <nrf24_crc_configuration>
	nrf24_address_width(ADDRESS_WIDTH_DEFAULT);
    1840:	85 e0       	ldi	r24, 0x05	; 5
    1842:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <nrf24_address_width>
	nrf24_rf_datarate(RF_DATARATE_DEFAULT);
    1846:	88 ee       	ldi	r24, 0xE8	; 232
    1848:	93 e0       	ldi	r25, 0x03	; 3
    184a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <nrf24_rf_datarate>
	nrf24_rf_power(RF_PWR_DEFAULT);
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <nrf24_rf_power>
	nrf24_rf_channel(RF_CHANNEL_DEFAULT);
    1854:	80 e2       	ldi	r24, 0x20	; 32
    1856:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <nrf24_rf_channel>
	nrf24_datapipe_enable(NUMBER_OF_DP_DEFAULT);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <nrf24_datapipe_enable>
	nrf24_datapipe_address_configuration();
    1860:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <nrf24_datapipe_address_configuration>
	nrf24_datapipe_ptx(1);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrf24_datapipe_ptx>
	nrf24_prx_static_payload_width(STATIC_PAYLOAD_WIDTH_DEFAULT, NUMBER_OF_DP_DEFAULT);
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <nrf24_prx_static_payload_width>
	nrf24_automatic_retransmit_setup(RETRANSMIT_DELAY_DEFAULT, RETRANSMIT_COUNT_DEFAULT);
    1872:	84 ef       	ldi	r24, 0xF4	; 244
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	62 e0       	ldi	r22, 0x02	; 2
    1878:	0e 94 c7 0c 	call	0x198e	; 0x198e <nrf24_automatic_retransmit_setup>
	nrf24_auto_acknowledgment_setup(NUMBER_OF_DP_DEFAULT);
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <nrf24_auto_acknowledgment_setup>
	nrf24_dynamic_payload(DISABLE, NUMBER_OF_DP_DEFAULT);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <nrf24_dynamic_payload>
	nrf24_dynamic_ack(ENABLE);
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <nrf24_dynamic_ack>
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <nrf24_device>:

/*used by firmware to set the nrf24 mode in TRANSMITTER, RECEIVER, POWER_SAVING or TURN_OFF states, and reseting the device
  if it has not been done yet. This is the initializer, and everything starts by calling nrf24_device first.It has a higher
  level of abstraction than nrf24_mode and must be used by user*/
void nrf24_device(uint8_t device_mode, uint8_t reset_state)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <nrf24_device+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <nrf24_device+0x8>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	6a 83       	std	Y+2, r22	; 0x02
	SPI_Initializer();
    18a6:	0e 94 8a 09 	call	0x1314	; 0x1314 <SPI_Initializer>
	pinout_Initializer();
    18aa:	0e 94 95 09 	call	0x132a	; 0x132a <pinout_Initializer>
	delay_function(STARTUP_DELAY);
    18ae:	66 e9       	ldi	r22, 0x96	; 150
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <delay_function>

	if ((reset_state == RESET) || (reset_flag == 0))
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	21 f0       	breq	.+8      	; 0x18c8 <nrf24_device+0x32>
    18c0:	80 91 28 02 	lds	r24, 0x0228
    18c4:	88 23       	and	r24, r24
    18c6:	11 f4       	brne	.+4      	; 0x18cc <nrf24_device+0x36>
	{
		nrf24_reset();
    18c8:	0e 94 a0 0b 	call	0x1740	; 0x1740 <nrf24_reset>
	}

	switch (device_mode)
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	3c 83       	std	Y+4, r19	; 0x04
    18d4:	2b 83       	std	Y+3, r18	; 0x03
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	91 05       	cpc	r25, r1
    18de:	09 f1       	breq	.+66     	; 0x1922 <nrf24_device+0x8c>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <nrf24_device+0x5e>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	61 f0       	breq	.+24     	; 0x190a <nrf24_device+0x74>
    18f2:	3e c0       	rjmp	.+124    	; 0x1970 <nrf24_device+0xda>
    18f4:	2b 81       	ldd	r18, Y+3	; 0x03
    18f6:	3c 81       	ldd	r19, Y+4	; 0x04
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	31 05       	cpc	r19, r1
    18fc:	21 f1       	breq	.+72     	; 0x1946 <nrf24_device+0xb0>
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	91 05       	cpc	r25, r1
    1906:	59 f1       	breq	.+86     	; 0x195e <nrf24_device+0xc8>
    1908:	33 c0       	rjmp	.+102    	; 0x1970 <nrf24_device+0xda>
	{
	case TRANSMITTER:
		nrf24_mode(POWER_DOWN);
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, DISABLE, DISABLE);                /*disabling tx interrupt mask*/
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <nrf24_interrupt_mask>
		nrf24_mode(PTX);
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
    1920:	2f c0       	rjmp	.+94     	; 0x1980 <nrf24_device+0xea>
		break;
	case RECEIVER:
		nrf24_mode(POWER_DOWN);
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
		nrf24_interrupt_mask(DISABLE, ENABLE, ENABLE);                /*disabling rx interrupt mask*/
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <nrf24_interrupt_mask>
		nrf24_mode(PRX);
    1932:	84 e0       	ldi	r24, 0x04	; 4
    1934:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
		delay_function(PRX_MODE_DELAY);                              /*100ms for PRX mode*/
    1938:	64 e6       	ldi	r22, 0x64	; 100
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 fd 08 	call	0x11fa	; 0x11fa <delay_function>
    1944:	1d c0       	rjmp	.+58     	; 0x1980 <nrf24_device+0xea>
		break;
	case POWER_SAVING:
		nrf24_mode(POWER_DOWN);
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	41 e0       	ldi	r20, 0x01	; 1
    1952:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <nrf24_interrupt_mask>
		nrf24_mode(STANDBYI);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
    195c:	11 c0       	rjmp	.+34     	; 0x1980 <nrf24_device+0xea>
		break;
	case TURN_OFF:
		nrf24_mode(POWER_DOWN);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <nrf24_interrupt_mask>
    196e:	08 c0       	rjmp	.+16     	; 0x1980 <nrf24_device+0xea>
		break;
	default:
		nrf24_mode(POWER_DOWN);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <nrf24_mode>
		nrf24_interrupt_mask(ENABLE, ENABLE, ENABLE);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <nrf24_interrupt_mask>
		break;
	}
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <nrf24_automatic_retransmit_setup>:

/*setting automatic retransmit delay time and maximum number of retransmits*/
void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <nrf24_automatic_retransmit_setup+0x6>
    1994:	0f 92       	push	r0
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	6b 83       	std	Y+3, r22	; 0x03
	register_new_value = 0x00;
    19a0:	10 92 2c 02 	sts	0x022C, r1
    19a4:	0b c0       	rjmp	.+22     	; 0x19bc <nrf24_automatic_retransmit_setup+0x2e>
	for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
		register_new_value++;
    19a6:	80 91 2c 02 	lds	r24, 0x022C
    19aa:	8f 5f       	subi	r24, 0xFF	; 255
    19ac:	80 93 2c 02 	sts	0x022C, r24

/*setting automatic retransmit delay time and maximum number of retransmits*/
void nrf24_automatic_retransmit_setup(uint16_t delay_time, uint8_t retransmit_count)
{
	register_new_value = 0x00;
	for (; (delay_time > 250) && (register_new_value < 0X0F); delay_time -= 250)
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	8a 5f       	subi	r24, 0xFA	; 250
    19b6:	90 40       	sbci	r25, 0x00	; 0
    19b8:	9a 83       	std	Y+2, r25	; 0x02
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	8b 3f       	cpi	r24, 0xFB	; 251
    19c2:	91 05       	cpc	r25, r1
    19c4:	20 f0       	brcs	.+8      	; 0x19ce <nrf24_automatic_retransmit_setup+0x40>
    19c6:	80 91 2c 02 	lds	r24, 0x022C
    19ca:	8f 30       	cpi	r24, 0x0F	; 15
    19cc:	60 f3       	brcs	.-40     	; 0x19a6 <nrf24_automatic_retransmit_setup+0x18>
		register_new_value++;
	register_new_value <<= ARD_0;
    19ce:	80 91 2c 02 	lds	r24, 0x022C
    19d2:	82 95       	swap	r24
    19d4:	80 7f       	andi	r24, 0xF0	; 240
    19d6:	80 93 2c 02 	sts	0x022C, r24
	if ((retransmit_count > 0) && (retransmit_count < 16))
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	88 23       	and	r24, r24
    19de:	51 f0       	breq	.+20     	; 0x19f4 <nrf24_automatic_retransmit_setup+0x66>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	80 31       	cpi	r24, 0x10	; 16
    19e4:	38 f4       	brcc	.+14     	; 0x19f4 <nrf24_automatic_retransmit_setup+0x66>
		register_new_value |= retransmit_count;
    19e6:	80 91 2c 02 	lds	r24, 0x022C
    19ea:	9b 81       	ldd	r25, Y+3	; 0x03
    19ec:	89 2b       	or	r24, r25
    19ee:	80 93 2c 02 	sts	0x022C, r24
    19f2:	04 c0       	rjmp	.+8      	; 0x19fc <nrf24_automatic_retransmit_setup+0x6e>
	else
		register_new_value |= 0;
    19f4:	80 91 2c 02 	lds	r24, 0x022C
    19f8:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(SETUP_RETR_ADDRESS, &register_new_value, 1, CLOSE);
    19fc:	2c e2       	ldi	r18, 0x2C	; 44
    19fe:	32 e0       	ldi	r19, 0x02	; 2
    1a00:	84 e0       	ldi	r24, 0x04	; 4
    1a02:	b9 01       	movw	r22, r18
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
}
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <nrf24_auto_acknowledgment_setup>:

/*setting auto acknoledgement on datapipes*/
void nrf24_auto_acknowledgment_setup(uint8_t datapipe)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	0f 92       	push	r0
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	89 83       	std	Y+1, r24	; 0x01
	if (datapipe < 7)
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	87 30       	cpi	r24, 0x07	; 7
    1a28:	68 f4       	brcc	.+26     	; 0x1a44 <nrf24_auto_acknowledgment_setup+0x2c>
		register_new_value = (1 << datapipe) - 1;
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <nrf24_auto_acknowledgment_setup+0x22>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	2a 95       	dec	r18
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <nrf24_auto_acknowledgment_setup+0x1e>
    1a3e:	81 50       	subi	r24, 0x01	; 1
    1a40:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(EN_AA_ADDRESS, &register_new_value, 1, CLOSE);
    1a44:	2c e2       	ldi	r18, 0x2C	; 44
    1a46:	32 e0       	ldi	r19, 0x02	; 2
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	b9 01       	movw	r22, r18
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
}
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <nrf24_dynamic_payload>:

/*turns on or off the dynamic payload width capability*/
void nrf24_dynamic_payload(uint8_t state, uint8_t datapipe)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <nrf24_dynamic_payload+0x6>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	6a 83       	std	Y+2, r22	; 0x02
	nrf24_auto_acknowledgment_setup(datapipe);                        /*setting auto acknowledgment before setting dynamic payload*/
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <nrf24_auto_acknowledgment_setup>
	nrf24_read(FEATURE_ADDRESS, &register_current_value, 1, CLOSE);
    1a70:	2b e2       	ldi	r18, 0x2B	; 43
    1a72:	32 e0       	ldi	r19, 0x02	; 2
    1a74:	8d e1       	ldi	r24, 0x1D	; 29
    1a76:	b9 01       	movw	r22, r18
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
	if (state == ENABLE)
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	49 f5       	brne	.+82     	; 0x1ad8 <nrf24_dynamic_payload+0x7c>
	{
		register_new_value = register_current_value | (1 << EN_DPL);    /*EN_DPL bit turns dynamic payload width on or off on all datapipes*/
    1a86:	80 91 2b 02 	lds	r24, 0x022B
    1a8a:	84 60       	ori	r24, 0x04	; 4
    1a8c:	80 93 2c 02 	sts	0x022C, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    1a90:	2c e2       	ldi	r18, 0x2C	; 44
    1a92:	32 e0       	ldi	r19, 0x02	; 2
    1a94:	8d e1       	ldi	r24, 0x1D	; 29
    1a96:	b9 01       	movw	r22, r18
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
		if (datapipe < 7)
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	87 30       	cpi	r24, 0x07	; 7
    1aa4:	68 f4       	brcc	.+26     	; 0x1ac0 <nrf24_dynamic_payload+0x64>
			register_new_value = (1 << datapipe) - 1;                       /*turning on dynamic payload width on chosen datapipes, using DYNPD register*/
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <nrf24_dynamic_payload+0x5a>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	2a 95       	dec	r18
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <nrf24_dynamic_payload+0x56>
    1aba:	81 50       	subi	r24, 0x01	; 1
    1abc:	80 93 2c 02 	sts	0x022C, r24
		nrf24_write(DYNPD_ADDRESS, &register_new_value, 1, CLOSE);
    1ac0:	2c e2       	ldi	r18, 0x2C	; 44
    1ac2:	32 e0       	ldi	r19, 0x02	; 2
    1ac4:	8c e1       	ldi	r24, 0x1C	; 28
    1ac6:	b9 01       	movw	r22, r18
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
		dynamic_payload = ENABLE;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	80 93 29 02 	sts	0x0229, r24
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <nrf24_dynamic_payload+0x9a>
	}
	else
	{
		register_new_value = register_current_value & (~(1 << EN_DPL));
    1ad8:	80 91 2b 02 	lds	r24, 0x022B
    1adc:	8b 7f       	andi	r24, 0xFB	; 251
    1ade:	80 93 2c 02 	sts	0x022C, r24
		nrf24_write(FEATURE_ADDRESS, &register_new_value, 1, CLOSE);
    1ae2:	2c e2       	ldi	r18, 0x2C	; 44
    1ae4:	32 e0       	ldi	r19, 0x02	; 2
    1ae6:	8d e1       	ldi	r24, 0x1D	; 29
    1ae8:	b9 01       	movw	r22, r18
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
		dynamic_payload = DISABLE;
    1af2:	10 92 29 02 	sts	0x0229, r1
	}
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <nrf24_datapipe_ptx>:

/*on nrf24l01+ there is only one address for PTX device which must be the same as PRX data pipe address 0*/
void nrf24_datapipe_ptx(uint8_t datapipe_number)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	0f 92       	push	r0
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(TX_ADDR_ADDRESS, &datapipe_address[datapipe_number - 1][0], current_address_width, CLOSE);
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	c9 01       	movw	r24, r18
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	82 0f       	add	r24, r18
    1b1e:	93 1f       	adc	r25, r19
    1b20:	05 97       	sbiw	r24, 0x05	; 5
    1b22:	86 5f       	subi	r24, 0xF6	; 246
    1b24:	9d 4f       	sbci	r25, 0xFD	; 253
    1b26:	9c 01       	movw	r18, r24
    1b28:	90 91 2e 02 	lds	r25, 0x022E
    1b2c:	80 e1       	ldi	r24, 0x10	; 16
    1b2e:	b9 01       	movw	r22, r18
    1b30:	49 2f       	mov	r20, r25
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
}
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <nrf24_datapipe_address_configuration>:

/*setting the 6 datapipe addresses using the datapipe_address[][]*/
void nrf24_datapipe_address_configuration()
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <nrf24_datapipe_address_configuration+0x6>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	uint8_t address = RX_ADDR_P0_ADDRESS;
    1b4a:	8a e0       	ldi	r24, 0x0A	; 10
    1b4c:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t counter = 0; counter < 6; counter++)
    1b4e:	19 82       	std	Y+1, r1	; 0x01
    1b50:	1d c0       	rjmp	.+58     	; 0x1b8c <nrf24_datapipe_address_configuration+0x4c>
	{
		nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
    1b52:	4a e0       	ldi	r20, 0x0A	; 10
    1b54:	52 e0       	ldi	r21, 0x02	; 2
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	c9 01       	movw	r24, r18
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	82 0f       	add	r24, r18
    1b68:	93 1f       	adc	r25, r19
    1b6a:	9a 01       	movw	r18, r20
    1b6c:	28 0f       	add	r18, r24
    1b6e:	39 1f       	adc	r19, r25
    1b70:	90 91 2e 02 	lds	r25, 0x022E
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	b9 01       	movw	r22, r18
    1b78:	49 2f       	mov	r20, r25
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
		address++;
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	8f 5f       	subi	r24, 0xFF	; 255
    1b84:	8a 83       	std	Y+2, r24	; 0x02

/*setting the 6 datapipe addresses using the datapipe_address[][]*/
void nrf24_datapipe_address_configuration()
{
	uint8_t address = RX_ADDR_P0_ADDRESS;
	for (uint8_t counter = 0; counter < 6; counter++)
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	86 30       	cpi	r24, 0x06	; 6
    1b90:	00 f3       	brcs	.-64     	; 0x1b52 <nrf24_datapipe_address_configuration+0x12>
	{
		nrf24_write(address, &datapipe_address[counter][0], current_address_width, CLOSE);
		address++;
	}
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <nrf24_prx_static_payload_width>:

/*function to change static payload width, from 1 to 32 bytes in each payload*/
void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <nrf24_prx_static_payload_width+0x6>
    1ba2:	0f 92       	push	r0
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	8a 83       	std	Y+2, r24	; 0x02
    1baa:	6b 83       	std	Y+3, r22	; 0x03
	for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
    1bac:	81 e1       	ldi	r24, 0x11	; 17
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <nrf24_prx_static_payload_width+0x34>
	{
		nrf24_write(address, &static_payload_width, 1, CLOSE);
    1bb2:	9e 01       	movw	r18, r28
    1bb4:	2e 5f       	subi	r18, 0xFE	; 254
    1bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	b9 01       	movw	r22, r18
    1bbc:	41 e0       	ldi	r20, 0x01	; 1
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
		address++;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	8f 5f       	subi	r24, 0xFF	; 255
    1bc8:	89 83       	std	Y+1, r24	; 0x01
}

/*function to change static payload width, from 1 to 32 bytes in each payload*/
void nrf24_prx_static_payload_width(uint8_t static_payload_width, uint8_t number_of_datapipes)
{
	for (uint8_t address = RX_PW_P0_ADDRESS; number_of_datapipes; number_of_datapipes--)
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	81 50       	subi	r24, 0x01	; 1
    1bce:	8b 83       	std	Y+3, r24	; 0x03
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	88 23       	and	r24, r24
    1bd4:	71 f7       	brne	.-36     	; 0x1bb2 <nrf24_prx_static_payload_width+0x16>
	{
		nrf24_write(address, &static_payload_width, 1, CLOSE);
		address++;
	}
	current_payload_width = static_payload_width;
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	80 93 2f 02 	sts	0x022F, r24
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <nrf24_datapipe_enable>:

/*datapipes are turned on and off using EN_RXADDR register, PRX datapipe addresses are located in RX_ADDR_Pn, TX address is located inside TX_ADDR*/
void nrf24_datapipe_enable(uint8_t number_of_datapipes)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	0f 92       	push	r0
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	89 83       	std	Y+1, r24	; 0x01
	register_new_value = (1 << number_of_datapipes) - 1;
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <nrf24_datapipe_enable+0x1c>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	2a 95       	dec	r18
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <nrf24_datapipe_enable+0x18>
    1c08:	81 50       	subi	r24, 0x01	; 1
    1c0a:	80 93 2c 02 	sts	0x022C, r24
	nrf24_write(EN_RXADDR_ADDRESS, &register_new_value, 1, CLOSE);
    1c0e:	2c e2       	ldi	r18, 0x2C	; 44
    1c10:	32 e0       	ldi	r19, 0x02	; 2
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	b9 01       	movw	r22, r18
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
}
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <nrf24_address_width>:

/*function to set the nrf24l01+ address width, from 3 to 5 bytes*/
void nrf24_address_width(uint8_t address_width)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	0f 92       	push	r0
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	89 83       	std	Y+1, r24	; 0x01
	if ((address_width <= 5) && (address_width >= 3))
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	86 30       	cpi	r24, 0x06	; 6
    1c36:	40 f4       	brcc	.+16     	; 0x1c48 <nrf24_address_width+0x22>
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	83 30       	cpi	r24, 0x03	; 3
    1c3c:	28 f0       	brcs	.+10     	; 0x1c48 <nrf24_address_width+0x22>
	{
		write_pointer = address_width - 2;
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	82 50       	subi	r24, 0x02	; 2
    1c42:	80 93 2d 02 	sts	0x022D, r24
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <nrf24_address_width+0x28>
	}
	else
	{
		write_pointer = 3;
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	80 93 2d 02 	sts	0x022D, r24
	}
	nrf24_write(SETUP_AW_ADDRESS, &write_pointer, 1, CLOSE);                    /*5 bytes is the maximum address width available*/
    1c4e:	2d e2       	ldi	r18, 0x2D	; 45
    1c50:	32 e0       	ldi	r19, 0x02	; 2
    1c52:	83 e0       	ldi	r24, 0x03	; 3
    1c54:	b9 01       	movw	r22, r18
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	current_address_width = address_width;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	80 93 2e 02 	sts	0x022E, r24
}
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <nrf24_rf_datarate>:

/*datarate settings, you can choose between 2mbps, 1mbps, 250kbps*/
void nrf24_rf_datarate(uint16_t rf_datarate)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <nrf24_rf_datarate+0x6>
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <nrf24_rf_datarate+0x8>
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
	nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
    1c7c:	2b e2       	ldi	r18, 0x2B	; 43
    1c7e:	32 e0       	ldi	r19, 0x02	; 2
    1c80:	86 e0       	ldi	r24, 0x06	; 6
    1c82:	b9 01       	movw	r22, r18
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
	register_current_value &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
    1c8c:	80 91 2b 02 	lds	r24, 0x022B
    1c90:	87 7d       	andi	r24, 0xD7	; 215
    1c92:	80 93 2b 02 	sts	0x022B, r24
	switch (rf_datarate)
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	9c 83       	std	Y+4, r25	; 0x04
    1c9c:	8b 83       	std	Y+3, r24	; 0x03
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	23 e0       	ldi	r18, 0x03	; 3
    1ca4:	88 3e       	cpi	r24, 0xE8	; 232
    1ca6:	92 07       	cpc	r25, r18
    1ca8:	91 f0       	breq	.+36     	; 0x1cce <nrf24_rf_datarate+0x62>
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	27 e0       	ldi	r18, 0x07	; 7
    1cb0:	80 3d       	cpi	r24, 0xD0	; 208
    1cb2:	92 07       	cpc	r25, r18
    1cb4:	31 f0       	breq	.+12     	; 0x1cc2 <nrf24_rf_datarate+0x56>
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	8a 3f       	cpi	r24, 0xFA	; 250
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	61 f0       	breq	.+24     	; 0x1cd8 <nrf24_rf_datarate+0x6c>
    1cc0:	11 c0       	rjmp	.+34     	; 0x1ce4 <nrf24_rf_datarate+0x78>
	{
	case 2000:
		register_new_value = register_current_value | (1 << RF_DR_HIGH);
    1cc2:	80 91 2b 02 	lds	r24, 0x022B
    1cc6:	88 60       	ori	r24, 0x08	; 8
    1cc8:	80 93 2c 02 	sts	0x022C, r24
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <nrf24_rf_datarate+0x80>
		break;
	case 1000:
		register_new_value = register_current_value;
    1cce:	80 91 2b 02 	lds	r24, 0x022B
    1cd2:	80 93 2c 02 	sts	0x022C, r24
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <nrf24_rf_datarate+0x80>
		break;
	case 250:
		register_new_value = register_current_value | (1 << RF_DR_LOW);
    1cd8:	80 91 2b 02 	lds	r24, 0x022B
    1cdc:	80 62       	ori	r24, 0x20	; 32
    1cde:	80 93 2c 02 	sts	0x022C, r24
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <nrf24_rf_datarate+0x80>
		break;
	default:
		register_new_value = register_current_value;
    1ce4:	80 91 2b 02 	lds	r24, 0x022B
    1ce8:	80 93 2c 02 	sts	0x022C, r24
		break;
	}
	nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
    1cec:	2c e2       	ldi	r18, 0x2C	; 44
    1cee:	32 e0       	ldi	r19, 0x02	; 2
    1cf0:	86 e0       	ldi	r24, 0x06	; 6
    1cf2:	b9 01       	movw	r22, r18
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <nrf24_rf_power>:

/*nrf24l01+ RF power settings. 0dbm, -6dbm, -12dbm, -18dbm*/
void nrf24_rf_power(uint8_t rf_power)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <nrf24_rf_power+0x6>
    1d10:	0f 92       	push	r0
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	89 83       	std	Y+1, r24	; 0x01
	nrf24_read(RF_SETUP_ADDRESS, &register_current_value, 1, CLOSE);
    1d18:	2b e2       	ldi	r18, 0x2B	; 43
    1d1a:	32 e0       	ldi	r19, 0x02	; 2
    1d1c:	86 e0       	ldi	r24, 0x06	; 6
    1d1e:	b9 01       	movw	r22, r18
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
	register_current_value &= ~((1 << RF_PWR_1) | (1 << RF_PWR_0));
    1d28:	80 91 2b 02 	lds	r24, 0x022B
    1d2c:	89 7f       	andi	r24, 0xF9	; 249
    1d2e:	80 93 2b 02 	sts	0x022B, r24
	switch (rf_power)
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	3b 83       	std	Y+3, r19	; 0x03
    1d3a:	2a 83       	std	Y+2, r18	; 0x02
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	86 30       	cpi	r24, 0x06	; 6
    1d42:	91 05       	cpc	r25, r1
    1d44:	d9 f0       	breq	.+54     	; 0x1d7c <nrf24_rf_power+0x72>
    1d46:	2a 81       	ldd	r18, Y+2	; 0x02
    1d48:	3b 81       	ldd	r19, Y+3	; 0x03
    1d4a:	27 30       	cpi	r18, 0x07	; 7
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <nrf24_rf_power+0x50>
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	9b 81       	ldd	r25, Y+3	; 0x03
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	61 f0       	breq	.+24     	; 0x1d70 <nrf24_rf_power+0x66>
    1d58:	22 c0       	rjmp	.+68     	; 0x1d9e <nrf24_rf_power+0x94>
    1d5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d5c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d5e:	2c 30       	cpi	r18, 0x0C	; 12
    1d60:	31 05       	cpc	r19, r1
    1d62:	91 f0       	breq	.+36     	; 0x1d88 <nrf24_rf_power+0x7e>
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	9b 81       	ldd	r25, Y+3	; 0x03
    1d68:	82 31       	cpi	r24, 0x12	; 18
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	99 f0       	breq	.+38     	; 0x1d94 <nrf24_rf_power+0x8a>
    1d6e:	17 c0       	rjmp	.+46     	; 0x1d9e <nrf24_rf_power+0x94>
	{
	case 0:
		register_new_value = register_current_value | ((1 << RF_PWR_1) | (1 << RF_PWR_0));
    1d70:	80 91 2b 02 	lds	r24, 0x022B
    1d74:	86 60       	ori	r24, 0x06	; 6
    1d76:	80 93 2c 02 	sts	0x022C, r24
    1d7a:	16 c0       	rjmp	.+44     	; 0x1da8 <nrf24_rf_power+0x9e>
		break;
	case 6:
		register_new_value = register_current_value | (1 << RF_PWR_1);
    1d7c:	80 91 2b 02 	lds	r24, 0x022B
    1d80:	84 60       	ori	r24, 0x04	; 4
    1d82:	80 93 2c 02 	sts	0x022C, r24
    1d86:	10 c0       	rjmp	.+32     	; 0x1da8 <nrf24_rf_power+0x9e>
		break;
	case 12:
		register_new_value = register_current_value | (1 << RF_PWR_0);
    1d88:	80 91 2b 02 	lds	r24, 0x022B
    1d8c:	82 60       	ori	r24, 0x02	; 2
    1d8e:	80 93 2c 02 	sts	0x022C, r24
    1d92:	0a c0       	rjmp	.+20     	; 0x1da8 <nrf24_rf_power+0x9e>
		break;
	case 18:
		register_new_value = register_current_value;
    1d94:	80 91 2b 02 	lds	r24, 0x022B
    1d98:	80 93 2c 02 	sts	0x022C, r24
    1d9c:	05 c0       	rjmp	.+10     	; 0x1da8 <nrf24_rf_power+0x9e>
		break;
	default:
		register_new_value = register_current_value | (1 << RF_PWR_1);
    1d9e:	80 91 2b 02 	lds	r24, 0x022B
    1da2:	84 60       	ori	r24, 0x04	; 4
    1da4:	80 93 2c 02 	sts	0x022C, r24
		break;
	}
	nrf24_write(RF_SETUP_ADDRESS, &register_new_value, 1, CLOSE);
    1da8:	2c e2       	ldi	r18, 0x2C	; 44
    1daa:	32 e0       	ldi	r19, 0x02	; 2
    1dac:	86 e0       	ldi	r24, 0x06	; 6
    1dae:	b9 01       	movw	r22, r18
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <nrf24_rf_channel>:

/*nrf24l01+ RF channel selection, from 1 to 125*/
void nrf24_rf_channel(uint8_t rf_channel)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <nrf24_rf_channel+0x6>
    1dca:	0f 92       	push	r0
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	8b 83       	std	Y+3, r24	; 0x03
	if ((rf_channel <= 125) && (rf_channel >= 1))
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	8e 37       	cpi	r24, 0x7E	; 126
    1dd6:	78 f4       	brcc	.+30     	; 0x1df6 <nrf24_rf_channel+0x32>
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	88 23       	and	r24, r24
    1ddc:	61 f0       	breq	.+24     	; 0x1df6 <nrf24_rf_channel+0x32>
	{
		uint8_t write_pointer = rf_channel;
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
    1de2:	85 e0       	ldi	r24, 0x05	; 5
    1de4:	9e 01       	movw	r18, r28
    1de6:	2f 5f       	subi	r18, 0xFF	; 255
    1de8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dea:	b9 01       	movw	r22, r18
    1dec:	41 e0       	ldi	r20, 0x01	; 1
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
    1df4:	0b c0       	rjmp	.+22     	; 0x1e0c <nrf24_rf_channel+0x48>
	}
	else
	{
		uint8_t write_pointer = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	8a 83       	std	Y+2, r24	; 0x02
		nrf24_write(RF_CH_ADDRESS, &write_pointer, 1, CLOSE);
    1dfa:	9e 01       	movw	r18, r28
    1dfc:	2e 5f       	subi	r18, 0xFE	; 254
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	85 e0       	ldi	r24, 0x05	; 5
    1e02:	b9 01       	movw	r22, r18
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	}
}
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <nrf24_interrupt_mask>:

/*interrupt mask settings. 3 seperate masks for RX, TX, and RT (maximum numbers of retransmission reached*/
void nrf24_interrupt_mask(uint8_t rx_mask, uint8_t tx_mask, uint8_t max_rt_mask)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <nrf24_interrupt_mask+0x6>
    1e1e:	0f 92       	push	r0
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	6a 83       	std	Y+2, r22	; 0x02
    1e28:	4b 83       	std	Y+3, r20	; 0x03
	nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
    1e2a:	2b e2       	ldi	r18, 0x2B	; 43
    1e2c:	32 e0       	ldi	r19, 0x02	; 2
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	b9 01       	movw	r22, r18
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
	if (rx_mask)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	88 23       	and	r24, r24
    1e3e:	31 f0       	breq	.+12     	; 0x1e4c <nrf24_interrupt_mask+0x34>
		register_new_value = (register_current_value) | (1 << MASK_RX_DR);
    1e40:	80 91 2b 02 	lds	r24, 0x022B
    1e44:	80 64       	ori	r24, 0x40	; 64
    1e46:	80 93 2c 02 	sts	0x022C, r24
    1e4a:	05 c0       	rjmp	.+10     	; 0x1e56 <nrf24_interrupt_mask+0x3e>
	else
		register_new_value &= (~(1 << MASK_RX_DR));
    1e4c:	80 91 2c 02 	lds	r24, 0x022C
    1e50:	8f 7b       	andi	r24, 0xBF	; 191
    1e52:	80 93 2c 02 	sts	0x022C, r24
	if (tx_mask)
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	88 23       	and	r24, r24
    1e5a:	31 f0       	breq	.+12     	; 0x1e68 <nrf24_interrupt_mask+0x50>
		register_new_value |= (1 << MASK_TX_DS);
    1e5c:	80 91 2c 02 	lds	r24, 0x022C
    1e60:	80 62       	ori	r24, 0x20	; 32
    1e62:	80 93 2c 02 	sts	0x022C, r24
    1e66:	05 c0       	rjmp	.+10     	; 0x1e72 <nrf24_interrupt_mask+0x5a>
	else
		register_new_value &= (~(1 << MASK_TX_DS));
    1e68:	80 91 2c 02 	lds	r24, 0x022C
    1e6c:	8f 7d       	andi	r24, 0xDF	; 223
    1e6e:	80 93 2c 02 	sts	0x022C, r24
	if (max_rt_mask)
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 23       	and	r24, r24
    1e76:	31 f0       	breq	.+12     	; 0x1e84 <nrf24_interrupt_mask+0x6c>
		register_new_value |= (1 << MASK_MAX_RT);
    1e78:	80 91 2c 02 	lds	r24, 0x022C
    1e7c:	80 61       	ori	r24, 0x10	; 16
    1e7e:	80 93 2c 02 	sts	0x022C, r24
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <nrf24_interrupt_mask+0x76>
	else
		register_new_value &= (~(1 << MASK_MAX_RT));
    1e84:	80 91 2c 02 	lds	r24, 0x022C
    1e88:	8f 7e       	andi	r24, 0xEF	; 239
    1e8a:	80 93 2c 02 	sts	0x022C, r24

	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    1e8e:	2c e2       	ldi	r18, 0x2C	; 44
    1e90:	32 e0       	ldi	r19, 0x02	; 2
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	b9 01       	movw	r22, r18
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
}
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <nrf24_crc_configuration>:

/*enabling or disabling crc in payload; setting crc encoding scheme between 1 or 2 bytes*/
void nrf24_crc_configuration(uint8_t crc_enable, uint8_t crc_encoding_scheme)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <nrf24_crc_configuration+0x6>
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	6a 83       	std	Y+2, r22	; 0x02
	nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
    1eb8:	2b e2       	ldi	r18, 0x2B	; 43
    1eba:	32 e0       	ldi	r19, 0x02	; 2
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	b9 01       	movw	r22, r18
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
	if (crc_enable)
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	88 23       	and	r24, r24
    1ecc:	31 f0       	breq	.+12     	; 0x1eda <nrf24_crc_configuration+0x30>
		register_new_value = (register_current_value) | (1 << EN_CRC);
    1ece:	80 91 2b 02 	lds	r24, 0x022B
    1ed2:	88 60       	ori	r24, 0x08	; 8
    1ed4:	80 93 2c 02 	sts	0x022C, r24
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <nrf24_crc_configuration+0x3a>
	else
		register_new_value &= (~(1 << EN_CRC));
    1eda:	80 91 2c 02 	lds	r24, 0x022C
    1ede:	87 7f       	andi	r24, 0xF7	; 247
    1ee0:	80 93 2c 02 	sts	0x022C, r24
	if (crc_encoding_scheme == 2)
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	82 30       	cpi	r24, 0x02	; 2
    1ee8:	31 f4       	brne	.+12     	; 0x1ef6 <nrf24_crc_configuration+0x4c>
		register_new_value |= (1 << CRCO);
    1eea:	80 91 2c 02 	lds	r24, 0x022C
    1eee:	84 60       	ori	r24, 0x04	; 4
    1ef0:	80 93 2c 02 	sts	0x022C, r24
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <nrf24_crc_configuration+0x56>
	else
		register_new_value &= (~(1 << CRCO));
    1ef6:	80 91 2c 02 	lds	r24, 0x022C
    1efa:	8b 7f       	andi	r24, 0xFB	; 251
    1efc:	80 93 2c 02 	sts	0x022C, r24

	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    1f00:	2c e2       	ldi	r18, 0x2C	; 44
    1f02:	32 e0       	ldi	r19, 0x02	; 2
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	b9 01       	movw	r22, r18
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <nrf24_mode>:

/*mode selector: power down, standby i, standby ii, ptx, prx. used by nrf24_device function*/
void nrf24_mode(uint8_t mode)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <nrf24_mode+0x6>
    1f20:	0f 92       	push	r0
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	89 83       	std	Y+1, r24	; 0x01
	nrf24_read(CONFIG_ADDRESS, &register_current_value, 1, CLOSE);
    1f28:	2b e2       	ldi	r18, 0x2B	; 43
    1f2a:	32 e0       	ldi	r19, 0x02	; 2
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	b9 01       	movw	r22, r18
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	0e 94 2d 10 	call	0x205a	; 0x205a <nrf24_read>
	switch (mode)
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	3b 83       	std	Y+3, r19	; 0x03
    1f40:	2a 83       	std	Y+2, r18	; 0x02
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	9b 81       	ldd	r25, Y+3	; 0x03
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	91 05       	cpc	r25, r1
    1f4a:	c9 f1       	breq	.+114    	; 0x1fbe <nrf24_mode+0xa4>
    1f4c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f4e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f50:	23 30       	cpi	r18, 0x03	; 3
    1f52:	31 05       	cpc	r19, r1
    1f54:	54 f4       	brge	.+20     	; 0x1f6a <nrf24_mode+0x50>
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	91 f0       	breq	.+36     	; 0x1f82 <nrf24_mode+0x68>
    1f5e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f60:	3b 81       	ldd	r19, Y+3	; 0x03
    1f62:	21 30       	cpi	r18, 0x01	; 1
    1f64:	31 05       	cpc	r19, r1
    1f66:	e1 f0       	breq	.+56     	; 0x1fa0 <nrf24_mode+0x86>
    1f68:	59 c0       	rjmp	.+178    	; 0x201c <nrf24_mode+0x102>
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	83 30       	cpi	r24, 0x03	; 3
    1f70:	91 05       	cpc	r25, r1
    1f72:	a9 f1       	breq	.+106    	; 0x1fde <nrf24_mode+0xc4>
    1f74:	2a 81       	ldd	r18, Y+2	; 0x02
    1f76:	3b 81       	ldd	r19, Y+3	; 0x03
    1f78:	24 30       	cpi	r18, 0x04	; 4
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <nrf24_mode+0x66>
    1f7e:	3f c0       	rjmp	.+126    	; 0x1ffe <nrf24_mode+0xe4>
    1f80:	4d c0       	rjmp	.+154    	; 0x201c <nrf24_mode+0x102>
	{
	case POWER_DOWN:
		nrf24_CE(CE_OFF);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <nrf24_CE>
		register_new_value = (register_current_value) & (~(1 << PWR_UP));
    1f88:	80 91 2b 02 	lds	r24, 0x022B
    1f8c:	8d 7f       	andi	r24, 0xFD	; 253
    1f8e:	80 93 2c 02 	sts	0x022C, r24
		delay_function(POWER_DOWN_DELAY);
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <delay_function>
    1f9e:	4c c0       	rjmp	.+152    	; 0x2038 <nrf24_mode+0x11e>
		break;
	case STANDBYI:                                 /*standby I is defined by 'PWR_UP = 1' and 'CE pin LOW'*/
		nrf24_CE(CE_OFF);
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <nrf24_CE>
		register_new_value = (register_current_value) | (1 << PWR_UP);
    1fa6:	80 91 2b 02 	lds	r24, 0x022B
    1faa:	82 60       	ori	r24, 0x02	; 2
    1fac:	80 93 2c 02 	sts	0x022C, r24
		delay_function(STANDBYI_DELAY);
    1fb0:	62 e0       	ldi	r22, 0x02	; 2
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <delay_function>
    1fbc:	3d c0       	rjmp	.+122    	; 0x2038 <nrf24_mode+0x11e>
		break;
	case STANDBYII:                                 /*standby ii is related to a ptx device*/
		nrf24_CE(CE_ON);
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <nrf24_CE>
		register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
    1fc4:	80 91 2b 02 	lds	r24, 0x022B
    1fc8:	8c 7f       	andi	r24, 0xFC	; 252
    1fca:	82 60       	ori	r24, 0x02	; 2
    1fcc:	80 93 2c 02 	sts	0x022C, r24
		delay_function(STANDBYI_DELAY);
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <delay_function>
    1fdc:	2d c0       	rjmp	.+90     	; 0x2038 <nrf24_mode+0x11e>
		break;
	case PTX:
		nrf24_CE(CE_ON);
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <nrf24_CE>
		register_new_value = ((register_current_value) | (1 << PWR_UP)) & (~(1 << PRIM_RX));
    1fe4:	80 91 2b 02 	lds	r24, 0x022B
    1fe8:	8c 7f       	andi	r24, 0xFC	; 252
    1fea:	82 60       	ori	r24, 0x02	; 2
    1fec:	80 93 2c 02 	sts	0x022C, r24
		delay_function(STANDBYI_DELAY);
    1ff0:	62 e0       	ldi	r22, 0x02	; 2
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <delay_function>
    1ffc:	1d c0       	rjmp	.+58     	; 0x2038 <nrf24_mode+0x11e>
		break;
	case PRX:
		nrf24_CE(CE_ON);
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <nrf24_CE>
		register_new_value = (register_current_value) | (1 << PWR_UP) | (1 << PRIM_RX);
    2004:	80 91 2b 02 	lds	r24, 0x022B
    2008:	83 60       	ori	r24, 0x03	; 3
    200a:	80 93 2c 02 	sts	0x022C, r24
		delay_function(STANDBYI_DELAY);
    200e:	62 e0       	ldi	r22, 0x02	; 2
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	0e 94 fd 08 	call	0x11fa	; 0x11fa <delay_function>
    201a:	0e c0       	rjmp	.+28     	; 0x2038 <nrf24_mode+0x11e>
		break;
	default:
		nrf24_CE(CE_OFF);
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <nrf24_CE>
		register_new_value = (register_current_value) & (~(1 << PWR_UP));
    2022:	80 91 2b 02 	lds	r24, 0x022B
    2026:	8d 7f       	andi	r24, 0xFD	; 253
    2028:	80 93 2c 02 	sts	0x022C, r24
		delay_function(POWER_DOWN_DELAY);
    202c:	62 e0       	ldi	r22, 0x02	; 2
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	0e 94 fd 08 	call	0x11fa	; 0x11fa <delay_function>
		break;
	}
	nrf24_write(CONFIG_ADDRESS, &register_new_value, 1, CLOSE);
    2038:	2c e2       	ldi	r18, 0x2C	; 44
    203a:	32 e0       	ldi	r19, 0x02	; 2
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	b9 01       	movw	r22, r18
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	0e 94 67 10 	call	0x20ce	; 0x20ce <nrf24_write>
	current_mode = mode;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	80 93 08 02 	sts	0x0208, r24
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <nrf24_read>:

/*reads the number of bytes (data_length) from the register in nrf24l01+ (address) and stores them inside an array (value),
  then closes the spi connection (spi_state = CLOSE) or leaves it open (spi_state = OPEN)*/
void nrf24_read(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <nrf24_read+0x6>
    2060:	00 d0       	rcall	.+0      	; 0x2062 <nrf24_read+0x8>
    2062:	0f 92       	push	r0
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	7b 83       	std	Y+3, r23	; 0x03
    206c:	6a 83       	std	Y+2, r22	; 0x02
    206e:	4c 83       	std	Y+4, r20	; 0x04
    2070:	2d 83       	std	Y+5, r18	; 0x05
	nrf24_SPI(SPI_ON);
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
	SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	80 93 2a 02 	sts	0x022A, r24
	SPI_send_command(SPI_command);
    207e:	80 91 2a 02 	lds	r24, 0x022A
    2082:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
	SPI_command = NOP_CMD;
    2086:	8f ef       	ldi	r24, 0xFF	; 255
    2088:	80 93 2a 02 	sts	0x022A, r24
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <nrf24_read+0x52>
	for (; data_length ; data_length--)
	{
		*value = SPI_send_command(SPI_command);
    208e:	80 91 2a 02 	lds	r24, 0x022A
    2092:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
    2096:	ea 81       	ldd	r30, Y+2	; 0x02
    2098:	fb 81       	ldd	r31, Y+3	; 0x03
    209a:	80 83       	st	Z, r24
		value++;
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	9b 81       	ldd	r25, Y+3	; 0x03
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	9b 83       	std	Y+3, r25	; 0x03
    20a4:	8a 83       	std	Y+2, r24	; 0x02
{
	nrf24_SPI(SPI_ON);
	SPI_command = R_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
	SPI_send_command(SPI_command);
	SPI_command = NOP_CMD;
	for (; data_length ; data_length--)
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	81 50       	subi	r24, 0x01	; 1
    20aa:	8c 83       	std	Y+4, r24	; 0x04
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	88 23       	and	r24, r24
    20b0:	71 f7       	brne	.-36     	; 0x208e <nrf24_read+0x34>
	{
		*value = SPI_send_command(SPI_command);
		value++;
	}
	if (spi_state == CLOSE)
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	88 23       	and	r24, r24
    20b6:	19 f4       	brne	.+6      	; 0x20be <nrf24_read+0x64>
		nrf24_SPI(SPI_OFF);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <nrf24_write>:

/*writes the number of bytes (data_length) from an array (value) inside registers in nrf24l01+ (address),
  then closes the spi connection (spi_state = CLOSE) or leaves it open (spi_state = OPEN)*/
void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <nrf24_write+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <nrf24_write+0x8>
    20d6:	0f 92       	push	r0
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	7b 83       	std	Y+3, r23	; 0x03
    20e0:	6a 83       	std	Y+2, r22	; 0x02
    20e2:	4c 83       	std	Y+4, r20	; 0x04
    20e4:	2d 83       	std	Y+5, r18	; 0x05
	nrf24_SPI(SPI_ON);
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
	SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	80 62       	ori	r24, 0x20	; 32
    20f0:	80 93 2a 02 	sts	0x022A, r24
	SPI_send_command(SPI_command);
    20f4:	80 91 2a 02 	lds	r24, 0x022A
    20f8:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
    20fc:	11 c0       	rjmp	.+34     	; 0x2120 <nrf24_write+0x52>
	for (; data_length ; data_length--)
	{
		SPI_command = *value;
    20fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2100:	fb 81       	ldd	r31, Y+3	; 0x03
    2102:	80 81       	ld	r24, Z
    2104:	80 93 2a 02 	sts	0x022A, r24
		value++;
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	9b 81       	ldd	r25, Y+3	; 0x03
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	9b 83       	std	Y+3, r25	; 0x03
    2110:	8a 83       	std	Y+2, r24	; 0x02
		SPI_send_command(SPI_command);
    2112:	80 91 2a 02 	lds	r24, 0x022A
    2116:	0e 94 c6 09 	call	0x138c	; 0x138c <SPI_send_command>
void nrf24_write(uint8_t address, uint8_t *value, uint8_t data_length, uint8_t spi_state)
{
	nrf24_SPI(SPI_ON);
	SPI_command = W_REGISTER | address;    /*in order to read CONFIG, then change one bit*/
	SPI_send_command(SPI_command);
	for (; data_length ; data_length--)
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	8c 83       	std	Y+4, r24	; 0x04
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	88 23       	and	r24, r24
    2124:	61 f7       	brne	.-40     	; 0x20fe <nrf24_write+0x30>
	{
		SPI_command = *value;
		value++;
		SPI_send_command(SPI_command);
	}
	if (spi_state == CLOSE)
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	88 23       	and	r24, r24
    212a:	19 f4       	brne	.+6      	; 0x2132 <nrf24_write+0x64>
		nrf24_SPI(SPI_OFF);
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	0e 94 ae 09 	call	0x135c	; 0x135c <nrf24_SPI>
}
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <PORT_voidInit>:
#include"STD_TYPES.h"
#include"PORT_config.h"
#include"PORT_private.h"
#include"PORT_register.h"
#include"PORT_interface.h"
  void PORT_voidInit(void){
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    DDRD=PORTD_DIR;
    214a:	ea e2       	ldi	r30, 0x2A	; 42
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	8e ed       	ldi	r24, 0xDE	; 222
    2150:	80 83       	st	Z, r24
    DDRC=PORTC_DIR;
    2152:	e7 e2       	ldi	r30, 0x27	; 39
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	8f ef       	ldi	r24, 0xFF	; 255
    2158:	80 83       	st	Z, r24
    DDRB=PORTB_DIR;
    215a:	e4 e2       	ldi	r30, 0x24	; 36
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	8b e2       	ldi	r24, 0x2B	; 43
    2160:	80 83       	st	Z, r24
    PORTD=PORTD_INIT_VALUE;
    2162:	eb e2       	ldi	r30, 0x2B	; 43
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	88 ea       	ldi	r24, 0xA8	; 168
    2168:	80 83       	st	Z, r24
    PORTC=PORTC_INIT_VALUE;
    216a:	e8 e2       	ldi	r30, 0x28	; 40
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	10 82       	st	Z, r1
    PORTB=PORTB_INIT_VALUE;
    2170:	e5 e2       	ldi	r30, 0x25	; 37
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	84 e0       	ldi	r24, 0x04	; 4
    2176:	80 83       	st	Z, r24
  }
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <SPI_VoidMasterInit>:
#include"SPI_config.h"
#include"SPI_private.h"
#include"SPI_register.h"


void SPI_VoidMasterInit(void){
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
	//select master
	SET_BIT(SPCR,SPCR_MSTR);
    2186:	ac e4       	ldi	r26, 0x4C	; 76
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	ec e4       	ldi	r30, 0x4C	; 76
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	80 61       	ori	r24, 0x10	; 16
    2192:	8c 93       	st	X, r24
	//set the clock divide by 16
	SET_BIT(SPCR,SPCR_SPR0);
    2194:	ac e4       	ldi	r26, 0x4C	; 76
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	ec e4       	ldi	r30, 0x4C	; 76
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	81 60       	ori	r24, 0x01	; 1
    21a0:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,SPCR_SPR1);
    21a2:	ac e4       	ldi	r26, 0x4C	; 76
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	ec e4       	ldi	r30, 0x4C	; 76
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	8d 7f       	andi	r24, 0xFD	; 253
    21ae:	8c 93       	st	X, r24
	CLEAR_BIT(SPSR,SPSR_SPI2X);
    21b0:	ad e4       	ldi	r26, 0x4D	; 77
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	ed e4       	ldi	r30, 0x4D	; 77
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8e 7f       	andi	r24, 0xFE	; 254
    21bc:	8c 93       	st	X, r24
	//SPI enable
	SET_BIT(SPCR,SPCR_SPE);
    21be:	ac e4       	ldi	r26, 0x4C	; 76
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	ec e4       	ldi	r30, 0x4C	; 76
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	80 64       	ori	r24, 0x40	; 64
    21ca:	8c 93       	st	X, r24
}
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <SPI_VoidSlaveInit>:
void SPI_VoidSlaveInit(void){
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
	//select slave
	CLEAR_BIT(SPCR,SPCR_MSTR);
    21da:	ac e4       	ldi	r26, 0x4C	; 76
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	ec e4       	ldi	r30, 0x4C	; 76
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8f 7e       	andi	r24, 0xEF	; 239
    21e6:	8c 93       	st	X, r24
	//SPI enable
	SET_BIT(SPCR,SPCR_SPE);
    21e8:	ac e4       	ldi	r26, 0x4C	; 76
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ec e4       	ldi	r30, 0x4C	; 76
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	80 64       	ori	r24, 0x40	; 64
    21f4:	8c 93       	st	X, r24
}
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <SPI_u8Transceive>:
u8 SPI_u8Transceive(u8 Copy_u8SentData,u8* Copy_Pu8ReceviedData ){
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <SPI_u8Transceive+0x6>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <SPI_u8Transceive+0x8>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	8a 83       	std	Y+2, r24	; 0x02
    220a:	7c 83       	std	Y+4, r23	; 0x04
    220c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErorState=OK;
    220e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Pu8ReceviedData==NULL){
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	19 f4       	brne	.+6      	; 0x221e <SPI_u8Transceive+0x22>
		Local_u8ErorState=NULL_POINTER;
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	0f c0       	rjmp	.+30     	; 0x223c <SPI_u8Transceive+0x40>
	}
	else {
		//send data
		SPDR=Copy_u8SentData;
    221e:	ee e4       	ldi	r30, 0x4E	; 78
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	80 83       	st	Z, r24
		//busy wating until the end of transmission flag is set
		while(GET_BIT(SPSR,SPSR_SPIF)==0);
    2226:	ed e4       	ldi	r30, 0x4D	; 77
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	88 23       	and	r24, r24
    222e:	dc f7       	brge	.-10     	; 0x2226 <SPI_u8Transceive+0x2a>
		//get the received data
		*Copy_Pu8ReceviedData=SPDR;
    2230:	ee e4       	ldi	r30, 0x4E	; 78
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	eb 81       	ldd	r30, Y+3	; 0x03
    2238:	fc 81       	ldd	r31, Y+4	; 0x04
    223a:	80 83       	st	Z, r24
	}
	return Local_u8ErorState;
    223c:	89 81       	ldd	r24, Y+1	; 0x01
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <USART_voidinit>:
#include"USART_interface.h"
#include"USART_private.h"
#include"USART_config.h"
#include"USART_register.h"

void USART_voidinit(void){
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
 u8 Local_u8UCSR0C=0;
    2256:	19 82       	std	Y+1, r1	; 0x01
	/*1 stop bit*/
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_USBS0);
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	87 7f       	andi	r24, 0xF7	; 247
    225c:	89 83       	std	Y+1, r24	; 0x01
    /*no parity*/
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_UPM00);
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	8f 7e       	andi	r24, 0xEF	; 239
    2262:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_UPM01);
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_UMSEL00);
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	8f 7b       	andi	r24, 0xBF	; 191
    226e:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(Local_u8UCSR0C,UCSR0C_UMSEL01);
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	8f 77       	andi	r24, 0x7F	; 127
    2274:	89 83       	std	Y+1, r24	; 0x01

    /*8 data bits*/
    SET_BIT(Local_u8UCSR0C,UCSR0C_UCSZ00);
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	82 60       	ori	r24, 0x02	; 2
    227a:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8UCSR0C,UCSR0C_UCSZ01);
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	84 60       	ori	r24, 0x04	; 4
    2280:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(UCSR0B,UCSR0B_UCSZ02);
    2282:	a1 ec       	ldi	r26, 0xC1	; 193
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e1 ec       	ldi	r30, 0xC1	; 193
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8b 7f       	andi	r24, 0xFB	; 251
    228e:	8c 93       	st	X, r24
    UCSR0C=Local_u8UCSR0C;
    2290:	e2 ec       	ldi	r30, 0xC2	; 194
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	80 83       	st	Z, r24
    CLEAR_BIT(UCSR0A,UCSR0A_U2X0);
    2298:	a0 ec       	ldi	r26, 0xC0	; 192
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e0 ec       	ldi	r30, 0xC0	; 192
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8d 7f       	andi	r24, 0xFD	; 253
    22a4:	8c 93       	st	X, r24
    /*4900BPS*/
    UBRR0=103;
    22a6:	e4 ec       	ldi	r30, 0xC4	; 196
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	87 e6       	ldi	r24, 0x67	; 103
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	80 83       	st	Z, r24
    /*receive  enable*/
    SET_BIT(UCSR0B,UCSR0B_RXEN0);
    22b2:	a1 ec       	ldi	r26, 0xC1	; 193
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e1 ec       	ldi	r30, 0xC1	; 193
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 61       	ori	r24, 0x10	; 16
    22be:	8c 93       	st	X, r24
    /*transmit  enable*/
       SET_BIT(UCSR0B,UCSR0B_TXEN0);
    22c0:	a1 ec       	ldi	r26, 0xC1	; 193
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e1 ec       	ldi	r30, 0xC1	; 193
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	88 60       	ori	r24, 0x08	; 8
    22cc:	8c 93       	st	X, r24
}
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <USART_voidsenddata>:


void USART_voidsenddata(u8 copy_u8data){
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	0f 92       	push	r0
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSR0A,UCSR0A_UDRE0)==0);
    22e2:	e0 ec       	ldi	r30, 0xC0	; 192
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	82 95       	swap	r24
    22ea:	86 95       	lsr	r24
    22ec:	87 70       	andi	r24, 0x07	; 7
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	81 70       	andi	r24, 0x01	; 1
    22f4:	90 70       	andi	r25, 0x00	; 0
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	a1 f3       	breq	.-24     	; 0x22e2 <USART_voidsenddata+0xc>
	UDR0=copy_u8data;
    22fa:	e6 ec       	ldi	r30, 0xC6	; 198
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	80 83       	st	Z, r24
}
    2302:	0f 90       	pop	r0
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <USART_voidreceivedata>:
u8 USART_voidreceivedata(void){
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSR0A,UCSR0A_RXC0)==0);
    2312:	e0 ec       	ldi	r30, 0xC0	; 192
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	88 23       	and	r24, r24
    231a:	dc f7       	brge	.-10     	; 0x2312 <USART_voidreceivedata+0x8>
	return UDR0;
    231c:	e6 ec       	ldi	r30, 0xC6	; 198
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
}
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <main>:
#define TIME_GAP    500
#include "PORT_interface.h"
#include "DIO_interface.h"
uint8_t ascending_number = 0X00;

void main(void){
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	2f 97       	sbiw	r28, 0x0f	; 15
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    PORT_voidInit();
    233c:	0e 94 a1 10 	call	0x2142	; 0x2142 <PORT_voidInit>
	USART_voidinit();
    2340:	0e 94 26 11 	call	0x224c	; 0x224c <USART_voidinit>
	nrf24_device(TRANSMITTER, RESET);     //initializing nrf24l01+ as a transmitter using one simple function
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	61 e0       	ldi	r22, 0x01	; 1
    2348:	0e 94 4b 0c 	call	0x1896	; 0x1896 <nrf24_device>
	u8 DATA=3;
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	8f 87       	std	Y+15, r24	; 0x0f
	while(1){
		 DATA=USART_voidreceivedata();
    2350:	0e 94 85 11 	call	0x230a	; 0x230a <USART_voidreceivedata>
    2354:	8f 87       	std	Y+15, r24	; 0x0f
		 USART_voidsenddata(DATA);
    2356:	8f 85       	ldd	r24, Y+15	; 0x0f
    2358:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <USART_voidsenddata>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	aa ef       	ldi	r26, 0xFA	; 250
    2362:	b3 e4       	ldi	r27, 0x43	; 67
    2364:	8b 87       	std	Y+11, r24	; 0x0b
    2366:	9c 87       	std	Y+12, r25	; 0x0c
    2368:	ad 87       	std	Y+13, r26	; 0x0d
    236a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236c:	6b 85       	ldd	r22, Y+11	; 0x0b
    236e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2370:	8d 85       	ldd	r24, Y+13	; 0x0d
    2372:	9e 85       	ldd	r25, Y+14	; 0x0e
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a e7       	ldi	r20, 0x7A	; 122
    237a:	53 e4       	ldi	r21, 0x43	; 67
    237c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	8f 83       	std	Y+7, r24	; 0x07
    2386:	98 87       	std	Y+8, r25	; 0x08
    2388:	a9 87       	std	Y+9, r26	; 0x09
    238a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    238c:	6f 81       	ldd	r22, Y+7	; 0x07
    238e:	78 85       	ldd	r23, Y+8	; 0x08
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e8       	ldi	r20, 0x80	; 128
    239a:	5f e3       	ldi	r21, 0x3F	; 63
    239c:	0e 94 83 03 	call	0x706	; 0x706 <__ltsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	2c f4       	brge	.+10     	; 0x23ae <main+0x86>
		__ticks = 1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
    23ac:	3f c0       	rjmp	.+126    	; 0x242c <main+0x104>
	else if (__tmp > 65535)
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	4f e7       	ldi	r20, 0x7F	; 127
    23bc:	57 e4       	ldi	r21, 0x47	; 71
    23be:	0e 94 23 03 	call	0x646	; 0x646 <__gtsf2>
    23c2:	18 16       	cp	r1, r24
    23c4:	4c f5       	brge	.+82     	; 0x2418 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    23cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e2       	ldi	r20, 0x20	; 32
    23d4:	51 e4       	ldi	r21, 0x41	; 65
    23d6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <main+0xe6>
    23f0:	89 e1       	ldi	r24, 0x19	; 25
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9c 83       	std	Y+4, r25	; 0x04
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <main+0xd4>
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	69 f7       	brne	.-38     	; 0x23f0 <main+0xc8>
    2416:	14 c0       	rjmp	.+40     	; 0x2440 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	0e 94 53 00 	call	0xa6	; 0xa6 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <main+0x110>
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(TIME_GAP);
		while(nrf24_transmit(&DATA, 1, NO_ACK_MODE) == TRANSMIT_FAIL){
    2440:	ce 01       	movw	r24, r28
    2442:	0f 96       	adiw	r24, 0x0f	; 15
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	0e 94 2c 0a 	call	0x1458	; 0x1458 <nrf24_transmit>
    244c:	88 23       	and	r24, r24
    244e:	c1 f3       	breq	.-16     	; 0x2440 <main+0x118>

		}//wait until payload is loaded into TX buffer
		while(nrf24_transmit_status() == TRANSMIT_IN_PROGRESS);
    2450:	0e 94 a0 0a 	call	0x1540	; 0x1540 <nrf24_transmit_status>
    2454:	88 23       	and	r24, r24
    2456:	e1 f3       	breq	.-8      	; 0x2450 <main+0x128>
    2458:	7b cf       	rjmp	.-266    	; 0x2350 <main+0x28>

0000245a <__prologue_saves__>:
    245a:	2f 92       	push	r2
    245c:	3f 92       	push	r3
    245e:	4f 92       	push	r4
    2460:	5f 92       	push	r5
    2462:	6f 92       	push	r6
    2464:	7f 92       	push	r7
    2466:	8f 92       	push	r8
    2468:	9f 92       	push	r9
    246a:	af 92       	push	r10
    246c:	bf 92       	push	r11
    246e:	cf 92       	push	r12
    2470:	df 92       	push	r13
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	ca 1b       	sub	r28, r26
    2484:	db 0b       	sbc	r29, r27
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	09 94       	ijmp

00002492 <__epilogue_restores__>:
    2492:	2a 88       	ldd	r2, Y+18	; 0x12
    2494:	39 88       	ldd	r3, Y+17	; 0x11
    2496:	48 88       	ldd	r4, Y+16	; 0x10
    2498:	5f 84       	ldd	r5, Y+15	; 0x0f
    249a:	6e 84       	ldd	r6, Y+14	; 0x0e
    249c:	7d 84       	ldd	r7, Y+13	; 0x0d
    249e:	8c 84       	ldd	r8, Y+12	; 0x0c
    24a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    24a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    24a4:	b9 84       	ldd	r11, Y+9	; 0x09
    24a6:	c8 84       	ldd	r12, Y+8	; 0x08
    24a8:	df 80       	ldd	r13, Y+7	; 0x07
    24aa:	ee 80       	ldd	r14, Y+6	; 0x06
    24ac:	fd 80       	ldd	r15, Y+5	; 0x05
    24ae:	0c 81       	ldd	r16, Y+4	; 0x04
    24b0:	1b 81       	ldd	r17, Y+3	; 0x03
    24b2:	aa 81       	ldd	r26, Y+2	; 0x02
    24b4:	b9 81       	ldd	r27, Y+1	; 0x01
    24b6:	ce 0f       	add	r28, r30
    24b8:	d1 1d       	adc	r29, r1
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	ed 01       	movw	r28, r26
    24c6:	08 95       	ret

000024c8 <_exit>:
    24c8:	f8 94       	cli

000024ca <__stop_program>:
    24ca:	ff cf       	rjmp	.-2      	; 0x24ca <__stop_program>
